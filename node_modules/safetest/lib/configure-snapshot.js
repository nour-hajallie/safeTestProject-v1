"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.configureSnapshot = void 0;
const lodash_1 = require("lodash");
const safe_require_1 = require("./safe-require");
const state_1 = require("./state");
const exists = async (path) => {
    const fs = (0, safe_require_1.safeRequire)('fs');
    return new Promise((resolve) => {
        fs.access(path, (err) => resolve(!err));
    });
};
const configureSnapshot = (expect) => {
    const artifacts = state_1.state.artifacts;
    const common = {
        customSnapshotsDir: './__image_snapshots__',
        customSnapshotIdentifier: (parameters) => `${parameters.defaultIdentifier.replace(/-\d+$/, '')}-${parameters.counter}-snap`,
    };
    expect.extend({
        toMatchImageSnapshot: function (received, options) {
            const mergedOptions = (0, lodash_1.merge)(common, state_1.state.options.matchImageSnapshotOptions, options);
            const customSnapshotIdentifier = mergedOptions.customSnapshotIdentifier;
            mergedOptions.customSnapshotIdentifier = (parameters) => {
                const test = expect.getState().currentTestName ?? '<unknown>';
                if (typeof customSnapshotIdentifier === 'function') {
                    const id = customSnapshotIdentifier(parameters);
                    const path = (0, safe_require_1.safeRequire)('path');
                    const SNAPSHOTS_DIR = '__image_snapshots__';
                    const snapshotsDir = mergedOptions.customSnapshotsDir ?? SNAPSHOTS_DIR;
                    const receivedPostfix = mergedOptions.customReceivedPostfix ?? '-received';
                    const receivedDir = mergedOptions.customReceivedDir ??
                        path.join(snapshotsDir, '__received_output__');
                    const received = path.join(receivedDir, `${id}${receivedPostfix}.png`);
                    const diffDir = mergedOptions.customDiffDir ??
                        path.join(snapshotsDir, '__diff_output__');
                    const diff = path.join(diffDir, `${id}-diff.png`);
                    const snapshot = path.join(snapshotsDir, `${id}.png`);
                    artifacts.push({
                        type: 'snapshot',
                        test,
                        path: snapshot,
                        confirmed: false,
                    });
                    artifacts.push({
                        type: 'received',
                        test,
                        path: received,
                        confirmed: false,
                    });
                    artifacts.push({ type: 'diff', test, path: diff, confirmed: false });
                    return id;
                }
                return customSnapshotIdentifier;
            };
            const { toMatchImageSnapshot } = (0, safe_require_1.safeRequire)('jest-image-snapshot');
            return toMatchImageSnapshot.call(this, received, mergedOptions);
        },
    });
};
exports.configureSnapshot = configureSnapshot;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29uZmlndXJlLXNuYXBzaG90LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vc3JjL2NvbmZpZ3VyZS1zbmFwc2hvdC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7QUFDQSxtQ0FBK0I7QUFDL0IsaURBQTZDO0FBQzdDLG1DQUFnQztBQUVoQyxNQUFNLE1BQU0sR0FBRyxLQUFLLEVBQUUsSUFBWSxFQUFFLEVBQUU7SUFDcEMsTUFBTSxFQUFFLEdBQUcsSUFBQSwwQkFBVyxFQUFDLElBQUksQ0FBQyxDQUFDO0lBQzdCLE9BQU8sSUFBSSxPQUFPLENBQUMsQ0FBQyxPQUFPLEVBQUUsRUFBRTtRQUM3QixFQUFFLENBQUMsTUFBTSxDQUFDLElBQUksRUFBRSxDQUFDLEdBQUcsRUFBRSxFQUFFLENBQUMsT0FBTyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQztJQUMxQyxDQUFDLENBQUMsQ0FBQztBQUNMLENBQUMsQ0FBQztBQUVLLE1BQU0saUJBQWlCLEdBQUcsQ0FBQyxNQUFtQixFQUFFLEVBQUU7SUFDdkQsTUFBTSxTQUFTLEdBQUcsYUFBSyxDQUFDLFNBQVMsQ0FBQztJQUNsQyxNQUFNLE1BQU0sR0FBOEI7UUFDeEMsa0JBQWtCLEVBQUUsdUJBQXVCO1FBQzNDLHdCQUF3QixFQUFFLENBQUMsVUFBVSxFQUFFLEVBQUUsQ0FDdkMsR0FBRyxVQUFVLENBQUMsaUJBQWlCLENBQUMsT0FBTyxDQUFDLE9BQU8sRUFBRSxFQUFFLENBQUMsSUFDbEQsVUFBVSxDQUFDLE9BQ2IsT0FBTztLQUNWLENBQUM7SUFFRixNQUFNLENBQUMsTUFBTSxDQUFDO1FBQ1osb0JBQW9CLEVBQUUsVUFDcEIsUUFBZ0IsRUFDaEIsT0FBa0M7WUFFbEMsTUFBTSxhQUFhLEdBQUcsSUFBQSxjQUFLLEVBQ3pCLE1BQU0sRUFDTixhQUFLLENBQUMsT0FBTyxDQUFDLHlCQUF5QixFQUN2QyxPQUFPLENBQ1IsQ0FBQztZQUVGLE1BQU0sd0JBQXdCLEdBQUcsYUFBYSxDQUFDLHdCQUF3QixDQUFDO1lBQ3hFLGFBQWEsQ0FBQyx3QkFBd0IsR0FBRyxDQUFDLFVBQVUsRUFBRSxFQUFFO2dCQUN0RCxNQUFNLElBQUksR0FBRyxNQUFNLENBQUMsUUFBUSxFQUFFLENBQUMsZUFBZSxJQUFJLFdBQVcsQ0FBQztnQkFDOUQsSUFBSSxPQUFPLHdCQUF3QixLQUFLLFVBQVUsRUFBRTtvQkFDbEQsTUFBTSxFQUFFLEdBQUcsd0JBQXlCLENBQUMsVUFBVSxDQUFDLENBQUM7b0JBQ2pELE1BQU0sSUFBSSxHQUFHLElBQUEsMEJBQVcsRUFBQyxNQUFNLENBQUMsQ0FBQztvQkFDakMsTUFBTSxhQUFhLEdBQUcscUJBQXFCLENBQUM7b0JBRTVDLE1BQU0sWUFBWSxHQUNoQixhQUFhLENBQUMsa0JBQWtCLElBQUksYUFBYSxDQUFDO29CQUNwRCxNQUFNLGVBQWUsR0FDbkIsYUFBYSxDQUFDLHFCQUFxQixJQUFJLFdBQVcsQ0FBQztvQkFDckQsTUFBTSxXQUFXLEdBQ2YsYUFBYSxDQUFDLGlCQUFpQjt3QkFDL0IsSUFBSSxDQUFDLElBQUksQ0FBQyxZQUFZLEVBQUUscUJBQXFCLENBQUMsQ0FBQztvQkFDakQsTUFBTSxRQUFRLEdBQUcsSUFBSSxDQUFDLElBQUksQ0FDeEIsV0FBVyxFQUNYLEdBQUcsRUFBRSxHQUFHLGVBQWUsTUFBTSxDQUM5QixDQUFDO29CQUNGLE1BQU0sT0FBTyxHQUNYLGFBQWEsQ0FBQyxhQUFhO3dCQUMzQixJQUFJLENBQUMsSUFBSSxDQUFDLFlBQVksRUFBRSxpQkFBaUIsQ0FBQyxDQUFDO29CQUU3QyxNQUFNLElBQUksR0FBRyxJQUFJLENBQUMsSUFBSSxDQUFDLE9BQU8sRUFBRSxHQUFHLEVBQUUsV0FBVyxDQUFDLENBQUM7b0JBQ2xELE1BQU0sUUFBUSxHQUFHLElBQUksQ0FBQyxJQUFJLENBQUMsWUFBWSxFQUFFLEdBQUcsRUFBRSxNQUFNLENBQUMsQ0FBQztvQkFDdEQsU0FBUyxDQUFDLElBQUksQ0FBQzt3QkFDYixJQUFJLEVBQUUsVUFBVTt3QkFDaEIsSUFBSTt3QkFDSixJQUFJLEVBQUUsUUFBUTt3QkFDZCxTQUFTLEVBQUUsS0FBSztxQkFDakIsQ0FBQyxDQUFDO29CQUNILFNBQVMsQ0FBQyxJQUFJLENBQUM7d0JBQ2IsSUFBSSxFQUFFLFVBQVU7d0JBQ2hCLElBQUk7d0JBQ0osSUFBSSxFQUFFLFFBQVE7d0JBQ2QsU0FBUyxFQUFFLEtBQUs7cUJBQ2pCLENBQUMsQ0FBQztvQkFDSCxTQUFTLENBQUMsSUFBSSxDQUFDLEVBQUUsSUFBSSxFQUFFLE1BQU0sRUFBRSxJQUFJLEVBQUUsSUFBSSxFQUFFLElBQUksRUFBRSxTQUFTLEVBQUUsS0FBSyxFQUFFLENBQUMsQ0FBQztvQkFFckUsT0FBTyxFQUFFLENBQUM7aUJBQ1g7Z0JBQ0QsT0FBTyx3QkFBeUIsQ0FBQztZQUNuQyxDQUFDLENBQUM7WUFDRixNQUFNLEVBQUUsb0JBQW9CLEVBQUUsR0FBRyxJQUFBLDBCQUFXLEVBQUMscUJBQXFCLENBQUMsQ0FBQztZQUNwRSxPQUFRLG9CQUE0QixDQUFDLElBQUksQ0FBQyxJQUFJLEVBQUUsUUFBUSxFQUFFLGFBQWEsQ0FBQyxDQUFDO1FBQzNFLENBQUM7S0FDRixDQUFDLENBQUM7QUFDTCxDQUFDLENBQUM7QUFwRVcsUUFBQSxpQkFBaUIscUJBb0U1QiJ9