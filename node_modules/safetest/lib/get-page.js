"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.getPage = void 0;
const deepmerge_1 = __importDefault(require("deepmerge"));
const node_fetch_1 = __importDefault(require("node-fetch"));
const state_1 = require("./state");
const is_in_node_1 = require("./is-in-node");
const safe_require_1 = require("./safe-require");
const cleanup_browser_1 = require("./cleanup-browser");
const override_events_1 = require("./override-events");
const makeWarning = (msg) => {
    let warnOnce = false;
    return (console) => {
        if (warnOnce)
            return;
        warnOnce = true;
        console.warn(msg);
    };
};
const warnOpeningLocal = makeWarning('Docker and headed mode detected, opening a local browser with a remote debug connection.');
async function getPage(options = {}, forceNewBrowser = false) {
    if (!is_in_node_1.isInNode)
        return {};
    const playwright = (0, safe_require_1.safeRequire)('playwright');
    if (forceNewBrowser) {
        await (0, cleanup_browser_1.cleanupBrowser)();
    }
    if (!state_1.state.browserContextInstance) {
        const server = options.browserServer;
        const browserType = playwright[options.browser ?? 'chromium'];
        const browser = server
            ? await browserType.connect(server, { timeout: options.timeout ?? 30000 })
            : await browserType.launch(options);
        state_1.state.nextIndex = 0;
        const started = Date.now();
        state_1.state.browserContextInstance = await browser.newContext(options);
        state_1.state.browserContextInstance.on('page', (page) => {
            if (page._safetest_internal)
                return;
            page._safetest_internal = {
                pageIndex: state_1.state.nextIndex++,
                started: Date.now() - started,
                hooks: (0, deepmerge_1.default)({
                    beforeNavigate: [],
                    beforeClose: [],
                    afterTest: [],
                }, options.hooks ?? {}),
            };
            if (options.defaultTimeout) {
                page.setDefaultTimeout(options.defaultTimeout);
            }
            if (options.defaultNavigationTimeout) {
                page.setDefaultNavigationTimeout(options.defaultNavigationTimeout);
            }
            if (options.enableScreenCasting) {
                (0, override_events_1.overrideEvents)(page);
            }
        });
        if (typeof options.headless !== 'undefined' && !server) {
            state_1.state.browserContextInstance.headless = options.headless;
        }
        state_1.state.browserContextInstance.setDefaultTimeout(3000);
    }
    const server = options.browserServer;
    const page = (state_1.state.browserContextInstance.pages()[0] ??
        (await state_1.state.browserContextInstance.newPage()));
    if (server) {
        const debugPageShown = new Set();
        const logDebugTabs = async () => {
            const debugPort = state_1.state.debugPort;
            const console = (0, safe_require_1.safeRequire)('console');
            const redirectServer = (0, safe_require_1.safeRequire)('./redirect-server');
            let list = [];
            try {
                const listUrl = `http://127.0.0.1:${debugPort}/json/list`;
                const response = await (0, node_fetch_1.default)(listUrl);
                list = await response.json();
            }
            catch { }
            const items = list.map((l) => l.devtoolsFrontendUrl);
            const itemsSet = new Set(items);
            const newItems = items.filter((url) => !debugPageShown.has(url));
            const removedItems = Array.from(debugPageShown).filter((url) => !itemsSet.has(url));
            const MY_IP = process.env['MY_IP'] || '127.0.0.1';
            for (const url of newItems) {
                const remoteUrl = url.replace('127.0.0.1', MY_IP);
                const debugUrl = `http://${MY_IP}:${debugPort}${remoteUrl}`;
                redirectServer.notify(0, debugUrl);
                if (options.headless === false) {
                    warnOpeningLocal(console);
                }
                console.log(`Debug tab at: http://${MY_IP}:${debugPort}${remoteUrl}`);
            }
            for (const url of removedItems) {
                const remoteUrl = url.replace('127.0.0.1', MY_IP);
                const debugUrl = `http://${MY_IP}:${debugPort}${remoteUrl}`;
                debugPageShown.delete(url);
                console.log(`Closed tab    ${debugUrl}`);
            }
        };
        page._safetest_internal.pageSetupPromise = logDebugTabs();
        page.on('close', logDebugTabs);
    }
    await page._safetest_internal.pageSetupPromise;
    return { page };
}
exports.getPage = getPage;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ2V0LXBhZ2UuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi9zcmMvZ2V0LXBhZ2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQUEsMERBQThCO0FBRTlCLDREQUErQjtBQUUvQixtQ0FBZ0M7QUFDaEMsNkNBQXdDO0FBQ3hDLGlEQUE2QztBQUU3Qyx1REFBbUQ7QUFFbkQsdURBQW1EO0FBT25ELE1BQU0sV0FBVyxHQUFHLENBQUMsR0FBVyxFQUFFLEVBQUU7SUFDbEMsSUFBSSxRQUFRLEdBQUcsS0FBSyxDQUFDO0lBQ3JCLE9BQU8sQ0FBQyxPQUFnQixFQUFFLEVBQUU7UUFDMUIsSUFBSSxRQUFRO1lBQUUsT0FBTztRQUNyQixRQUFRLEdBQUcsSUFBSSxDQUFDO1FBQ2hCLE9BQU8sQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUM7SUFDcEIsQ0FBQyxDQUFDO0FBQ0osQ0FBQyxDQUFDO0FBRUYsTUFBTSxnQkFBZ0IsR0FBRyxXQUFXLENBQ2xDLDBGQUEwRixDQUMzRixDQUFDO0FBRUssS0FBSyxVQUFVLE9BQU8sQ0FDM0IsVUFBeUIsRUFBRSxFQUMzQixlQUFlLEdBQUcsS0FBSztJQUV2QixJQUFJLENBQUMscUJBQVE7UUFBRSxPQUFPLEVBQVMsQ0FBQztJQUVoQyxNQUFNLFVBQVUsR0FBRyxJQUFBLDBCQUFXLEVBQUMsWUFBWSxDQUFDLENBQUM7SUFFN0MsSUFBSSxlQUFlLEVBQUU7UUFDbkIsTUFBTSxJQUFBLGdDQUFjLEdBQUUsQ0FBQztLQUN4QjtJQUVELElBQUksQ0FBQyxhQUFLLENBQUMsc0JBQXNCLEVBQUU7UUFDakMsTUFBTSxNQUFNLEdBQUcsT0FBTyxDQUFDLGFBQWEsQ0FBQztRQUNyQyxNQUFNLFdBQVcsR0FBRyxVQUFVLENBQUMsT0FBTyxDQUFDLE9BQU8sSUFBSSxVQUFVLENBQUMsQ0FBQztRQUM5RCxNQUFNLE9BQU8sR0FBRyxNQUFNO1lBQ3BCLENBQUMsQ0FBQyxNQUFNLFdBQVcsQ0FBQyxPQUFPLENB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