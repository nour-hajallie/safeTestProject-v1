/**
 * Copyright Microsoft Corporation. All rights reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import type { Locator, Page, APIResponse } from 'playwright-core';
interface LocatorEx extends Locator {
    _expect(expression: string, options: any): Promise<{
        matches: boolean;
        received?: any;
        log?: string[];
        timedOut?: boolean;
    }>;
}
interface APIResponseEx extends APIResponse {
    _fetchLog(): Promise<string[]>;
}
type ExpectMatcherContext = any;
export declare function toBeAttached(this: ExpectMatcherContext, locator: LocatorEx, options?: {
    attached?: boolean;
    timeout?: number;
}): Promise<{
    message: () => string;
    pass: boolean;
}>;
export declare function toBeChecked(this: ExpectMatcherContext, locator: LocatorEx, options?: {
    checked?: boolean;
    timeout?: number;
}): Promise<{
    message: () => string;
    pass: boolean;
}>;
export declare function toBeDisabled(this: ExpectMatcherContext, locator: LocatorEx, options?: {
    timeout?: number;
}): Promise<{
    message: () => string;
    pass: boolean;
}>;
export declare function toBeEditable(this: ExpectMatcherContext, locator: LocatorEx, options?: {
    editable?: boolean;
    timeout?: number;
}): Promise<{
    message: () => string;
    pass: boolean;
}>;
export declare function toBeEmpty(this: ExpectMatcherContext, locator: LocatorEx, options?: {
    timeout?: number;
}): Promise<{
    message: () => string;
    pass: boolean;
}>;
export declare function toBeEnabled(this: ExpectMatcherContext, locator: LocatorEx, options?: {
    enabled?: boolean;
    timeout?: number;
}): Promise<{
    message: () => string;
    pass: boolean;
}>;
export declare function toBeFocused(this: ExpectMatcherContext, locator: LocatorEx, options?: {
    timeout?: number;
}): Promise<{
    message: () => string;
    pass: boolean;
}>;
export declare function toBeHidden(this: ExpectMatcherContext, locator: LocatorEx, options?: {
    timeout?: number;
}): Promise<{
    message: () => string;
    pass: boolean;
}>;
export declare function toBeVisible(this: ExpectMatcherContext, locator: LocatorEx, options?: {
    visible?: boolean;
    timeout?: number;
}): Promise<{
    message: () => string;
    pass: boolean;
}>;
export declare function toBeInViewport(this: ExpectMatcherContext, locator: LocatorEx, options?: {
    timeout?: number;
    ratio?: number;
}): Promise<{
    message: () => string;
    pass: boolean;
}>;
export declare function toContainText(this: ExpectMatcherContext, locator: LocatorEx, expected: string | RegExp | (string | RegExp)[], options?: {
    timeout?: number;
    useInnerText?: boolean;
    ignoreCase?: boolean;
}): Promise<{
    message: () => string;
    pass: boolean;
}>;
export declare function toHaveAttribute(this: ExpectMatcherContext, locator: LocatorEx, name: string, expected: string | RegExp, options?: {
    timeout?: number;
}): Promise<{
    message: () => string;
    pass: boolean;
}>;
export declare function toHaveClass(this: ExpectMatcherContext, locator: LocatorEx, expected: string | RegExp | (string | RegExp)[], options?: {
    timeout?: number;
}): Promise<{
    message: () => string;
    pass: boolean;
}>;
export declare function toHaveCount(this: ExpectMatcherContext, locator: LocatorEx, expected: number, options?: {
    timeout?: number;
}): Promise<{
    actual: any;
    expected: unknown;
    message: () => string;
    name: string;
    pass: boolean;
}>;
export declare function toHaveCSS(this: ExpectMatcherContext, locator: LocatorEx, name: string, expected: string | RegExp, options?: {
    timeout?: number;
}): Promise<{
    message: () => string;
    pass: boolean;
}>;
export declare function toHaveId(this: ExpectMatcherContext, locator: LocatorEx, expected: string | RegExp, options?: {
    timeout?: number;
}): Promise<{
    message: () => string;
    pass: boolean;
}>;
export declare function toHaveJSProperty(this: ExpectMatcherContext, locator: LocatorEx, name: string, expected: any, options?: {
    timeout?: number;
}): Promise<{
    actual: any;
    expected: unknown;
    message: () => string;
    name: string;
    pass: boolean;
}>;
export declare function toHaveText(this: ExpectMatcherContext, locator: LocatorEx, expected: string | RegExp | (string | RegExp)[], options?: {
    timeout?: number;
    useInnerText?: boolean;
    ignoreCase?: boolean;
}): Promise<{
    message: () => string;
    pass: boolean;
}>;
export declare function toHaveValue(this: ExpectMatcherContext, locator: LocatorEx, expected: string | RegExp, options?: {
    timeout?: number;
}): Promise<{
    message: () => string;
    pass: boolean;
}>;
export declare function toHaveValues(this: ExpectMatcherContext, locator: LocatorEx, expected: (string | RegExp)[], options?: {
    timeout?: number;
}): Promise<{
    actual: any;
    expected: unknown;
    message: () => string;
    name: string;
    pass: boolean;
}>;
export declare function toHaveTitle(this: ExpectMatcherContext, page: Page, expected: string | RegExp, options?: {
    timeout?: number;
}): Promise<{
    message: () => string;
    pass: boolean;
}>;
export declare function toHaveURL(this: ExpectMatcherContext, page: Page, expected: string | RegExp, options?: {
    timeout?: number;
}): Promise<{
    message: () => string;
    pass: boolean;
}>;
export declare function toBeOK(this: ExpectMatcherContext, response: APIResponseEx): Promise<{
    message: () => string;
    pass: boolean;
}>;
export {};
//# sourceMappingURL=matchers.d.ts.map