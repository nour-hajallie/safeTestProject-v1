"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.bootstrap = exports.makeSafetestBed = void 0;
const state_1 = require("./state");
const render_1 = require("./render");
const bootstrap_1 = require("./bootstrap");
const is_in_node_1 = require("./is-in-node");
const makeSafetestBed = (renderArgs) => {
    if (is_in_node_1.isInNode) {
        render.configure = () => { };
        return {
            render: render,
        };
    }
    const renderArgsValue = renderArgs();
    let actualNg = undefined;
    const ngPromise = renderArgsValue.Ng.then(async (ng) => {
        actualNg = ng;
        const { TestBed } = await renderArgsValue.TestBed;
        const DynamicTesting = await renderArgsValue.DynamicTesting;
        TestBed.initTestEnvironment(DynamicTesting.BrowserDynamicTestingModule, DynamicTesting.platformBrowserDynamicTesting());
    });
    let renderMeta = undefined;
    afterEach(() => (renderMeta = undefined));
    render.configure = (meta) => (renderMeta = meta);
    return {
        render: render,
    };
    async function render(...args) {
        let elementToRender = args[0];
        let options = args[1] ?? {};
        if (!is_in_node_1.isInNode) {
            if (typeof elementToRender === 'string' ||
                (typeof elementToRender === 'function' &&
                    !elementToRender?.prototype?.constructor?.name)) {
                const ng = await renderArgsValue.Ng;
                const rendered = typeof elementToRender === 'function'
                    ? elementToRender(ng) ?? {}
                    : elementToRender;
                elementToRender = await rendered;
            }
        }
        return (0, render_1.render)({ __isRenderable: true, thing: elementToRender }, options, async (e) => {
            await ngPromise;
            // await new Promise((r) => setTimeout(r, 100));
            const ng = await renderArgsValue.Ng;
            const { TestBed } = await renderArgsValue.TestBed;
            lastRendered?.destroy();
            if (typeof e.thing === 'string') {
                e.thing = ng.Component({ template: e.thing })(class {
                });
            }
            const metadata = {
                ...((renderMeta || (await renderArgsValue.configure?.(ng))) ?? {}),
            };
            if (!metadata.declarations)
                metadata.declarations = [];
            metadata.declarations.push(e.thing);
            await TestBed.configureTestingModule(metadata).compileComponents();
            const fixture = TestBed.createComponent(e.thing);
            lastRendered = fixture;
            fixture.autoDetectChanges();
            await fixture.whenStable();
        });
    }
};
exports.makeSafetestBed = makeSafetestBed;
let lastRendered = undefined;
const bootstrap = async (args) => {
    state_1.state.browserState = {
        retryAttempt: 0,
        renderElement: { __type: 'renderElement', value: args.Module },
    };
    return (0, bootstrap_1.bootstrap)({
        ...args,
        defaultRender: () => args
            .platformBrowserDynamic()
            .bootstrapModule(args.Module)
            .catch((err) => console.error(err)),
    });
};
exports.bootstrap = bootstrap;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibmcuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi9zcmMvbmcudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7O0FBTUEsbUNBQWdDO0FBQ2hDLHFDQUFpRTtBQUNqRSwyQ0FBcUU7QUFDckUsNkNBQXdDO0FBOEJqQyxNQUFNLGVBQWUsR0FBRyxDQUM3QixVQUEwQyxFQUM3QixFQUFFO0lBQ2YsSUFBSSxxQkFBUSxFQUFFO1FBQ1gsTUFBbUIsQ0FBQyxTQUFTLEdBQUcsR0FBRyxFQUFFLEdBQUUsQ0FBQyxDQUFDO1FBQzFDLE9BQU87WUFDTCxNQUFNLEVBQUUsTUFBYTtTQUN0QixDQUFDO0tBQ0g7SUFFRCxNQUFNLGVBQWUsR0FBRyxVQUFVLEVBQUUsQ0FBQztJQUVyQyxJQUFJLFFBQVEsR0FBbUIsU0FBUyxDQUFDO0lBRXpDLE1BQU0sU0FBUyxHQUFHLGVBQWUsQ0FBQyxFQUFFLENBQUMsSUFBSSxDQUFDLEtBQUssRUFBRSxFQUFFLEVBQUUsRUFBRTtRQUNyRCxRQUFRLEdBQUcsRUFBRSxDQUFDO1FBQ2QsTUFBTSxFQUFFLE9BQU8sRUFBRSxHQUFHLE1BQU0sZUFBZSxDQUFDLE9BQU8sQ0FBQztRQUNsRCxNQUFNLGNBQWMsR0FBRyxNQUFNLGVBQWUsQ0FBQyxjQUFjLENBQUM7UUFDNUQsT0FBTyxDQUFDLG1CQUFtQixDQUN6QixjQUFjLENBQUMsMkJBQTJCLEVBQzFDLGNBQWMsQ0FBQyw2QkFBNkIsRUFBRSxDQUMvQyxDQUFDO0lBQ0osQ0FBQyxDQUFDLENBQUM7SUFFSCxJQUFJLFVBQVUsR0FBbUMsU0FBUyxDQUFDO0lBQzNELFNBQVMsQ0FBQyxHQUFHLEVBQUUsQ0FBQyxDQUFDLFVBQVUsR0FBRyxTQUFTLENBQUMsQ0FBQyxDQUFDO0lBQ3pDLE1BQW1CLENBQUMsU0FBUyxHQUFHLENBQUMsSUFBSSxFQUFFLEVBQUUsQ0FBQyxDQUFDLFVBQVUsR0FBRyxJQUFJLENBQUMsQ0FBQztJQUUvRCxPQUFPO1FBQ0wsTUFBTSxFQUFFLE1BQWE7S0FD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