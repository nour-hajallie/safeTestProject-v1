"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.browserMock = exports.expect = exports.retryTimes = exports.setTimeout = exports.test = exports.it = exports.describe = exports.spied = void 0;
require("setimmediate");
const blocks_1 = require("./blocks");
const state_1 = require("./state");
const is_in_node_1 = require("./is-in-node");
const teardown_1 = require("./teardown");
const configure_snapshot_1 = require("./configure-snapshot");
const expect_1 = require("./expect");
const browser_mock_1 = require("./browser-mock");
Object.defineProperty(exports, "browserMock", { enumerable: true, get: function () { return browser_mock_1.browserMock; } });
const ensure_imported_1 = require("./ensure-imported");
(0, ensure_imported_1.ensureImported)('describe', 'describe');
(0, ensure_imported_1.ensureImported)('it', 'test/it');
(0, ensure_imported_1.ensureImported)('expect', 'expect');
(0, ensure_imported_1.ensureImported)('beforeEach', 'beforeEach');
(0, ensure_imported_1.ensureImported)('beforeAll', 'beforeAll');
(0, ensure_imported_1.ensureImported)('afterEach', 'afterEach');
(0, ensure_imported_1.ensureImported)('afterAll', 'afterAll');
const setTimeout = (timeout) => {
    if (is_in_node_1.isInNode) {
        jest.setTimeout(timeout);
    }
};
exports.setTimeout = setTimeout;
const globalSetup = () => {
    state_1.state.isGlobalSetupTeardownRegistered = true;
    jest.useRealTimers();
    afterEach(teardown_1.afterEachFn);
    afterAll(teardown_1.afterAllFn);
    (0, configure_snapshot_1.configureSnapshot)(expect);
};
const makeDescribe = (actualThing) => (name, fn, ...extraArgs) => {
    return (0, blocks_1.createBlockFn)(name, fn, extraArgs, (...args) => {
        if (is_in_node_1.isInNode && !state_1.state.isGlobalSetupTeardownRegistered) {
            globalSetup();
        }
        return actualThing(...args);
    }, true);
};
// eslint-disable-next-line @typescript-eslint/ban-types
const makeIt = (actualThing) => (name, fn, ...extraArgs) => {
    return (0, blocks_1.createBlockFn)(name, fn, extraArgs, (...args) => {
        if (is_in_node_1.isInNode && !state_1.state.isGlobalSetupTeardownRegistered) {
            globalSetup();
        }
        const debugTests = state_1.state.options.debugTests;
        const current = state_1.state.activeTest;
        if (debugTests && !debugTests.includes(current)) {
            it.skip(name, () => { });
        }
        else {
            return actualThing(...args);
        }
    }, false);
};
const todo = (name) => (0, blocks_1.createBlockFn)(name, undefined, [], it.todo, false);
const eachNotSupported = () => {
    throw new Error("`.each(...)` tests can't be run in the browser");
};
const exportedDescribe = makeDescribe(describe);
exports.describe = exportedDescribe;
exportedDescribe.each = eachNotSupported;
exportedDescribe.only = makeDescribe(describe.only);
exportedDescribe.only.each = eachNotSupported;
exportedDescribe.skip = makeDescribe(describe.skip);
exportedDescribe.skip.each = eachNotSupported;
const exportedIt = makeIt(it);
exports.it = exportedIt;
exports.test = exportedIt;
exportedIt.concurrent = makeIt(it.concurrent);
exportedIt.concurrent.each = eachNotSupported;
exportedIt.concurrent.only = makeIt(it.concurrent?.only);
exportedIt.concurrent.only.each = eachNotSupported;
exportedIt.concurrent.skip = makeIt(it.concurrent?.skip);
exportedIt.concurrent.skip.each = eachNotSupported;
exportedIt.each = eachNotSupported;
exportedIt.only = makeIt(it.only);
exportedIt.only.each = eachNotSupported;
exportedIt.skip = makeIt(it.skip);
exportedIt.skip.each = eachNotSupported;
exportedIt.todo = todo;
exportedIt.debug = ((...args) => {
    const testKey = exportedIt.only(...args);
    state_1.state.debugging.add(testKey);
});
const retryTimes = (numRetries) => {
    if (is_in_node_1.isInNode) {
        return jest.retryTimes(numRetries);
    }
    return undefined;
};
exports.retryTimes = retryTimes;
const exportedExpect = (0, expect_1.makeExpect)(expect);
exports.expect = exportedExpect;
const spied = (fn) => fn;
exports.spied = spied;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiamVzdC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9qZXN0LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7OztBQUFBLHdCQUFzQjtBQUV0QixxQ0FBeUM7QUFDekMsbUNBQWdDO0FBQ2hDLDZDQUF3QztBQUN4Qyx5Q0FBcUQ7QUFFckQsNkRBQXlEO0FBQ3pELHFDQUFzQztBQUV0QyxpREFBNkM7QUE2STNDLDRGQTdJTywwQkFBVyxPQTZJUDtBQTVJYix1REFBbUQ7QUFJbkQsSUFBQSxnQ0FBYyxFQUFDLFVBQVUsRUFBRSxVQUFVLENBQUMsQ0FBQztBQUN2QyxJQUFBLGdDQUFjLEVBQUMsSUFBSSxFQUFFLFNBQVMsQ0FBQyxDQUFDO0FBQ2hDLElBQUEsZ0NBQWMsRUFBQyxRQUFRLEVBQUUsUUFBUSxDQUFDLENBQUM7QUFDbkMsSUFBQSxnQ0FBYyxFQUFDLFlBQVksRUFBRSxZQUFZLENBQUMsQ0FBQztBQUMzQyxJQUFBLGdDQUFjLEVBQUMsV0FBVyxFQUFFLFdBQVcsQ0FBQyxDQUFDO0FBQ3pDLElBQUEsZ0NBQWMsRUFBQyxXQUFXLEVBQUUsV0FBVyxDQUFDLENBQUM7QUFDekMsSUFBQSxnQ0FBYyxFQUFDLFVBQVUsRUFBRSxVQUFVLENBQUMsQ0FBQztBQUV2QyxNQUFNLFVBQVUsR0FBRyxDQUFDLE9BQWUsRUFBRSxFQUFFO0lBQ3JDLElBQUkscUJBQVEsRUFBRTtRQUNaLElBQUksQ0FBQyxVQUFVLENBQUMsT0FBTyxDQUFDLENBQUM7S0FDMUI7QUFDSCxDQUFDLENBQUM7QUF5SEEsZ0NBQVU7QUF2SFosTUFBTSxXQUFXLEdBQUcsR0FBRyxFQUFFO0lBQ3ZCLGFBQUssQ0FBQywrQkFBK0IsR0FBRyxJQUFJLENBQUM7SUFDN0MsSUFBSSxDQUFDLGFBQWEsRUFBRSxDQUFDO0lBQ3JCLFNBQVMsQ0FBQyxzQkFBVyxDQUFDLENBQUM7SUFDdkIsUUFBUSxDQUFDLHFCQUFVLENBQUMsQ0FBQztJQUNyQixJQUFBLHNDQUFpQixFQUFDLE1BQU0s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