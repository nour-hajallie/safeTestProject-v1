import { state } from './state';
import { FormattedTestResults } from '@jest/test-result';
type ArtifactType = typeof state.artifacts[number]['type'];
type Group = Partial<Record<ArtifactType, string[]>>;
type Grouped = Record<string, Group>;
type TestResults = FormattedTestResults['testResults'];
type FormattedTestResult = TestResults[number];
type AssertionResult = FormattedTestResult['assertionResults'][number];
export type MergedResults = Omit<FormattedTestResults, 'testResults'> & {
    testResults: Array<Omit<FormattedTestResult, 'assertionResults'> & {
        filename: string;
        assertionResults: Array<AssertionResult & {
            artifacts?: Group;
        }>;
    }>;
};
export declare const collectArtifacts: () => Promise<void>;
export declare const mergeArtifacts: (bootstrappedAt: string, cwd: string, artifacts: Record<string, Grouped>, resultsJson: string) => void;
export {};
//# sourceMappingURL=artifacts.d.ts.map