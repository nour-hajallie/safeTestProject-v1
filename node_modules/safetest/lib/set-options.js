"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.getOptions = exports.setOptions = void 0;
const deepmerge_1 = __importDefault(require("deepmerge"));
const safe_require_1 = require("./safe-require");
const state_1 = require("./state");
/**
 * Global render options; overrides any options passed to `render()` call.
 * Pass in `undefined` to reset to default.
 */
const setOptions = (options) => {
    if (options?.hooks?.afterTest) {
        options.hooks.afterTest = options.hooks.afterTest.map((fn) => {
            fn.__isGlobal = true;
            return fn;
        });
    }
    let ciOptions = options?.ciOptions;
    const usingArtifactsDir = ciOptions?.usingArtifactsDir;
    if (state_1.state.isCi && usingArtifactsDir) {
        ciOptions = {
            failureScreenshotsDir: `${usingArtifactsDir}/failure_screenshots`,
            recordVideo: { dir: `${usingArtifactsDir}/videos` },
            recordTraces: `${usingArtifactsDir}/trace`,
            matchImageSnapshotOptions: {
                customDiffDir: `${usingArtifactsDir}/image_diffs`,
                storeReceivedOnFailure: true,
                customReceivedDir: `${usingArtifactsDir}/updated_snapshots`,
                customReceivedPostfix: '',
                failureThreshold: 0,
            },
        };
    }
    if (options && ciOptions && state_1.state.isCi) {
        options = (0, deepmerge_1.default)(options, ciOptions);
        if (ciOptions.recordVideo) {
            const afterTest = options.hooks?.afterTest;
            afterTest?.push(() => new Promise((r) => setTimeout(r, 750)));
        }
    }
    const recordTraces = options?.recordTraces;
    if (recordTraces) {
        const { cpSync, mkdirSync, existsSync } = (0, safe_require_1.safeRequire)('fs');
        const { dirname, resolve } = (0, safe_require_1.safeRequire)('path');
        // eslint-disable-next-line no-eval
        const r = eval('require');
        const playwrightDir = dirname(r.resolve('playwright-core/package.json'));
        const traceWebpack = resolve(playwrightDir, 'lib/webpack/traceViewer');
        const traceVite = resolve(playwrightDir, 'lib/vite/traceViewer');
        const traceDir = existsSync(traceWebpack) ? traceWebpack : traceVite;
        try {
            cpSync(traceDir, recordTraces, { recursive: true });
            mkdirSync(`${recordTraces}/traces`);
        }
        catch { } // This may already exist
    }
    if (options?.afterAllDone) {
        state_1.state.afterAllsDone.push(options.afterAllDone);
        delete options.afterAllDone;
    }
    state_1.state.options = !options ? {} : (0, deepmerge_1.default)(state_1.state.options ?? {}, options);
};
exports.setOptions = setOptions;
const getOptions = () => state_1.state.options;
exports.getOptions = getOptions;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2V0LW9wdGlvbnMuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi9zcmMvc2V0LW9wdGlvbnMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQUEsMERBQThCO0FBRTlCLGlEQUE2QztBQUU3QyxtQ0FBZ0M7QUFFaEM7OztHQUdHO0FBQ0ksTUFBTSxVQUFVLEdBQUcsQ0FDeEIsT0FBZ0UsRUFDaEUsRUFBRTtJQUNGLElBQUksT0FBTyxFQUFFLEtBQUssRUFBRSxTQUFTLEVBQUU7UUFDN0IsT0FBTyxDQUFDLEtBQUssQ0FBQyxTQUFTLEdBQUcsT0FBTyxDQUFDLEtBQUssQ0FBQyxTQUFTLENBQUMsR0FBRyxDQUFDLENBQUMsRUFBRSxFQUFFLEVBQUU7WUFDMUQsRUFBVSxDQUFDLFVBQVUsR0FBRyxJQUFJLENBQUM7WUFDOUIsT0FBTyxFQUFFLENBQUM7UUFDWixDQUFDLENBQUMsQ0FBQztLQUNKO0lBQ0QsSUFBSSxTQUFTLEdBQUcsT0FBTyxFQUFFLFNBQVMsQ0FBQztJQUNuQyxNQUFNLGlCQUFpQixHQUFJLFNBQWlCLEVBQUUsaUJBQWlCLENBQUM7SUFDaEUsSUFBSSxhQUFLLENBQUMsSUFBSSxJQUFJLGlCQUFpQixFQUFFO1FBQ25DLFNBQVMsR0FBRztZQUNWLHFCQUFxQixFQUFFLEdBQUcsaUJBQWlCLHNCQUFzQjtZQUNqRSxXQUFXLEVBQUUsRUFBRSxHQUFHLEVBQUUsR0FBRyxpQkFBaUIsU0FBUyxFQUFFO1lBQ25ELFlBQVksRUFBRSxHQUFHLGlCQUFpQixRQUFRO1lBQzFDLHlCQUF5QixFQUFFO2dCQUN6QixhQUFhLEVBQUUsR0FBRyxpQkFBaUIsY0FBYztnQkFDakQsc0JBQXNCLEVBQUUsSUFBSTtnQkFDNUIsaUJBQWlCLEVBQUUsR0FBRyxpQkFBaUIsb0JBQW9CO2dCQUMzRCxxQkFBcUIsRUFBRSxFQUFFO2dCQUN6QixnQkFBZ0IsRUFBRSxDQUFDO2FBQ3BCO1NBQ0YsQ0FBQztLQUNIO0lBQ0QsSUFBSSxPQUFPLElBQUksU0FBUyxJQUFJLGFBQUssQ0FBQyxJQUFJLEVBQUU7UUFDdEMsT0FBTyxHQUFHLElBQUEsbUJBQUssRUFBQyxPQUFPLEVBQUUsU0FBZ0IsQ0FBQyxDQUFDO1FBQzNDLElBQUssU0FBaUIsQ0FBQyxXQUFXLEVBQUU7WUFDbEMsTUFBTSxTQUFTLEdBQUcsT0FBTyxDQUFDLEtBQUssRUFBRSxTQUFTLENBQUM7WUFDM0MsU0FBUyxFQUFFLElBQUksQ0FBQyxHQUFHLEVBQUUsQ0FBQyxJQUFJLE9BQU8sQ0FBQyxDQUFDLENBQUMsRUFBRSxFQUFFLENBQUMsVUFBVSxDQUFDLENBQUMsRUFBRSxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUM7U0FDL0Q7S0FDRjtJQUNELE1BQU0sWUFBWSxHQUFHLE9BQU8sRUFBRSxZQUFZLENBQUM7SUFDM0MsSUFBSSxZQUFZLEVBQUU7UUFDaEIsTUFBTSxFQUFFLE1BQU0sRUFBRSxTQUFTLEVBQUUsVUFBVSxFQUFFLEdBQUcsSUFBQSwwQkFBVyxFQUFDLElBQUksQ0FBQyxDQUFDO1FBQzVELE1BQU0sRUFBRSxPQUFPLEVBQUUsT0FBTyxFQUFFLEdBQUcsSUFBQSwwQkFBVyxFQUFDLE1BQU0sQ0FBQyxDQUFDO1FBQ2pELG1DQUFtQztRQUNuQyxNQUFNLENBQUMsR0FBRyxJQUFJLENBQUMsU0FBUyxDQUFDLENBQUM7UUFDMUIsTUFBTSxhQUFhLEdBQUcsT0FBTyxDQUFDLENBQUMsQ0FBQyxPQUFPLENBQUMsOEJBQThCLENBQUMsQ0FBQyxDQUFDO1FBQ3pFLE1BQU0sWUFBWSxHQUFHLE9BQU8sQ0FBQyxhQUFhLEVBQUUseUJBQXlCLENBQUMsQ0FBQztRQUN2RSxNQUFNLFNBQVMsR0FBRyxPQUFPLENBQUMsYUFBYSxFQUFFLHNCQUFzQixDQUFDLENBQUM7UUFDakUsTUFBTSxRQUFRLEdBQUcsVUFBVSxDQUFDLFlBQVksQ0FBQyxDQUFDLENBQUMsQ0FBQyxZQUFZLENBQUMsQ0FBQyxDQUFDLFNBQVMsQ0FBQztRQUNyRSxJQUFJO1lBQ0YsTUFBTSxDQUFDLFFBQVEsRUFBRSxZQUFZLEVBQUUsRUFBRSxTQUFTLEVBQUUsSUFBSSxFQUFFLENBQUMsQ0FBQztZQUNwRCxTQUFTLENBQUMsR0FBRyxZQUFZLFNBQVMsQ0FBQyxDQUFDO1NBQ3JDO1FBQUMsTUFBTSxHQUFFLENBQUMseUJBQXlCO0tBQ3JDO0lBQ0QsSUFBSSxPQUFPLEVBQUUsWUFBWSxFQUFFO1FBQ3pCLGFBQUssQ0FBQyxhQUFhLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxZQUFZLENBQUMsQ0FBQztRQUMvQyxPQUFPLE9BQU8sQ0FBQyxZQUFZLENBQUM7S0FDN0I7SUFDRCxhQUFLLENBQUMsT0FBTyxHQUFHLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLElBQUEsbUJBQUssRUFBQyxhQUFLLENBQUMsT0FBTyxJQUFJLEVBQUUsRUFBRSxPQUFPLENBQUMsQ0FBQztBQUN0RSxDQUFDLENBQUM7QUFwRFcsUUFBQSxVQUFVLGNBb0RyQjtBQUVLLE1BQU0sVUFBVSxHQUFHLEdBQUcsRUFBRSxDQUFDLGFBQUssQ0FBQyxPQUFPLENBQUM7QUFBakMsUUFBQSxVQUFVLGNBQXVCIn0=