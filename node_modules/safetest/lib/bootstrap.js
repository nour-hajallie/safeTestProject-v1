"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.bootstrap = void 0;
const render_1 = require("./render");
const state_1 = require("./state");
const bootstrap = async (args) => {
    const mapper = (dep) => {
        const noExt = dep.replace(/\.m?[tj]sx?/, '');
        return noExt.startsWith('.') ? noExt : `./${noExt}`;
    };
    let known = [];
    let importer;
    if ('webpackContext' in args) {
        if (args.webpackContext === false)
            return args.defaultRender();
        known = [...new Set(args.webpackContext.keys().map(mapper))];
        importer = args.webpackContext;
    }
    else if ('importGlob' in args) {
        if (args.importGlob === false)
            return args.defaultRender();
        const entries = Object.entries(args.importGlob);
        const entriesMapped = entries.map(([k, v]) => [mapper(k), v]);
        const fixedImports = Object.fromEntries(entriesMapped);
        known = entriesMapped.map(([k]) => k);
        importer = (s) => fixedImports[mapper(s)]();
    }
    else if ('imports' in args) {
        const entries = Object.entries(args.imports);
        const entriesMapped = entries.map(([k, v]) => [mapper(k), v]);
        const fixedImports = Object.fromEntries(entriesMapped);
        known = entriesMapped.map(([k]) => k);
        importer = (s) => fixedImports[mapper(s)]();
    }
    else {
        if (args.import === false)
            return args.defaultRender();
        importer = args.import;
    }
    let searchParams;
    try {
        searchParams = new URLSearchParams(window.location.search);
    }
    catch (e) { }
    let testName = searchParams?.get('test_name');
    let testPath = searchParams?.get('test_path');
    if (window.location.hash.includes('safetest')) {
        if (known.length) {
            Promise.resolve().then(async () => {
                for (const k of known) {
                    state_1.state.tests = {};
                    state_1.state.seen.clear();
                    await importer(k);
                    await window.waitForSafetestReady;
                    const tests = Object.keys(state_1.state.tests);
                    console.group(`Tests for ${k} (${tests.length} total)`);
                    for (const test of tests) {
                        const url = new URL(location.href);
                        const append = url.search.includes('?') ? '&' : '?';
                        const testName = test.trim().replace(/ /g, '+');
                        url.search = `${url.search}${append}test_path=${k}&test_name=${testName}`;
                        url.hash = '';
                        console.log(url.href);
                    }
                    console.groupEnd();
                }
            });
        }
        else {
            console.log('No known tests');
        }
    }
    else if (testPath && !testName) {
        try {
            await importer(testPath);
            await window.waitForSafetestReady;
        }
        catch {
            console.log(`Test "${testPath}" not found, known tests are:`, known);
        }
        const tests = Object.keys(state_1.state.tests).map((test) => {
            const url = new URL(location.href);
            const append = url.search.includes('?') ? '&' : '?';
            url.search = `${url.search}${append}test_name=${test}`;
            url.hash = '';
            return url.href;
        });
        if (tests.length) {
            console.groupCollapsed('Known test files');
            for (const test of tests)
                console.info(test);
            console.groupEnd();
        }
    }
    let retryAttempt = 0;
    if (!testPath && !testName && window[render_1.SAFETEST_INTERFACE]) {
        ({ testPath, testName, retryAttempt } =
            (await window[render_1.SAFETEST_INTERFACE]?.('GET_INFO')) ?? {});
    }
    if (testName && testPath) {
        try {
            await importer(testPath);
            await window.waitForSafetestReady;
        }
        catch (error) {
            console.log(`file "${testPath}" could not be imported, known files are:`, known);
            throw error;
        }
        if (state_1.state.browserState)
            state_1.state.browserState.retryAttempt = retryAttempt;
        await window.waitForSafetestReady;
        if (typeof state_1.state.tests[testName] !== 'function') {
            const availableTests = Object.keys(state_1.state.tests);
            console.log(`Test "${testName}" not found, known tests are:`, availableTests);
        }
        else {
            state_1.state.tests[testName]();
        }
    }
    else {
        return args.defaultRender();
    }
};
exports.bootstrap = bootstrap;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYm9vdHN0cmFwLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vc3JjL2Jvb3RzdHJhcC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7QUFDQSxxQ0FBOEM7QUFDOUMsbUNBQWdDO0FBd0J6QixNQUFNLFNBQVMsR0FBRyxLQUFLLEVBQUUsSUFBbUIsRUFBZ0IsRUFBRTtJQUNuRSxNQUFNLE1BQU0sR0FBRyxDQUFDLEdBQVcsRUFBRSxFQUFFO1FBQzdCLE1BQU0sS0FBSyxHQUFHLEdBQUcsQ0FBQyxPQUFPLENBQUMsYUFBYSxFQUFFLEVBQUUsQ0FBQyxDQUFDO1FBQzdDLE9BQU8sS0FBSyxDQUFDLFVBQVUsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxLQUFLLEtBQUssRUFBRSxDQUFDO0lBQ3RELENBQUMsQ0FBQztJQUNGLElBQUksS0FBSyxHQUFhLEVBQUUsQ0FBQztJQUN6QixJQUFJLFFBQWdDLENBQUM7SUFDckMsSUFBSSxnQkFBZ0IsSUFBSSxJQUFJLEVBQUU7UUFDNUIsSUFBSSxJQUFJLENBQUMsY0FBYyxLQUFLLEtBQUs7WUFBRSxPQUFPLElBQUksQ0FBQyxhQUFhLEVBQUUsQ0FBQztRQUMvRCxLQUFLLEdBQUcsQ0FBQyxHQUFHLElBQUksR0FBRyxDQUFDLElBQUksQ0FBQyxjQUFjLENBQUMsSUFBSSxFQUFFLENBQUMsR0FBRyxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUM3RCxRQUFRLEdBQUcsSUFBSSxDQUFDLGNBQWMsQ0FBQztLQUNoQztTQUFNLElBQUksWUFBWSxJQUFJLElBQUksRUFBRTtRQUMvQixJQUFJLElBQUksQ0FBQyxVQUFVLEtBQUssS0FBSztZQUFFLE9BQU8sSUFBSSxDQUFDLGFBQWEsRUFBRSxDQUFDO1FBQzNELE1BQU0sT0FBTyxHQUFHLE1BQU0sQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLFVBQVUsQ0FBQyxDQUFDO1FBQ2hELE1BQU0sYUFBYSxHQUFH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