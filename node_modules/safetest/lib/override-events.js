"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.overrideEvents = void 0;
const state_1 = require("./state");
const safe_require_1 = require("./safe-require");
const console = (0, safe_require_1.safeRequire)('console');
const mid = 'paused, type `resume()` in the console to resume the test. Paused on:';
const overrideEvents = (page) => {
    const locator = page.locator('');
    const proto = Object.getPrototypeOf(locator);
    for (const evt of ['click', 'dblclick']) {
        proto[evt] = async function (options) {
            if (state_1.state.pauseAtEveryStep) {
                const optionsStr = options ? JSON.stringify(options) : '';
                const selector = JSON.stringify(this._selector);
                const test = state_1.state.activeTest;
                const msg = `'${test}' ${mid} page.locator(${selector}).${evt}(${optionsStr})`;
                console.log(msg);
                await page.evaluate(({ msg }) => console.log(msg), { msg });
                await state_1.state.pause?.();
            }
            return this.dispatchEvent(evt, null, { strict: true, ...options });
        };
        page.constructor.prototype[evt] = async function (selector, options) {
            if (state_1.state.pauseAtEveryStep) {
                const optionsStr = options ? `, ${JSON.stringify(options)}` : '';
                const selectorStr = JSON.stringify(selector);
                const test = state_1.state.activeTest;
                const msg = `'${test}' ${mid} page.${evt}(${selectorStr}${optionsStr})`;
                console.log(msg);
                await page.evaluate(({ msg }) => console.log(msg), { msg });
                await state_1.state.pause?.();
            }
            return this.dispatchEvent(selector, evt, undefined, {
                strict: true,
                ...options,
            });
        };
    }
};
exports.overrideEvents = overrideEvents;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoib3ZlcnJpZGUtZXZlbnRzLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vc3JjL292ZXJyaWRlLWV2ZW50cy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7QUFDQSxtQ0FBZ0M7QUFDaEMsaURBQTZDO0FBRTdDLE1BQU0sT0FBTyxHQUFHLElBQUEsMEJBQVcsRUFBQyxTQUFTLENBQUMsQ0FBQztBQUV2QyxNQUFNLEdBQUcsR0FDUCx1RUFBdUUsQ0FBQztBQUVuRSxNQUFNLGNBQWMsR0FBRyxDQUFDLElBQVUsRUFBRSxFQUFFO0lBQzNDLE1BQU0sT0FBTyxHQUFHLElBQUksQ0FBQyxPQUFPLENBQUMsRUFBRSxDQUFDLENBQUM7SUFDakMsTUFBTSxLQUFLLEdBQUcsTUFBTSxDQUFDLGNBQWMsQ0FBQyxPQUFPLENBQUMsQ0FBQztJQUM3QyxLQUFLLE1BQU0sR0FBRyxJQUFJLENBQUMsT0FBTyxFQUFFLFVBQVUsQ0FBVSxFQUFFO1FBQ2hELEtBQUssQ0FBQyxHQUFHLENBQUMsR0FBRyxLQUFLLFdBQVcsT0FBWTtZQUN2QyxJQUFJLGFBQUssQ0FBQyxnQkFBZ0IsRUFBRTtnQkFDMUIsTUFBTSxVQUFVLEdBQUcsT0FBTyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUM7Z0JBQzFELE1BQU0sUUFBUSxHQUFHLElBQUksQ0FBQyxTQUFTLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxDQUFDO2dCQUNoRCxNQUFNLElBQUksR0FBRyxhQUFLLENBQUMsVUFBVSxDQUFDO2dCQUM5QixNQUFNLEdBQUcsR0FBRyxJQUFJLElBQUksS0FBSyxHQUFHLGlCQUFpQixRQUFRLEtBQUssR0FBRyxJQUFJLFVBQVUsR0FBRyxDQUFDO2dCQUMvRSxPQUFPLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxDQUFDO2dCQUNqQixNQUFNLElBQUksQ0FBQyxRQUFRLENBQUMsQ0FBQyxFQUFFLEdBQUcsRUFBRSxFQUFFLEVBQUUsQ0FBQyxPQUFPLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxFQUFFLEVBQUUsR0FBRyxFQUFFLENBQUMsQ0FBQztnQkFDNUQsTUFBTSxhQUFLLENBQUMsS0FBSyxFQUFFLEVBQUUsQ0FBQzthQUN2QjtZQUNELE9BQU8sSUFBSSxDQUFDLGFBQWEsQ0FBQyxHQUFHLEVBQUUsSUFBSSxFQUFFLEVBQUUsTUFBTSxFQUFFLElBQUksRUFBRSxHQUFHLE9BQU8sRUFBRSxDQUFDLENBQUM7UUFDckUsQ0FBQyxDQUFDO1FBQ0YsSUFBSSxDQUFDLFdBQVcsQ0FBQyxTQUFTLENBQUMsR0FBRyxDQUFDLEdBQUcsS0FBSyxXQUNyQyxRQUFhLEVBQ2IsT0FBWTtZQUVaLElBQUksYUFBSyxDQUFDLGdCQUFnQixFQUFFO2dCQUMxQixNQUFNLFVBQVUsR0FBRyxPQUFPLENBQUMsQ0FBQyxDQUFDLEtBQUssSUFBSSxDQUFDLFNBQVMsQ0FBQyxPQUFPLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUM7Z0JBQ2pFLE1BQU0sV0FBVyxHQUFHLElBQUksQ0FBQyxTQUFTLENBQUMsUUFBUSxDQUFDLENBQUM7Z0JBQzdDLE1BQU0sSUFBSSxHQUFHLGFBQUssQ0FBQyxVQUFVLENBQUM7Z0JBQzlCLE1BQU0sR0FBRyxHQUFHLElBQUksSUFBSSxLQUFLLEdBQUcsU0FBUyxHQUFHLElBQUksV0FBVyxHQUFHLFVBQVUsR0FBRyxDQUFDO2dCQUN4RSxPQUFPLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxDQUFDO2dCQUNqQixNQUFNLElBQUksQ0FBQyxRQUFRLENBQUMsQ0FBQyxFQUFFLEdBQUcsRUFBRSxFQUFFLEVBQUUsQ0FBQyxPQUFPLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxFQUFFLEVBQUUsR0FBRyxFQUFFLENBQUMsQ0FBQztnQkFDNUQsTUFBTSxhQUFLLENBQUMsS0FBSyxFQUFFLEVBQUUsQ0FBQzthQUN2QjtZQUVELE9BQU8sSUFBSSxDQUFDLGFBQWEsQ0FBQyxRQUFRLEVBQUUsR0FBRyxFQUFFLFNBQVMsRUFBRTtnQkFDbEQsTUFBTSxFQUFFLElBQUk7Z0JBQ1osR0FBRyxPQUFPO2FBQ1gsQ0FBQyxDQUFDO1FBQ0wsQ0FBQyxDQUFDO0tBQ0g7QUFDSCxDQUFDLENBQUM7QUFwQ1csUUFBQSxjQUFjLGtCQW9DekIifQ==