import { RenderOptions } from './render';
import { Importer } from './bootstrap';
import type { App, Component, ComponentPublicInstance } from '@vue/runtime-core';
interface VueRenderOptions extends RenderOptions {
    /** Props passed to the Vue component to render */
    props?: Record<string, any>;
}
type CreateAppFunction<HostElement> = (rootComponent: Component, rootProps?: Record<string, unknown> | null) => App<HostElement>;
type Renderable = Component;
type RenderFn = (element: Renderable, options?: Record<string, any>) => Promise<ComponentPublicInstance>;
export declare function render(elementToRender?: Renderable | ((app: Renderable) => Renderable), options?: VueRenderOptions): Promise<import("./render").RenderReturn>;
type BootstrapElement<Element> = Parameters<CreateAppFunction<Element>>[0];
type BootstrapArgs<Element> = Importer & {
    element: BootstrapElement<Element>;
    container: Element | string;
    render: RenderFn;
    options?: VueRenderOptions;
};
export declare const bootstrap: <Element_1>(args: BootstrapArgs<Element_1>) => Promise<Component>;
export {};
//# sourceMappingURL=vue.d.ts.map