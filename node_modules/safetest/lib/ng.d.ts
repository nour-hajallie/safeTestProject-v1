import { Page } from 'playwright';
import type { TestModuleMetadata } from '@angular/core/testing';
import type TestBed from '@angular/core/testing';
import type DynamicTesting from '@angular/platform-browser-dynamic/testing';
import type { platformBrowserDynamic } from '@angular/platform-browser-dynamic';
import { RenderOptions } from './render';
import { Importer } from './bootstrap';
type Ng = typeof import('@angular/core');
declare interface Type<T> extends Function {
    new (...args: any[]): T;
}
type Renderable = ((ng: Ng) => Promise<Type<any> | string>) | string;
interface RenderReturn {
    /** The Playwright page object of the rendered component. */
    page: Page;
    /** Pause current test. */
    pause: () => Promise<void>;
}
type RenderFn = {
    (elementToRender: Renderable, options?: RenderOptions): Promise<RenderReturn>;
    configure: (metadata: TestModuleMetadata) => void;
};
interface MakeSafetestBedArguments {
    DynamicTesting: Promise<typeof DynamicTesting>;
    Ng: Promise<typeof import('@angular/core')>;
    TestBed: Promise<typeof TestBed>;
    configure?: (ng: Ng) => Promise<TestModuleMetadata>;
}
interface SafetestBed {
    render: RenderFn;
}
export declare const makeSafetestBed: (renderArgs: () => MakeSafetestBedArguments) => SafetestBed;
type BootstrapArgs = Importer & {
    Module: Type<any>;
    platformBrowserDynamic: typeof platformBrowserDynamic;
};
export declare const bootstrap: (args: BootstrapArgs) => Promise<any>;
export {};
//# sourceMappingURL=ng.d.ts.map