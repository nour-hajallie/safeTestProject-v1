"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Bootstrap = exports.bootstrap = exports.render = exports.createOverride = void 0;
const render_1 = require("./render");
const bootstrap_1 = require("./bootstrap");
const state_1 = require("./state");
const is_in_node_1 = require("./is-in-node");
const react_override_1 = require("react-override");
const react_1 = __importDefault(require("react"));
exports.createOverride = (0, react_override_1.configureCreateOverride)(false);
let renderFn;
const assertAndRender = (element) => {
    if (!renderFn) {
        throw new Error('App is not bootstrapped, did you forget to call `bootstrap({ /* ... */ })`?');
    }
    return renderFn(element);
};
async function render(elementToRender = state_1.state.browserState
    ?.renderElement.value, options = {}) {
    if (!is_in_node_1.isInNode && typeof elementToRender === 'function') {
        const rendered = elementToRender(state_1.state.browserState?.renderElement.value ?? {});
        elementToRender = rendered;
    }
    return (0, render_1.render)({ __isRenderable: true, thing: elementToRender }, options, async (e) => {
        const rendered = assertAndRender(e.thing);
        await new Promise((r) => setTimeout(r, 0));
        return rendered;
    });
}
exports.render = render;
const bootstrap = async (args) => {
    renderFn = args.render;
    state_1.state.browserState = {
        retryAttempt: 0,
        renderElement: { __type: 'renderElement', value: args.element },
    };
    return (0, bootstrap_1.bootstrap)({
        ...args,
        defaultRender: () => assertAndRender(args.element),
    });
};
exports.bootstrap = bootstrap;
const Bootstrap = (props) => {
    const initial = props.loading ?? props.children;
    const [child, setChild] = react_1.default.useState(initial);
    react_1.default.useLayoutEffect(() => {
        (0, exports.bootstrap)({
            ...props,
            element: props.children,
            render: (element) => setChild(element),
        });
    }, [props.children]);
    return child || props.children;
};
exports.Bootstrap = Bootstrap;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicmVhY3QuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi9zcmMvcmVhY3QudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQUEscUNBQWlFO0FBQ2pFLDJDQUFxRTtBQUNyRSxtQ0FBZ0M7QUFDaEMsNkNBQXdDO0FBQ3hDLG1EQUF5RDtBQUN6RCxrREFBMEI7QUFJYixRQUFBLGNBQWMsR0FBRyxJQUFBLHdDQUF1QixFQUFDLEtBQUssQ0FBQyxDQUFDO0FBRTdELElBQUksUUFBNEMsQ0FBQztBQUNqRCxNQUFNLGVBQWUsR0FBRyxDQUFDLE9BQXdCLEVBQUUsRUFBRTtJQUNuRCxJQUFJLENBQUMsUUFBUSxFQUFFO1FBQ2IsTUFBTSxJQUFJLEtBQUssQ0FDYiw2RUFBNkUsQ0FDOUUsQ0FBQztLQUNIO0lBQ0QsT0FBTyxRQUFRLENBQUMsT0FBTyxDQUFDLENBQUM7QUFDM0IsQ0FBQyxDQUFDO0FBRUssS0FBSyxVQUFVLE1BQU0sQ0FDMUIsa0JBRWtELGFBQUssQ0FBQyxZQUFZO0lBQ2xFLEVBQUUsYUFBYSxDQUFDLEtBQUssRUFDdkIsVUFBeUIsRUFBRTtJQUUzQixJQUFJLENBQUMscUJBQVEsSUFBSSxPQUFPLGVBQWUsS0FBSyxVQUFVLEVBQUU7UUFDdEQsTUFBTSxRQUFRLEdBQUcsZUFBZSxDQUM5QixhQUFLLENBQUMsWUFBWSxFQUFFLGFBQWEsQ0FBQyxLQUFLLElBQUssRUFBVSxDQUN2RCxDQUFDO1FBQ0YsZUFBZSxHQUFHLFFBQVEsQ0FBQztLQUM1QjtJQUVELE9BQU8sSUFBQSxlQUFZLEVBQ2pCLEVBQUUsY0FBYyxFQUFFLElBQUksRUFBRSxLQUFLLEVBQUUsZUFBZSxFQUFFLEVBQ2hELE9BQU8sRUFDUCxLQUFLLEVBQUUsQ0FBQyxFQUFFLEVBQUU7UUFDVixNQUFNLFFBQVEsR0FBRyxlQUFlLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxDQUFDO1FBQzFDLE1BQU0sSUFBSSxPQUFPLENBQUMsQ0FBQyxDQUFDLEVBQUUsRUFBRSxDQUFDLFVBQVUsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUMzQyxPQUFPLFFBQVEsQ0FBQztJQUNsQixDQUFDLENBQ0YsQ0FBQztBQUNKLENBQUM7QUF2QkQsd0JBdUJDO0FBT00sTUFBTSxTQUFTLEdBQUcsS0FBSyxFQUFFLElBQW1CLEVBQWlCLEVBQUU7SUFDcEUsUUFBUSxHQUFHLElBQUksQ0FBQyxNQUFNLENBQUM7SUFDdkIsYUFBSyxDQUFDLFlBQVksR0FBRztRQUNuQixZQUFZLEVBQUUsQ0FBQztRQUNmLGFBQWEsRUFBRSxFQUFFLE1BQU0sRUFBRSxlQUFlLEVBQUUsS0FBSyxFQUFFLElBQUksQ0FBQyxPQUFPLEVBQUU7S0FDaEUsQ0FBQztJQUVGLE9BQU8sSUFBQSxxQkFBZSxFQUFDO1FBQ3JCLEdBQUcsSUFBSTtRQUNQLGFBQWEsRUFBRSxHQUFHLEVBQUUsQ0FBQyxlQUFlLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQztLQUNuRCxDQUFDLENBQUM7QUFDTCxDQUFDLENBQUM7QUFYVyxRQUFBLFNBQVMsYUFXcEI7QUFFSyxNQUFNLFNBQVMsR0FPbEIsQ0FBQyxLQUFLLEVBQUUsRUFBRTtJQUNaLE1BQU0sT0FBTyxHQUFHLEtBQUssQ0FBQyxPQUFPLElBQUksS0FBSyxDQUFDLFFBQVEsQ0FBQztJQUNoRCxNQUFNLENBQUMsS0FBSyxFQUFFLFFBQVEsQ0FBQyxHQUFHLGVBQUssQ0FBQyxRQUFRLENBQWtCLE9BQU8sQ0FBQyxDQUFDO0lBQ25FLGVBQUssQ0FBQyxlQUFlLENBQUMsR0FBRyxFQUFFO1FBQ3pCLElBQUEsaUJBQVMsRUFBQztZQUNSLEdBQUcsS0FBSztZQUNSLE9BQU8sRUFBRSxLQUFLLENBQUMsUUFBUTtZQUN2QixNQUFNLEVBQUUsQ0FBQyxPQUFPLEVBQUUsRUFBRSxDQUFDLFFBQVEsQ0FBQyxPQUFPLENBQUM7U0FDdkMsQ0FBQyxDQUFDO0lBQ0wsQ0FBQyxFQUFFLENBQUMsS0FBSyxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUM7SUFFckIsT0FBTyxLQUFLLElBQUksS0FBSyxDQUFDLFFBQVEsQ0FBQztBQUNqQyxDQUFDLENBQUM7QUFuQlcsUUFBQSxTQUFTLGFBbUJwQiJ9