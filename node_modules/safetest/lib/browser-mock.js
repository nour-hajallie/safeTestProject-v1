"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.browserMock = exports.spied = void 0;
const state_1 = require("./state");
const is_in_node_1 = require("./is-in-node");
const jest_mock_1 = require("./jest-mock");
const spied = (fn) => fn;
exports.spied = spied;
const browserSpy = (spy, original) => {
    const facade = function () {
        return spy.apply(this, arguments);
    };
    const makeOverride = (once) => {
        const property = once ? 'overrideOnce' : 'override';
        const mockMethod = once ? 'mockImplementationOnce' : 'mockImplementation';
        spy[property] = (callback) => {
            spy[mockMethod]((...args) => {
                let originalCalled = false;
                let returned;
                const wrapped = (...args) => {
                    if (originalCalled) {
                        throw new Error('Original function called multiple times');
                    }
                    else {
                        originalCalled = true;
                        returned = original?.(...args);
                        return returned;
                    }
                };
                const passed = {
                    args,
                    get returned() {
                        if (originalCalled)
                            return returned;
                        return wrapped(...args);
                    },
                    original,
                };
                const returns = callback(passed);
                if (!originalCalled) {
                    wrapped(...args);
                }
                return returns;
            });
            return spy;
        };
    };
    if (original || is_in_node_1.isInNode) {
        makeOverride(false);
        makeOverride(true);
        const mockRestore = spy.mockRestore.bind(spy);
        spy.mockRestore = () => {
            mockRestore();
            if (original)
                spy.mockImplementation(original);
        };
    }
    for (const key of Object.keys(spy)) {
        if (is_in_node_1.isInNode && typeof spy[key] === 'function') {
            facade[key] = () => spy;
        }
        else {
            facade[key] = spy[key];
        }
    }
    facade.then = async (resolve) => {
        const mock = await state_1.state.bridge?.(() => spy.mock);
        if (is_in_node_1.isInNode)
            spy.mock = mock;
        return resolve(spy);
    };
    facade.__isBrowserSpy = true;
    return facade;
};
function spyOnWrapped(obj, method, accessType) {
    let spy;
    let original = undefined;
    if (is_in_node_1.isInNode) {
        spy = (0, jest_mock_1.fn)();
    }
    else {
        original = obj[method];
        spy = accessType
            ? (0, jest_mock_1.spyOn)(obj, method, accessType)
            : (0, jest_mock_1.spyOn)(obj, method);
    }
    return browserSpy(spy, original);
}
const fnWrapped = function (impl) {
    const spy = (0, jest_mock_1.fn)(impl);
    return browserSpy(spy, impl);
};
exports.browserMock = { spyOn: spyOnWrapped, fn: fnWrapped };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYnJvd3Nlci1tb2NrLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vc3JjL2Jyb3dzZXItbW9jay50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7QUFBQSxtQ0FBZ0M7QUFDaEMsNkNBQXdDO0FBRXhDLDJDQUErRDtBQXVCeEQsTUFBTSxLQUFLLEdBQUcsQ0FDbkIsRUFBSyxFQUVILEVBQUUsQ0FBQyxFQUFTLENBQUM7QUFISixRQUFBLEtBQUssU0FHRDtBQUVqQixNQUFNLFVBQVUsR0FBRyxDQUNqQixHQUF1QixFQUN2QixRQUFrQyxFQUNSLEVBQUU7SUFDNUIsTUFBTSxNQUFNLEdBQUc7UUFDYixPQUFPLEdBQUcsQ0FBQyxLQUFLLENBQUMsSUFBSSxFQUFFLFNBQVMsQ0FBQyxDQUFDO0lBQ3BDLENBQTZCLENBQUM7SUFDOUIsTUFBTSxZQUFZLEdBQUcsQ0FBQyxJQUFhLEVBQUUsRUFBRTtRQUNyQyxNQUFNLFFBQVEsR0FBRyxJQUFJLENBQUMsQ0FBQyxDQUFDLGNBQWMsQ0FBQyxDQUFDLENBQUMsVUFBVSxDQUFDO1FBQ3BELE1BQU0sVUFBVSxHQUFHLElBQUksQ0FBQyxDQUFDLENBQUMsd0JBQXdCLENBQUMsQ0FBQyxDQUFDLG9CQUFvQixDQUFDO1FBQ3pFLEdBQVcsQ0FBQyxRQUFRLENBQUMsR0FBRyxDQUFDLFFBQWtCLEVBQUUsRUFBRTtZQUM5QyxHQUFHLENBQUMsVUFBVSxDQUFDLENBQUMsQ0FBQyxHQUFHLElBQVcsRUFBRSxFQUFFO2dCQUNqQyxJQUFJLGNBQWMsR0FBRyxLQUFLLENBQUM7Z0JBQzNCLElBQUksUUFBYSxDQUFDO2dCQUNsQixNQUFNLE9BQU8sR0FBRyxDQUFDLEdBQUcsSUFBVyxFQUFFLEVBQUU7b0JBQ2pDLElBQUksY0FBYyxFQUFFO3dCQUNsQixNQUFNLElBQUksS0FBSyxDQUFDLHlDQUF5QyxDQUFDLENBQUM7cUJBQzVEO3lCQUFNO3dCQUNMLGNBQWMsR0FBRyxJQUFJLENBQUM7d0JBQ3RCLFFBQVEsR0FBRyxR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