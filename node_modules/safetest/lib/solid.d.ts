import { RenderOptions } from './render';
import { Importer } from './bootstrap';
import { type Component, type JSXElement } from 'solid-js';
import type Solid from 'solid-js';
export declare function render(elementToRender?: (app: JSXElement) => JSXElement, options?: RenderOptions): Promise<import("./render").RenderReturn>;
type BootstrapArgs = Importer & {
    element: () => JSXElement;
    render: (e: () => JSXElement) => void;
};
export declare const bootstrap: (args: BootstrapArgs) => Promise<void>;
export declare const Bootstrap: Component<{
    children: JSXElement;
    /**
     * Due to Solid singleton expectations, we need to pass the Solid namespace to Bootstrap
     *
     * ```tsx
     * import {
     *   createSignal,
     *   createMemo,
     *   createRenderEffect
     * } from 'solid-js';
     *
     * // ...
     *
     * <Bootstrap Solid={{
     *   createSignal,
     *   createMemo,
     *   createRenderEffect
     * }}
     * // ...
     * ```
     *
     * OR
     *
     * ```tsx
     * import * as Solid from 'solid-js';
     *
     * // ...
     *
     * <Bootstrap Solid={Solid} // ...
     * ```
     *
     */
    Solid: Pick<typeof Solid, 'createRenderEffect' | 'createSignal' | 'createMemo'>;
    /** Note that using this in SSR mode this will cause the page to start with the loading component before the page is ready. */
    loading?: JSXElement;
} & Importer>;
export {};
//# sourceMappingURL=solid.d.ts.map