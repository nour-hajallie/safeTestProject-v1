import React from 'react';
import { useFetching as myUseFetching, useHashState as myUseHashState, } from './hooks';
import { upperFirst } from 'lodash';
import { Accordion as MyAccordion } from './accordion';
import { Chip as MyChip } from './chip';
import { Expandable as MyExpandable } from './expandable';
import { File as MyFile } from './file';
import { Label as MyLabel } from './label';
import { Radio as MyRadio } from './radio';
import { Suite as MySuite } from './suite';
import { Tabs as MyTabs } from './tabs';
import { Test as MyTest } from './test';
export const FilenameContext = React.createContext(null);
export const UrlContext = React.createContext(null);
export const StateContext = React.createContext({});
const statusMap = {
    passed: false,
    failed: false,
    pending: false,
    skipped: false,
    disabled: false,
    todo: false,
};
const statuses = Object.keys(statusMap);
export const ComponentsContext = React.createContext({});
export const Report = ({ useFetching = myUseFetching, useState = myUseHashState, Accordion = MyAccordion, Chip = MyChip, Expandable = MyExpandable, File = MyFile, Label = MyLabel, Radio = MyRadio, Suite = MySuite, Tabs = MyTabs, Test = MyTest, } = {}) => {
    const [resultsLocation, setResultsLocation] = useState('results', '');
    const [url] = useState('url', '/');
    const [showing, setShowing] = useState('status', 'all');
    const results = useFetching(resultsLocation, {
        enabled: !!resultsLocation,
    });
    const statusCounts = React.useMemo(() => {
        const counts = { all: 0 };
        for (const file of results.data?.testResults ?? []) {
            for (const test of file.assertionResults) {
                counts[test.status] = (counts[test.status] ?? 0) + 1;
                counts.all++;
            }
        }
        return counts;
    }, [results.data?.testResults]);
    if (!resultsLocation)
        return (React.createElement(React.Fragment, null,
            React.createElement("h1", null, "Test Report"),
            React.createElement("p", null, "No results URL provided."),
            React.createElement("input", { type: "text", placeholder: "Results URL", onKeyUp: (e) => {
                    if (e.key === 'Enter') {
                        setResultsLocation(e.target.value);
                    }
                } })));
    const statusFilters = ['all', ...statuses];
    return (React.createElement(ComponentsContext.Provider, { value: {
            Accordion,
            Chip,
            Expandable,
            File,
            Label,
            Radio,
            Suite,
            Tabs,
            Test,
        } },
        React.createElement("h1", null, "Test Report"),
        results.loading && React.createElement("p", null, "Loading..."),
        results.data && (React.createElement("div", { style: {
                marginBottom: 16,
                padding: 8,
                border: '1px solid #bbb',
            } },
            "Showing:",
            React.createElement("div", { style: { display: 'inline-block', paddingLeft: 8 } },
                React.createElement(Radio, { options: statusFilters.map((s) => {
                        const label = upperFirst(s);
                        return `${label} (${statusCounts[s] ?? 0})`;
                    }), defaultIndex: statusFilters.indexOf(showing), onChange: (e) => {
                        setShowing(statusFilters[e ?? 0]);
                    } })))),
        results.data?.testResults.map((file) => (React.createElement(FilenameContext.Provider, { key: file.filename, value: file.filename },
            React.createElement(UrlContext.Provider, { value: url },
                React.createElement(StateContext.Provider, { value: { viewing: showing } },
                    React.createElement(File, { file: file }))))))));
};
