"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.getViewUrl = exports.waitForLatestConnection = exports.waitForInitialConnection = exports.startServer = exports.openLocalBrowser = exports.notify = void 0;
const http_1 = __importDefault(require("http"));
const lodash_1 = require("lodash");
const playwright_1 = __importDefault(require("playwright"));
const WS = __importStar(require("ws"));
const inspector_1 = __importDefault(require("inspector"));
const console_1 = __importDefault(require("console"));
const node_fetch_1 = __importDefault(require("node-fetch"));
const override_events_1 = require("./override-events");
const state_1 = require("./state");
const set_options_1 = require("./set-options");
const defer_1 = require("./defer");
const myIp = process.env['MY_IP'];
const makeWarning = (msg) => {
    let warnOnce = false;
    return (console) => {
        if (warnOnce)
            return;
        warnOnce = true;
        console.warn(msg);
    };
};
const warn = makeWarning('Remote viewing session detected, monkey patching page actions to allow screen casting without breaking playwright events.');
const wss = new WS.Server({ noServer: true });
const getAllSockets = () => {
    const webSockets = [];
    wss.clients.forEach(function each(webSocket) {
        if (webSocket.readyState === WS.OPEN) {
            webSockets.push(webSocket);
        }
    });
    return webSockets;
};
let lastTest = '';
const defers = new Map();
defers.set('INITIAL', (0, defer_1.deferred)());
let latestDefer = defers.get('INITIAL');
let viewUrl = '';
const debugInfo = async () => {
    const inspectorUrl = inspector_1.default.url();
    if (!inspectorUrl)
        return;
    const port = new URL(inspectorUrl).port;
    const listUrl = `http://127.0.0.1:${port}/json/list`;
    const response = await (0, node_fetch_1.default)(listUrl);
    const list = await response.json();
    const rawUrl = list[0].devtoolsFrontendUrl;
    if (!rawUrl)
        return {};
    const url = new URL(rawUrl);
    const ws = url.searchParams.get('ws')?.split(':');
    if (!ws)
        return {};
    const fixedWs = [myIp || ws[0], ws[1]].join(':');
    url.searchParams.set('ws', fixedWs);
    return { nodeDebugUrl: `${url}` };
};
const notify = async (tabId, url) => {
    const payload = JSON.stringify({ tabId, url, ...(await debugInfo()) });
    if (tabId === 0)
        lastTest = url;
    const key = `${tabId}:${url}`;
    latestDefer = (0, defer_1.deferred)();
    defers.set(key, latestDefer);
    for (const webSocket of getAllSockets())
        webSocket.send(payload);
    return latestDefer.promise;
};
exports.notify = notify;
const openLocalBrowser = async (url) => {
    const localBrowser = await playwright_1.default.chromium?.launch({
        headless: false,
    });
    const debugUrl = new URL(url);
    if (debugUrl.hostname === 'localhost')
        debugUrl.hostname = '127.0.0.1';
    debugUrl.port = `${state_1.state.debugPort}`;
    const context = await localBrowser.newContext({
        storageState: {
            cookies: [],
            origins: [
                {
                    origin: `${debugUrl}`,
                    localStorage: [{ name: 'panel-selectedTab', value: '"console"' }],
                },
            ],
        },
    });
    const page = await context.newPage();
    await page.goto(`${url}?tab=0`);
    (0, set_options_1.setOptions)({ afterAllDone: () => localBrowser.close() });
};
exports.openLocalBrowser = openLocalBrowser;
exports.startServer = (0, lodash_1.once)(async (parsed) => {
    const indexHTML = `
    <style>
      html, body { height: 100%; width: 100%; padding: 0; margin: 0; }
      body { display: flex; flex-direction: column; }
      iframe { flex-grow: 1; padding: 0; margin: 0; border: 0 }
    </style>
    <div style="font-family: monospace; background: #ddd" id=nodeDebugUrl></div>
    <iframe id=iframe></iframe>
    <script>
      let webSocket;
      const tabId = +new URL(location).searchParams.get('tab');
      const connect = () => {
        webSocket = new WebSocket('ws://' + window.location.hostname + ':8844/');
        webSocket.addEventListener('open', () => {
          console.log('connected');
        });
        webSocket.addEventListener('message', (event) => {
          const data = JSON.parse(event.data);
          console.log('Message from server ', data);
          if (data.nodeDebugUrl) {
            nodeDebugUrl.style.padding = '10px';
            nodeDebugUrl.innerHTML = \`Node Devtools UI: <span style="user-select: all;background: #aaa;padding: 5px;">\${data.nodeDebugUrl}</span>\`;
          }
          if (data.tabId === tabId) {
            iframe.src = data.url;
            const key = [data.tabId, data.url].join(':');
            webSocket.send(JSON.stringify({ received: key }));
          }
        });
        webSocket.addEventListener('close', (event) => {
          console.log('Socket is closed. Reconnect will be attempted in 1 second.', event.reason);
          setTimeout(connect);
        });
      };
      connect();
    </script>
  `;
    await new Promise(async (resolve) => {
        const server = http_1.default.createServer((_req, response) => {
            warn(console_1.default);
            state_1.state.options.enableScreenCasting = true;
            for (const page of state_1.state.browserContextInstance?.pages() ?? []) {
                (0, override_events_1.overrideEvents)(page);
            }
            response.writeHead(200, { 'Content-Type': 'text/html' });
            response.end(indexHTML);
        });
        server.once('error', () => {
            console_1.default.warn('Failed to start server, you need to connect directly to the debug port to remote view.');
            resolve(server);
        });
        const host = !!parsed['ci'] ? '0.0.0.0' : '127.0.0.1';
        server.listen(8844, host, () => resolve(server));
        const sockets = [];
        server.on('connection', (socket) => sockets.push(socket));
        server.on('upgrade', function upgrade(request, socket, head) {
            wss.handleUpgrade(request, socket, head, async (ws) => {
                state_1.state.options.enableScreenCasting = true;
                for (const page of state_1.state.browserContextInstance?.pages() ?? []) {
                    (0, override_events_1.overrideEvents)(page);
                }
                warn(console_1.default);
                if (lastTest) {
                    const url = lastTest;
                    const payload = JSON.stringify({
                        tabId: 0,
                        url,
                        ...(await debugInfo()),
                    });
                    ws.send(payload);
                }
                defers.get('INITIAL')?.resolve();
                ws.addEventListener('message', (event) => {
                    const data = JSON.parse(`${event.data}`);
                    defers.get(data.received)?.resolve();
                    defers.delete(data.received);
                });
            });
        });
        (0, set_options_1.setOptions)({
            afterAllDone: async () => {
                for (const s of sockets)
                    s.destroy();
                for (const ws of getAllSockets())
                    ws.close();
                wss.close();
                server?.close?.();
            },
        });
    });
    viewUrl = `http://${myIp || '127.0.0.1'}:8844/`;
});
const waitForInitialConnection = () => defers.get('INITIAL')?.promise;
exports.waitForInitialConnection = waitForInitialConnection;
const waitForLatestConnection = () => latestDefer?.promise;
exports.waitForLatestConnection = waitForLatestConnection;
const getViewUrl = () => viewUrl;
exports.getViewUrl = getViewUrl;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicmVkaXJlY3Qtc2VydmVyLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vc3JjL3JlZGlyZWN0LXNlcnZlci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQUFBLGdEQUF3QjtBQUN4QixtQ0FBOEI7QUFDOUIsNERBQW9DO0FBQ3BDLHVDQUF5QjtBQUN6QiwwREFBa0M7QUFDbEMsc0RBQThCO0FBQzlCLDREQUErQjtBQUUvQix1REFBbUQ7QUFDbkQsbUNBQWdDO0FBQ2hDLCtDQUEyQztBQUMzQyxtQ0FBNkM7QUFHN0MsTUFBTSxJQUFJLEdBQUcsT0FBTyxDQUFDLEdBQUcsQ0FBQyxPQUFPLENBQUMsQ0FBQztBQUVsQyxNQUFNLFdBQVcsR0FBRyxDQUFDLEdBQVcsRUFBRSxFQUFFO0lBQ2xDLElBQUksUUFBUSxHQUFHLEtBQUssQ0FBQztJQUNyQixPQUFPLENBQUMsT0FBZ0IsRUFBRSxFQUFFO1FBQzFCLElBQUksUUFBUTtZQUFFLE9BQU87UUFDckIsUUFBUSxHQUFHLElBQUksQ0FBQztRQUNoQixPQUFPLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDO0lBQ3BCLENBQUMsQ0FBQztBQUNKLENBQUMsQ0FBQztBQUVGLE1BQU0sSUFBSSxHQUFHLFdBQVcsQ0FDdEIsMkhBQTJILENBQzVILENBQUM7QUFFRixNQUFNLEdBQUcsR0FBRyxJQUFJLEVBQUUsQ0FBQyxNQUFNLENBQUMsRUFBRSxRQUFRLEVBQUUsSUFBSSxFQUFFLENBQUMsQ0FBQztBQUM5QyxNQUFNLGFBQWEsR0FBRyxHQUFHLEVBQUU7SUFDekIsTUFBTSxVQUFVLEdBQW1CLEVBQUUsQ0FBQztJQUN0QyxHQUFHLENBQUMsT0FBTyxDQUFDLE9BQU8sQ0FBQyxTQUFTLElBQUksQ0FBQyxTQUFTO1FBQ3pDLElBQUksU0FBUyxDQUFDLFVBQVUsS0FBSyxFQUFFLENBQUMsSUFBSSxFQUFFO1lBQ3BDLFVBQVUsQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDLENBQUM7U0FDNUI7SUFDSCxDQUFDLENBQUMsQ0FBQztJQUNILE9BQU8sVUFBVSxDQUFDO0FBQ3BCLENBQUMsQ0FBQztBQUNGLElBQUksUUFBUSxHQUFHLEVBQUUsQ0FBQztBQUVsQixNQUFNLE1BQU0sR0FBRyxJQUFJLEdBQUcsRUFBb0IsQ0FBQztBQUMzQyxNQUFNLENBQUMsR0FBRyxDQUFDLFNBQVMsRUFBRSxJQUFBLGdCQUFRLEdBQUUsQ0FBQyxDQUFDO0FBRWxDLElBQUksV0FBVyxHQUFHLE1BQU0sQ0FBQyxHQUFHLENBQUMsU0FBUyxDQUFFLENBQUM7QUFDekMsSUFBSSxPQUFPLEdBQUcsRUFBRSxDQUFDO0FBRWpCLE1BQU0sU0FBUyxHQUFHLEtBQUssSUFBSSxFQUFFO0lBQzNCLE1BQU0sWUFBWSxHQUFHLG1CQUFTLENBQUMsR0FBRyxFQUFFLENBQUM7SUFDckMsSUFBSSxDQUFDLFlBQVk7UUFBRSxPQUFPO0lBQzFCLE1BQU0sSUFBSSxHQUFHLElBQUksR0FBRyxDQUFDLFlBQVksQ0FBQyxDQUFDLElBQUksQ0FBQztJQUN4QyxNQUFNLE9BQU8sR0FBRyxvQkFBb0IsSUFBSSxZQUFZLENBQUM7SUFDckQsTUFBTSxRQUFRLEdBQUcsTUFBTSxJQUFBLG9CQUFLLEVBQUMsT0FBTyxDQUFDLENBQUM7SUFDdEMsTUFBTSxJQUFJLEdBQUcsTUFBTSxRQUFRLENBQUMsSUFBSSxFQUFFLENBQUM7SUFDbkMsTUFBTSxNQUFNLEdBQUcsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLG1CQUFtQixDQUFDO0lBQzNDLElBQUksQ0FBQyxNQUFNO1FBQUUsT0FBTyxFQUFFLENBQUM7SUFDdkIsTUFBTSxHQUFHLEdBQUcsSUFBSSxHQUFHLENBQUMsTUFBTSxDQUFDLENBQUM7SUFDNUIsTUFBTSxFQUFFLEdBQUcsR0FBRyxDQUFDLFlBQVksQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLEVBQUUsS0FBSyxDQUFDLEdBQUcsQ0FBQyxDQUFDO0lBQ2xELElBQUksQ0FBQyxFQUFFO1FBQUUsT0FBTyxFQUFFLENBQUM7SUFDbkIsTUFBTSxPQUFPLEdBQUcsQ0FBQyxJQUFJLElBQUksRUFBRSxDQUFDLENBQUMsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQztJQUNqRCxHQUFHLENBQUMsWUFBWSxDQUFDLEdBQUcsQ0FBQyxJQUFJLEVBQUUsT0FBTyxDQUFDLENBQUM7SUFFcEMsT0FBTyxFQUFFLFlBQVksRUFBRSxHQUFHLEdBQUcsRUFBRSxFQUFFLENBQUM7QUFDcEMsQ0FBQyxDQUFDO0FBRUssTUFBTSxNQUFNLEdBQUcsS0FBSyxFQUFFLEtBQWEsRUFBRSxHQUFXLEVBQUUsRUFBRTtJQUN6RCxNQUFNLE9BQU8sR0FBRyxJQUFJLENBQUMsU0FBUyxDQUFDLEVBQUUsS0FBSyxFQUFFLEdBQUcsRUFBRSxHQUFHLENBQUMsTUFBTSxTQUFTLEVBQUUsQ0FBQyxFQUFFLENBQUMsQ0FBQztJQUN2RSxJQUFJLEtBQUssS0FBSyxDQUFDO1FBQUUsUUFBUSxHQUFHLEdBQUcsQ0FBQztJQUNoQyxNQUFNLEdBQUcsR0FBRyxHQUFHLEtBQUssSUFBSSxHQUFHLEVBQUUsQ0FBQztJQUM5QixXQUFXLEdBQUcsSUFBQSxnQkFBUSxHQUFFLENBQUM7SUFDekIsTUFBTSxDQUFDLEdBQUcsQ0FBQyxHQUFHLEVBQUUsV0FBVyxDQUFDLENBQUM7SUFDN0IsS0FBSyxNQUFNLFNBQVMsSUFBSSxhQUFhLEVBQUU7UUFBRSxTQUFTLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxDQUFDO0lBQ2pFLE9BQU8sV0FBVyxDQUFDLE9BQU8sQ0FBQztBQUM3QixDQUFDLENBQUM7QUFSVyxRQUFBLE1BQU0sVUFRakI7QUFFSyxNQUFNLGdCQUFnQixHQUFHLEtBQUssRUFBRSxHQUFXLEVBQUUsRUFBRTtJQUNwRCxNQUFNLFlBQVksR0FBRyxNQUFNLG9CQUFVLENBQUMsUUFBUSxFQUFFLE1BQU0sQ0FBQztRQUNyRCxRQUFRLEVBQUUsS0FBSztLQUNoQixDQUFDLENBQUM7SUFDSCxNQUFNLFFBQVEsR0FBRyxJQUFJLEdBQUcsQ0FBQyxHQUFHLENBQUMsQ0FBQztJQUM5QixJQUFJLFFBQVEsQ0FBQyxRQUFRLEtBQUssV0FBVztRQUFFLFFBQVEsQ0FBQyxRQUFRLEdBQUcsV0FBVyxDQUFDO0lBQ3ZFLFFBQVEsQ0FBQyxJQUFJLEdBQUcsR0FBRyxhQUFLLENBQUMsU0FBUyxFQUFFLENBQUM7SUFDckMsTUFBTSxPQUFPLEdBQUcsTUFBTSxZQUFZLENBQUMsVUFBVSxDQUFDO1FBQzVDLFlBQVksRUFBRTtZQUNaLE9BQU8sRUFBRSxFQUFFO1lBQ1gsT0FBTyxFQUFFO2dCQUNQO29CQUNFLE1BQU0sRUFBRSxHQUFHLFFBQVEsRUFBRTtvQkFDckIsWUFBWSxFQUFFLENBQUMsRUFBRSxJQUFJLEVBQUUsbUJBQW1CLEVBQUUsS0FBSyxFQUFFLFdBQVcsRUFBRSxDQUFDO2lCQUNsRTthQUNGO1NBQ0Y7S0FDRixDQUFDLENBQUM7SUFDSCxNQUFNLElBQUksR0FBRyxNQUFNLE9BQU8sQ0FBQyxPQUFPLEVBQUUsQ0FBQztJQUNyQyxNQUFNLElBQUksQ0FBQyxJQUFJLENBQUMsR0FBRyxHQUFHLFFBQVEsQ0FBQyxDQUFDO0lBRWhDLElBQUEsd0JBQVUsRUFBQyxFQUFFLFlBQVksRUFBRSxHQUFHLEVBQUUsQ0FBQyxZQUFZLENBQUMsS0FBSyxFQUFFLEVBQUUsQ0FBQyxDQUFDO0FBQzNELENBQUMsQ0FBQztBQXRCVyxRQUFBLGdCQUFnQixvQkFzQjNCO0FBRVcsUUFBQSxXQUFXLEdBQUcsSUFBQSxhQUFJLEVBQUMsS0FBSyxFQUFFLE1BQVcsRUFBRSxFQUFFO0lBQ3BELE1BQU0sU0FBUyxHQUFHOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7R0FvQ2pCLENBQUM7SUFDRixNQUFNLElBQUksT0FBTyxDQUFjLEtBQUssRUFBRSxPQUFPLEVBQUUsRUFBRTtRQUMvQyxNQUFNLE1BQU0sR0FBRyxjQUFJLENBQUMsWUFBWSxDQUFDLENBQUMsSUFBSSxFQUFFLFFBQVEsRUFBRSxFQUFFO1lBQ2xELElBQUksQ0FBQyxpQkFBTyxDQUFDLENBQUM7WUFDZCxhQUFLLENBQUMsT0FBTyxDQUFDLG1CQUFtQixHQUFHLElBQUksQ0FBQztZQUN6QyxLQUFLLE1BQU0sSUFBSSxJQUFJLGFBQUssQ0FBQyxzQkFBc0IsRUFBRSxLQUFLLEVBQUUsSUFBSSxFQUFFLEVBQUU7Z0JBQzlELElBQUEsZ0NBQWMsRUFBQyxJQUFJLENBQUMsQ0FBQzthQUN0QjtZQUNELFFBQVEsQ0FBQyxTQUFTLENBQUMsR0FBRyxFQUFFLEVBQUUsY0FBYyxFQUFFLFdBQVcsRUFBRSxDQUFDLENBQUM7WUFDekQsUUFBUSxDQUFDLEdBQUcsQ0FBQyxTQUFTLENBQUMsQ0FBQztRQUMxQixDQUFDLENBQUMsQ0FBQztRQUVILE1BQU0sQ0FBQyxJQUFJLENBQUMsT0FBTyxFQUFFLEdBQUcsRUFBRTtZQUN4QixpQkFBTyxDQUFDLElBQUksQ0FDVix3RkFBd0YsQ0FDekYsQ0FBQztZQUNGLE9BQU8sQ0FBQyxNQUFNLENBQUMsQ0FBQztRQUNsQixDQUFDLENBQUMsQ0FBQztRQUNILE1BQU0sSUFBSSxHQUFHLENBQUMsQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUMsV0FBVyxDQUFDO1FBQ3RELE1BQU0sQ0FBQyxNQUFNLENBQUMsSUFBSSxFQUFFLElBQUksRUFBRSxHQUFHLEVBQUUsQ0FBQyxPQUFPLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQztRQUNqRCxNQUFNLE9BQU8sR0FBVSxFQUFFLENBQUM7UUFDMUIsTUFBTSxDQUFDLEVBQUUsQ0FBQyxZQUFZLEVBQUUsQ0FBQyxNQUFNLEVBQUUsRUFBRSxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQztRQUMxRCxNQUFNLENBQUMsRUFBRSxDQUFDLFNBQVMsRUFBRSxTQUFTLE9BQU8sQ0FBQyxPQUFPLEVBQUUsTUFBTSxFQUFFLElBQUk7WUFDekQsR0FBRyxDQUFDLGFBQWEsQ0FBQyxPQUFPLEVBQUUsTUFBTSxFQUFFLElBQUksRUFBRSxLQUFLLEVBQUUsRUFBRSxFQUFFLEVBQUU7Z0JBQ3BELGFBQUssQ0FBQyxPQUFPLENBQUMsbUJBQW1CLEdBQUcsSUFBSSxDQUFDO2dCQUN6QyxLQUFLLE1BQU0sSUFBSSxJQUFJLGFBQUssQ0FBQyxzQkFBc0IsRUFBRSxLQUFLLEVBQUUsSUFBSSxFQUFFLEVBQUU7b0JBQzlELElBQUEsZ0NBQWMsRUFBQyxJQUFJLENBQUMsQ0FBQztpQkFDdEI7Z0JBQ0QsSUFBSSxDQUFDLGlCQUFPLENBQUMsQ0FBQztnQkFDZCxJQUFJLFFBQVEsRUFBRTtvQkFDWixNQUFNLEdBQUcsR0FBRyxRQUFRLENBQUM7b0JBQ3JCLE1BQU0sT0FBTyxHQUFHLElBQUksQ0FBQyxTQUFTLENBQUM7d0JBQzdCLEtBQUssRUFBRSxDQUFDO3dCQUNSLEdBQUc7d0JBQ0gsR0FBRyxDQUFDLE1BQU0sU0FBUyxFQUFFLENBQUM7cUJBQ3ZCLENBQUMsQ0FBQztvQkFDSCxFQUFFLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxDQUFDO2lCQUNsQjtnQkFDRCxNQUFNLENBQUMsR0FBRyxDQUFDLFNBQVMsQ0FBQyxFQUFFLE9BQU8sRUFBRSxDQUFDO2dCQUNqQyxFQUFFLENBQUMsZ0JBQWdCLENBQUMsU0FBUyxFQUFFLENBQUMsS0FBSyxFQUFFLEVBQUU7b0JBQ3ZDLE1BQU0sSUFBSSxHQUFHLElBQUksQ0FBQyxLQUFLLENBQUMsR0FBRyxLQUFLLENBQUMsSUFBSSxFQUFFLENBQUMsQ0FBQztvQkFDekMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLEVBQUUsT0FBTyxFQUFFLENBQUM7b0JBQ3JDLE1BQU0sQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxDQUFDO2dCQUMvQixDQUFDLENBQUMsQ0FBQztZQUNMLENBQUMsQ0FBQyxDQUFDO1FBQ0wsQ0FBQyxDQUFDLENBQUM7UUFFSCxJQUFBLHdCQUFVLEVBQUM7WUFDVCxZQUFZLEVBQUUsS0FBSyxJQUFJLEVBQUU7Z0JBQ3ZCLEtBQUssTUFBTSxDQUFDLElBQUksT0FBTztvQkFBRSxDQUFDLENBQUMsT0FBTyxFQUFFLENBQUM7Z0JBQ3JDLEtBQUssTUFBTSxFQUFFLElBQUksYUFBYSxFQUFFO29CQUFFLEVBQUUsQ0FBQyxLQUFLLEVBQUUsQ0FBQztnQkFDN0MsR0FBRyxDQUFDLEtBQUssRUFBRSxDQUFDO2dCQUNaLE1BQU0sRUFBRSxLQUFLLEVBQUUsRUFBRSxDQUFDO1lBQ3BCLENBQUM7U0FDRixDQUFDLENBQUM7SUFDTCxDQUFDLENBQUMsQ0FBQztJQUVILE9BQU8sR0FBRyxVQUFVLElBQUksSUFBSSxXQUFXLFFBQVEsQ0FBQztBQUNsRCxDQUFDLENBQUMsQ0FBQztBQUVJLE1BQU0sd0JBQXdCLEdBQUcsR0FBRyxFQUFFLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxTQUFTLENBQUMsRUFBRSxPQUFPLENBQUM7QUFBaEUsUUFBQSx3QkFBd0IsNEJBQXdDO0FBQ3RFLE1BQU0sdUJBQXVCLEdBQUcsR0FBRyxFQUFFLENBQUMsV0FBVyxFQUFFLE9BQU8sQ0FBQztBQUFyRCxRQUFBLHVCQUF1QiwyQkFBOEI7QUFDM0QsTUFBTSxVQUFVLEdBQUcsR0FBRyxFQUFFLENBQUMsT0FBTyxDQUFDO0FBQTNCLFFBQUEsVUFBVSxjQUFpQiJ9