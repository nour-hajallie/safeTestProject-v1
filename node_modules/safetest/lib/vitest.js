"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.browserMock = exports.expect = exports.test = exports.it = exports.describe = void 0;
const blocks_1 = require("./blocks");
const configure_snapshot_1 = require("./configure-snapshot");
const is_in_node_1 = require("./is-in-node");
const state_1 = require("./state");
const teardown_1 = require("./teardown");
const browser_mock_1 = require("./browser-mock");
Object.defineProperty(exports, "browserMock", { enumerable: true, get: function () { return browser_mock_1.browserMock; } });
const expect_1 = require("./expect");
const ensure_imported_1 = require("./ensure-imported");
(0, ensure_imported_1.ensureImported)('describe', 'describe');
(0, ensure_imported_1.ensureImported)('it', 'test/it');
(0, ensure_imported_1.ensureImported)('expect', 'expect');
(0, ensure_imported_1.ensureImported)('beforeEach', 'beforeEach');
(0, ensure_imported_1.ensureImported)('beforeAll', 'beforeAll');
(0, ensure_imported_1.ensureImported)('afterEach', 'afterEach');
(0, ensure_imported_1.ensureImported)('afterAll', 'afterAll');
const exportedExpect = (0, expect_1.makeExpect)(expect);
exports.expect = exportedExpect;
const globalSetup = () => {
    state_1.state.isGlobalSetupTeardownRegistered = true;
    afterEach(teardown_1.afterEachFn);
    afterAll(teardown_1.afterAllFn);
    (0, configure_snapshot_1.configureSnapshot)(expect);
};
const makeDescribe = (actualThing) => (name, fn, ...extraArgs) => (0, blocks_1.createBlockFn)(name, fn, extraArgs, (...args) => {
    if (is_in_node_1.isInNode && !state_1.state.isGlobalSetupTeardownRegistered) {
        globalSetup();
    }
    return actualThing(...args);
}, true);
const makeIt = (actualThing) => (name, fn, ...extraArgs) => (0, blocks_1.createBlockFn)(name, fn, extraArgs, (...args) => {
    if (is_in_node_1.isInNode && !state_1.state.isGlobalSetupTeardownRegistered) {
        globalSetup();
    }
    return actualThing(...args);
}, false);
const exportedDescribe = makeDescribe(describe);
exports.describe = exportedDescribe;
exportedDescribe.only = makeDescribe(describe.only);
exportedDescribe.skip = makeDescribe(describe.skip);
exportedDescribe.todo = makeDescribe(describe?.todo);
const exportedIt = makeIt(it);
exports.it = exportedIt;
exports.test = exportedIt;
exportedIt.only = makeIt(it.only);
exportedIt.skip = makeIt(it.skip);
exportedIt.todo = ((name) => (0, blocks_1.createBlockFn)(name, undefined, [], it.todo, false));
exportedIt.debug = ((...args) => {
    const testKey = makeIt(it.only)(...args);
    state_1.state.debugging.add(testKey);
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidml0ZXN0LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vc3JjL3ZpdGVzdC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7QUFBQSxxQ0FBeUM7QUFDekMsNkRBQXlEO0FBQ3pELDZDQUF3QztBQUN4QyxtQ0FBZ0M7QUFDaEMseUNBQXFEO0FBQ3JELGlEQUE2QztBQThFM0MsNEZBOUVPLDBCQUFXLE9BOEVQO0FBM0ViLHFDQUFzQztBQUN0Qyx1REFBbUQ7QUFJbkQsSUFBQSxnQ0FBYyxFQUFDLFVBQVUsRUFBRSxVQUFVLENBQUMsQ0FBQztBQUN2QyxJQUFBLGdDQUFjLEVBQUMsSUFBSSxFQUFFLFNBQVMsQ0FBQyxDQUFDO0FBQ2hDLElBQUEsZ0NBQWMsRUFBQyxRQUFRLEVBQUUsUUFBUSxDQUFDLENBQUM7QUFDbkMsSUFBQSxnQ0FBYyxFQUFDLFlBQVksRUFBRSxZQUFZLENBQUMsQ0FBQztBQUMzQyxJQUFBLGdDQUFjLEVBQUMsV0FBVyxFQUFFLFdBQVcsQ0FBQyxDQUFDO0FBQ3pDLElBQUEsZ0NBQWMsRUFBQyxXQUFXLEVBQUUsV0FBVyxDQUFDLENBQUM7QUFDekMsSUFBQSxnQ0FBYyxFQUFDLFVBQVUsRUFBRSxVQUFVLENBQUMsQ0FBQztBQUV2QyxNQUFNLGNBQWMsR0FBRyxJQUFBLG1CQUFVLEVBQUMsTUFBTSxDQUFDLENBQUM7QUE2RHRCLGdDQUFNO0FBM0QxQixNQUFNLFdBQVcsR0FBRyxHQUFHLEVBQUU7SUFDdkIsYUFBSyxDQUFDLCtCQUErQixHQUFHLElBQUksQ0FBQztJQUM3QyxTQUFTLENBQUMsc0JBQVcsQ0FBQyxDQUFDO0lBQ3ZCLFFBQVEsQ0FBQyxxQkFBVSxDQUFDLENBQUM7SUFDckIsSUFBQSxzQ0FBaUIsRUFBQyxNQUFNLENBQUMsQ0FBQztBQUM1QixDQUFDLENBQUM7QUFFRixNQUFNLFlBQVksR0FDaEIsQ0FBQyxXQUFxQixFQUFFLEVBQUUsQ0FDMUIsQ0FBQyxJQUFZLEVBQUUsRUFBYyxFQUFFLEdBQUcsU0FBZ0IsRUFBRSxFQUFFLENBQ3BELElBQUEsc0JBQWEsRUFDWCxJQUFJLEVBQ0osRUFBRSxFQUNGLFNBQVMsRUFDVCxDQUFDLEdBQUcsSUFBVyxFQUFFLEVBQUU7SUFDakIsSUFBSSxxQkFBUSxJQUFJLENBQUMsYUFBSyxDQUFDLCtCQUErQixFQUFFO1FBQ3RELFdBQVcsRUFBRSxDQUFDO0tBQ2Y7SUFDRCxPQUFPLFdBQVcsQ0FBQyxHQUFHLElBQUksQ0FBQyxDQUFDO0FBQzlCLENBQUMsRUFDRCxJQUFJLENBQ0wsQ0FBQztBQUVOLE1BQU0sTUFBTSxHQUNWLENBQUMsV0FBcUIsRUFBRSxFQUFFLENBQzFCLENBQUMsSUFBWSxFQUFFLEVBQWMsRUFBRSxHQUFHLFNBQWdCLEVBQUUsRUFBRSxDQUNwRCxJQUFBLHNCQUFhLEVBQ1gsSUFBSSxFQUNKLEVBQUUsRUFDRixTQUFTLEVBQ1QsQ0FBQyxHQUFHLElBQVcsRUFBRSxFQUFFO0lBQ2pCLElBQUkscUJBQVEsSUFBSSxDQUFDLGFBQUssQ0FBQywrQkFBK0IsRUFBRTtRQUN0RCxXQUFXLEVBQUUsQ0FBQztLQUNmO0lBQ0QsT0FBTyxXQUFXLENBQUMsR0FBRyxJQUFJLENBQUMsQ0FBQztBQUM5QixDQUFDLEVBQ0QsS0FBSyxDQUNOLENBQUM7QUFFTixNQUFNLGdCQUFnQixHQUF1QixZQUFZLENBQUMsUUFBUSxDQUFDLENBQUM7QUFpQjlDLG9DQUFRO0FBaEI5QixnQkFBZ0IsQ0FBQyxJQUFJLEdBQUcsWUFBWSxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUMsQ0FBQztBQUNwRCxnQkFBZ0IsQ0FBQyxJQUFJLEdBQUcsWUFBWSxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUMsQ0FBQztBQUNwRCxnQkFBZ0IsQ0FBQyxJQUFJLEdBQUcsWUFBWSxDQUFFLFFBQWdCLEVBQUUsSUFBSSxDQUFDLENBQUM7QUFFOUQsTUFBTSxVQUFVLEdBQTJDLE1BQU0sQ0FBQyxFQUFFLENBQUMsQ0FBQztBQWF0RCx3QkFBRTtBQUNGLDBCQUFJO0FBYnBCLFVBQVUsQ0FBQyxJQUFJLEdBQUcsTUFBTSxDQUFDLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQztBQUNsQyxVQUFVLENBQUMsSUFBSSxHQUFHLE1BQU0sQ0FBQyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUM7QUFDbEMsVUFBVSxDQUFDLElBQUksR0FBRyxDQUFDLENBQUMsSUFBWSxFQUFFLEVBQUUsQ0FDbEMsSUFBQSxzQkFBYSxFQUFDLElBQUksRUFBRSxTQUFnQixFQUFFLEVBQUUsRUFBRSxFQUFFLENBQUMsSUFBSSxFQUFFLEtBQUssQ0FBQyxDQUFRLENBQUM7QUFFcEUsVUFBVSxDQUFDLEtBQUssR0FBRyxDQUFDLENBQUMsR0FBRyxJQUE4QixFQUFFLEVBQUU7SUFDeEQsTUFBTSxPQUFPLEdBQUcsTUFBTSxDQUFDLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxHQUFHLElBQUksQ0FBQyxDQUFDO0lBQ3pDLGFBQUssQ0FBQyxTQUFTLENBQUMsR0FBRyxDQUFDLE9BQU8sQ0FBQyxDQUFDO0FBQy9CLENBQUMsQ0FBUSxDQUFDIn0=