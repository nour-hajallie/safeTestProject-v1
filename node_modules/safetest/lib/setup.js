"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.setup = void 0;
const _1 = require(".");
const docker_1 = require("./docker");
const state_1 = require("./state");
const lodash_1 = require("lodash");
const redirect_server_1 = require("./redirect-server");
const safe_require_1 = require("./safe-require");
const artifacts_1 = require("./artifacts");
const setup = (options) => {
    if (!options.bootstrappedAt)
        throw new Error('bootstrappedAt is required');
    state_1.state.bootstrappedAt = require.resolve(options.bootstrappedAt);
    const parse = (s) => {
        try {
            return JSON.parse(s);
        }
        catch {
            return s;
        }
    };
    const opts = {
        url: options.url ?? '',
        docker: options.useDocker ? 'true' : '',
        headed: 'headless' in options ? `${options.headless}` : '',
    };
    const envEntries = Object.entries(process.env)
        .map(([name, value]) => [name.toLowerCase(), `${value}`])
        .filter(([name]) => name.startsWith('opt_'))
        .map(([name, value]) => [name.slice(4).replace(/_/g, '.'), parse(value)]);
    for (const [name, value] of envEntries)
        (0, lodash_1.set)(opts, name, value);
    const url = options.url ?? opts['url'];
    if (!url)
        throw new Error('Target URL is required!');
    let useDocker = !!opts['docker'] || !!options.useDocker;
    const headless = useDocker ? true : !opts['headed'];
    const isCi = (state_1.state.isCi = !!opts['ci'] || !!process.env['CI']);
    if (opts['artifacts']) {
        state_1.state.artifactsJson = opts['artifacts'];
    }
    const hostname = new URL(url).hostname;
    const localUrl = hostname === 'localhost' || hostname === '127.0.0.1';
    (0, _1.setOptions)({
        url: `${url}`,
        useDocker,
        headless,
        matchImageSnapshotOptions: {
            failureThreshold: useDocker ? 0 : 1,
            failureThresholdType: 'percent',
        },
    });
    (0, _1.setOptions)(options);
    useDocker = !!state_1.state.options.useDocker;
    afterAll(async () => {
        // This needs to run for each vitest test, not sure why this doesn't work with vitest in the vitest.ts setup.
        await (0, artifacts_1.collectArtifacts)();
    });
    if (useDocker) {
        const dockerSafeUrl = new URL(url);
        if (localUrl)
            dockerSafeUrl.hostname = 'host.docker.internal';
        beforeAll(async () => {
            const docker = await (0, docker_1.startDocker)(state_1.state.options);
            await (0, redirect_server_1.startServer)(opts);
            const browserServer = `http://localhost:${docker?.ports.SERVER_PORT}/`;
            (0, _1.setOptions)({
                url: `${dockerSafeUrl}`,
                browserServer,
                afterAllDone: docker_1.stopDocker,
            });
            if (opts['headed'] && !isCi) {
                await (0, redirect_server_1.openLocalBrowser)('http://localhost:8844');
            }
            else {
                const viewUrl = (0, redirect_server_1.getViewUrl)();
                const console = (0, safe_require_1.safeRequire)('console');
                const msg = `\n\nGo to ${viewUrl} to view the remote tests\n\n`;
                if (viewUrl)
                    console.log(msg);
            }
        });
    }
};
exports.setup = setup;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2V0dXAuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi9zcmMvc2V0dXAudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7O0FBQUEsd0JBQStCO0FBQy9CLHFDQUFtRDtBQUVuRCxtQ0FBZ0M7QUFDaEMsbUNBQTZCO0FBQzdCLHVEQUE4RTtBQUM5RSxpREFBNkM7QUFDN0MsMkNBQStDO0FBSXhDLE1BQU0sS0FBSyxHQUFHLENBQUMsT0FBZ0IsRUFBRSxFQUFFO0lBQ3hDLElBQUksQ0FBQyxPQUFPLENBQUMsY0FBYztRQUFFLE1BQU0sSUFBSSxLQUFLLENBQUMsNEJBQTRCLENBQUMsQ0FBQztJQUMzRSxhQUFLLENBQUMsY0FBYyxHQUFHLE9BQU8sQ0FBQyxPQUFPLENBQUMsT0FBTyxDQUFDLGNBQWMsQ0FBQyxDQUFDO0lBRS9ELE1BQU0sS0FBSyxHQUFHLENBQUMsQ0FBUyxFQUFFLEVBQUU7UUFDMUIsSUFBSTtZQUNGLE9BQU8sSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQztTQUN0QjtRQUFDLE1BQU07WUFDTixPQUFPLENBQUMsQ0FBQztTQUNWO0lBQ0gsQ0FBQyxDQUFDO0lBRUYsTUFBTSxJQUFJLEdBQTJCO1FBQ25DLEdBQUcsRUFBRSxPQUFPLENBQUMsR0FBRyxJQUFJLEVBQUU7UUFDdEIsTUFBTSxFQUFFLE9BQU8sQ0FBQyxTQUFTLENBQUMsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsRUFBRTtRQUN2QyxNQUFNLEVBQUUsVUFBVSxJQUFJLE9BQU8sQ0FBQyxDQUFDLENBQUMsR0FBRyxPQUFPLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQyxDQUFDLEVBQUU7S0FDM0QsQ0FBQztJQUNGLE1BQU0sVUFBVSxHQUFHLE1BQU0sQ0FBQyxPQUFPLENBQUMsT0FBTyxDQUFDLEdBQUcsQ0FBQztTQUMzQyxHQUFHLENBQUMsQ0FBQyxDQUFDLElBQUksRUFBRSxLQUFLLENBQUMsRUFBRSxFQUFFLENBQUMsQ0FBQyxJQUFJLENB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