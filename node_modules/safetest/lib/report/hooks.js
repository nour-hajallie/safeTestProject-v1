"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.useFetching = exports.useHashState = void 0;
const react_1 = __importDefault(require("react"));
const useHashState = (name, defaultValue) => {
    const isString = (obj) => typeof obj === 'string';
    const isNumber = (obj) => typeof obj === 'number';
    const stringOrNumber = (obj) => isString(obj) || isNumber(obj);
    const stringify = (v) => (stringOrNumber(v) ? v : JSON.stringify(v));
    const defaultValueString = stringify(defaultValue);
    const getValue = react_1.default.useCallback((hash) => {
        let value = defaultValue;
        if (hash.has(name)) {
            const hashValue = hash.get(name);
            if (isNumber(defaultValue))
                value = +hashValue;
            else if (isString(defaultValue))
                value = hashValue;
            else {
                try {
                    value = JSON.parse(hashValue);
                }
                catch (e) {
                    console.error(e);
                }
            }
        }
        return value;
    }, [defaultValue, name]);
    const [state, setState] = react_1.default.useState(() => {
        return getValue(new URLSearchParams(location.hash.slice(1)));
    });
    const setWrapped = (value) => {
        const hash = new URLSearchParams(location.hash.slice(1));
        const valueString = stringify(value);
        setState(value);
        hash.set(name, valueString);
        const url = new URL(location.href);
        const oldHash = new URLSearchParams(location.hash.slice(1));
        const newHashValues = Object.fromEntries([
            ...new URLSearchParams([...oldHash, ...[...new URLSearchParams(hash)]]),
        ]);
        if (valueString === defaultValueString)
            delete newHashValues[name];
        url.hash = '';
        const nextHash = `${new URLSearchParams(newHashValues)}`;
        const nextUrl = `${url}#${decodeURIComponent(nextHash)}`;
        history.replaceState(null, '', nextUrl);
    };
    react_1.default.useEffect(() => {
        const listener = ({ newURL, oldURL }) => {
            const newHash = new URLSearchParams(new URL(newURL).hash.slice(1));
            const oldHash = new URLSearchParams(new URL(oldURL).hash.slice(1));
            if (newHash.get(name) !== oldHash.get(name)) {
                const newValue = getValue(newHash);
                if (newValue !== state) {
                    setState(newValue);
                }
            }
        };
        window.addEventListener('hashchange', listener);
        return () => window.removeEventListener('hashchange', listener);
    }, [getValue, name, state]);
    return [state, setWrapped];
};
exports.useHashState = useHashState;
const useFetching = (url, { enabled } = { enabled: true }) => {
    const [loading, setLoading] = react_1.default.useState(false);
    const [data, setData] = react_1.default.useState();
    const [error, setError] = react_1.default.useState();
    const fetcher = react_1.default.useCallback(async () => {
        if (!enabled)
            return;
        setLoading(true);
        fetch(url)
            .then((r) => r.json())
            .then(setData, setError)
            .finally(() => setLoading(false));
    }, [enabled, url]);
    react_1.default.useEffect(() => void fetcher(), [fetcher]);
    return { loading, data, error };
};
exports.useFetching = useFetching;
