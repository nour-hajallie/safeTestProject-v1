"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Test = void 0;
const react_1 = __importDefault(require("react"));
const report_1 = require("./report");
const suite_1 = require("./suite");
const lodash_1 = require("lodash");
const getAttempt = (url) => url.match(/-attempt-(\d+)/)?.[1];
const getAttemptText = (artifacts, index) => {
    const hasMultipleAttempts = artifacts.some((t) => +getAttempt(t) > 0);
    if (!hasMultipleAttempts)
        return '';
    const attempt = getAttempt(artifacts[index]);
    return `Attempt #${+attempt + 1}`;
};
const TabLink = ({ href, children }) => {
    return (react_1.default.createElement("span", { onClick: (e) => {
            const mac = navigator.platform.match('Mac');
            const open = e.shiftKey || (mac && e.metaKey) || (!mac && e.ctrlKey);
            if (!open)
                return;
            e.preventDefault();
            window.open(href, '_blank');
        }, style: { padding: 8, color: 'inherit', textDecoration: 'none' } }, children));
};
const Test = ({ test }) => {
    const { Accordion, Label, Tabs, Chip, renderArtifact, getTestUrl } = react_1.default.useContext(report_1.ComponentsContext);
    const filename = react_1.default.useContext(report_1.FilenameContext);
    const tabs = [];
    const artifacts = test.artifacts;
    if (artifacts) {
        for (const type of ['trace', 'video']) {
            const rendered = (artifacts[type] ?? [])
                .map((trace, index) => {
                const item = renderArtifact(type, trace);
                if (!item)
                    return null;
                const title = getAttemptText(artifacts[type], index) || `${type} #${+index + 1}`;
                return { title, item: item.element, url: item.url };
            })
                .filter(Boolean);
            if (rendered.length) {
                if (rendered.length === 1) {
                    tabs.push({
                        title: (react_1.default.createElement(TabLink, { href: rendered[0]?.url }, (0, lodash_1.upperFirst)(type))),
                        content: rendered[0]?.item,
                    });
                }
                else if (rendered?.length) {
                    const subTabs = [];
                    for (const render of rendered) {
                        subTabs.push({
                            title: (react_1.default.createElement(TabLink, { href: render?.url }, (0, lodash_1.upperFirst)(render?.title))),
                            content: render?.item,
                        });
                    }
                    tabs.push({
                        title: react_1.default.createElement("span", { style: { padding: 8 } }, (0, lodash_1.upperFirst)(type)),
                        content: react_1.default.createElement(Tabs, { tabs: subTabs }),
                    });
                }
            }
        }
        for (const key of ['diff', 'received', 'snapshot']) {
            const title = key === 'received' ? 'Updated Golden' : (0, lodash_1.upperFirst)(key);
            if (artifacts[key]?.length) {
                const content = artifacts[key]
                    ?.map((img) => renderArtifact(key, img))
                    .filter(Boolean);
                if (content?.length) {
                    tabs.push({
                        title: react_1.default.createElement(TabLink, { href: content[0]?.url }, title),
                        content: content.map((child, i) => (react_1.default.createElement("div", { key: i, style: { marginBottom: 8 }, children: child?.element }))),
                    });
                }
            }
        }
    }
    const testUrl = filename && test && getTestUrl(filename, test.fullName);
    if (testUrl) {
        tabs.push({
            title: react_1.default.createElement(TabLink, { href: testUrl }, "View Component"),
            content: (react_1.default.createElement("iframe", { src: testUrl, style: {
                    width: '100%',
                    minHeight: 700,
                    height: 'calc(100vh - 150px)',
                    border: '1px solid #e2e2e2',
                }, loading: 'lazy' })),
        });
    }
    return (react_1.default.createElement(Accordion
    // onChange={(open) => console.log({ open })}
    , { 
        // onChange={(open) => console.log({ open })}
        summary: react_1.default.createElement(react_1.default.Fragment, null,
            react_1.default.createElement(Label, null,
                react_1.default.createElement(Chip, { label: suite_1.statusIcons[test.status] })),
            ' ',
            react_1.default.createElement("span", { style: { position: 'relative', zIndex: 1 } }, test.title),
            react_1.default.createElement("span", { style: { position: 'relative', zIndex: 0, userSelect: 'none' } },
                react_1.default.createElement("span", { style: {
                        color: 'transparent',
                        position: 'absolute',
                        right: 0,
                        top: 0,
                        whiteSpace: 'pre',
                    } }, test.id),
                react_1.default.createElement("span", { style: {
                        color: 'transparent',
                        position: 'absolute',
                        right: 0,
                        top: 0,
                        whiteSpace: 'pre',
                    } }, test.id.replace(/ > /g, ' ')))) },
        react_1.default.createElement(Tabs, { tabs: tabs })));
};
exports.Test = Test;
