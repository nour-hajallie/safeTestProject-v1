"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Report = exports.ComponentsContext = exports.StateContext = exports.FilenameContext = void 0;
const react_1 = __importDefault(require("react"));
const hooks_1 = require("./hooks");
const lodash_1 = require("lodash");
const accordion_1 = require("./accordion");
const chip_1 = require("./chip");
const expandable_1 = require("./expandable");
const file_1 = require("./file");
const label_1 = require("./label");
const radio_1 = require("./radio");
const suite_1 = require("./suite");
const tabs_1 = require("./tabs");
const test_1 = require("./test");
const link_1 = require("./link");
const smart_video_1 = require("./smart-video");
exports.FilenameContext = react_1.default.createContext(null);
exports.StateContext = react_1.default.createContext({});
const statusMap = {
    passed: false,
    failed: false,
    pending: false,
    skipped: false,
    disabled: false,
    todo: false,
};
const statuses = Object.keys(statusMap);
exports.ComponentsContext = react_1.default.createContext({});
const Report = ({ useFetching = hooks_1.useFetching, useState = hooks_1.useHashState, Accordion = accordion_1.Accordion, Chip = chip_1.Chip, Expandable = expandable_1.Expandable, File = file_1.File, Label = label_1.Label, Radio = radio_1.Radio, Suite = suite_1.Suite, Tabs = tabs_1.Tabs, Test = test_1.Test, getTestUrl, renderArtifact, } = {}) => {
    const [resultsLocation, setResultsLocation] = useState('results', '');
    const [url] = useState('url', '/');
    const [showing, setShowing] = useState('status', 'all');
    const results = useFetching(resultsLocation, {
        enabled: !!resultsLocation,
    });
    const statusCounts = react_1.default.useMemo(() => {
        const counts = { all: 0 };
        for (const file of results.data?.testResults ?? []) {
            for (const test of file.assertionResults) {
                counts[test.status] = (counts[test.status] ?? 0) + 1;
                counts.all++;
            }
        }
        return counts;
    }, [results.data?.testResults]);
    if (!resultsLocation)
        return (react_1.default.createElement(react_1.default.Fragment, null,
            react_1.default.createElement("p", null, "No results URL provided."),
            react_1.default.createElement("input", { type: 'text', placeholder: 'Results URL', onKeyUp: (e) => {
                    if (e.key === 'Enter') {
                        setResultsLocation(e.target.value);
                    }
                } })));
    const statusFilters = ['all', ...statuses];
    const myGetTestUrl = getTestUrl ??
        ((filename, test) => {
            if (!url || !filename)
                return '';
            const filePrefix = filename.startsWith('.') ? '' : './';
            const fixedFile = `${filePrefix}${filename}`.replace(/\.[jt]sx?$/g, '');
            const testName = test.trim().replace(/ /g, '+');
            const search = `?test_path=${fixedFile}&test_name=${testName}`;
            return `${url}${search}`;
        });
    const myRenderArtifact = renderArtifact ??
        ((type, artifact) => {
            if (type === 'trace') {
                const aElement = document.createElement('a');
                aElement.href = `${url}${artifact}`;
                const traceUrl = aElement.href;
                const viewerUrl = traceUrl.split('/traces/')[0];
                const fullUrl = `${viewerUrl}/?trace=${traceUrl}`;
                return {
                    url: fullUrl,
                    element: (react_1.default.createElement("iframe", { style: {
                            width: '100%',
                            minHeight: 700,
                            height: 'calc(100vh - 150px)',
                            border: '1px solid #e2e2e2',
                        }, src: fullUrl, loading: 'lazy' })),
                };
            }
            if (type === 'video') {
                return {
                    url: `${url}${artifact}`,
                    element: react_1.default.createElement(smart_video_1.SmartVideo, { src: `${url}${artifact}` }),
                };
            }
            if (type === 'snapshot')
                return null;
            return {
                url: `${url}${artifact}`,
                element: (react_1.default.createElement("div", { style: {
                        display: 'flex',
                        width: 'fit-content',
                    } },
                    react_1.default.createElement(link_1.Link, { href: `${url}${artifact}` },
                        react_1.default.createElement("img", { style: { maxWidth: '80vw', border: '1px solid #e2e2e2' }, alt: '', src: `${url}${artifact}` })))),
            };
        });
    return (react_1.default.createElement(exports.ComponentsContext.Provider, { value: {
            Accordion,
            Chip,
            Expandable,
            File,
            Label,
            Radio,
            Suite,
            Tabs,
            Test,
            getTestUrl: myGetTestUrl,
            renderArtifact: myRenderArtifact,
            useState,
            useFetching,
        } },
        results.loading && react_1.default.createElement("p", null, "Loading..."),
        results.data && (react_1.default.createElement("div", { style: {
                marginBottom: 16,
                padding: 8,
                border: '1px solid #bbb',
            } },
            "Showing:",
            react_1.default.createElement("div", { style: { display: 'inline-block', paddingLeft: 8, lineHeight: 1 } },
                react_1.default.createElement(Radio, { options: statusFilters.map((s) => {
                        const label = (0, lodash_1.upperFirst)(s);
                        const withLabel = `${suite_1.statusIcons[s] ?? ''} ${label} (${statusCounts[s] ?? 0})`;
                        return react_1.default.createElement("div", { style: { padding: 8 } }, withLabel);
                    }), defaultIndex: statusFilters.indexOf(showing), onChange: (e) => {
                        setShowing(statusFilters[e ?? 0]);
                    } })))),
        results.data?.testResults.map((file) => (react_1.default.createElement(exports.FilenameContext.Provider, { key: file.filename, value: file.filename },
            react_1.default.createElement(exports.StateContext.Provider, { value: { viewing: showing } },
                react_1.default.createElement(File, { file: file })))))));
};
exports.Report = Report;
