"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.render = exports.SAFETEST_INTERFACE = void 0;
const deepmerge_1 = __importDefault(require("deepmerge"));
const state_1 = require("./state");
const is_in_node_1 = require("./is-in-node");
const get_page_1 = require("./get-page");
const safe_require_1 = require("./safe-require");
const ensure_dir_1 = require("./ensure-dir");
const make_pause_1 = require("./make-pause");
const get_retry_attempt_1 = require("./get-retry-attempt");
const anythingProxy_1 = require("./anythingProxy");
const expose_function_1 = require("./expose-function");
const defer_1 = require("./defer");
exports.SAFETEST_INTERFACE = '__safetestApi__';
const timeout = (ms) => new Promise((r) => setTimeout(r, ms).unref?.());
const IGNORE_CONSOLE_MESSAGES = [
    /^\[vite\] connected\.$/,
    /^\[vite\] connecting\.\.\.$/,
    /^Download the Vue Devtools extension for a better development experience/,
    /^You are running Vue in development mode/,
    /^%cDownload the React DevTools for a better development experience/,
    /\[HMR\] Waiting for update signal from WDS\.\.\.$/,
    /^\[webpack-dev-server\] Live Reloading enabled.$/,
    /^\[webpack-dev-server\] Server started/,
    /^Go to .* to debug this test$/,
    /^Download the Apollo DevTools/,
];
const backoffMs = [500, 750, 1000, 2000];
async function render(element, options, howToRender) {
    if (state_1.state.options) {
        options = (0, deepmerge_1.default)(state_1.state.options, options);
    }
    state_1.state.pauseAtEveryStep = !!options.debugTests;
    if (typeof process !== 'undefined' && process.env['SAFETEST_OPTIONS']) {
        options = (0, deepmerge_1.default)(options, JSON.parse(process.env['SAFETEST_OPTIONS']));
    }
    options.headless = state_1.state.debugging.has(state_1.state.activeTest ?? '')
        ? false
        : 'headless' in options
            ? options.headless
            : true;
    let url = options.url ??
        (typeof process !== 'undefined'
            ? process.env['BASE_URL']
            : 'http://localhost:3000') ??
        'http://localhost:3000';
    if (is_in_node_1.isInNode) {
        if (options.subPath) {
            url = `${new URL(options.subPath, options.url)}`;
        }
        const console = (0, safe_require_1.safeRequire)('console');
        let page = state_1.state.browserContextInstance?.pages()[0];
        const inspector = (0, safe_require_1.safeRequire)('inspector');
        const path = (0, safe_require_1.safeRequire)('path');
        const videoDir = options.recordVideo?.dir ?? options.videosPath;
        const getFilePath = () => {
            const filename = state_1.state.getState().testPath ?? '';
            state_1.state.testPath = filename;
            const bootstrapDir = path.dirname(state_1.state.bootstrappedAt);
            const filenameWithoutExt = filename.split('.').slice(0, -1).join('.');
            let relative = path.relative(bootstrapDir, filenameWithoutExt);
            if (!relative.startsWith('.'))
                relative = `./${relative}`;
            return relative;
        };
        const attempt = (0, get_retry_attempt_1.getRetryAttempt)();
        const switchingHeadlessness = state_1.state.browserContextInstance &&
            state_1.state.browserContextInstance.headless !== options.headless;
        if (!page || videoDir || switchingHeadlessness) {
            // If there is videoDir for this test, we need can't reuse an old browserContext that
            // wasn't recording video.
            ({ page } = await (0, get_page_1.getPage)(options, !!videoDir || switchingHeadlessness));
            if (!page._safetest_internal.safeTestExposed) {
                page._safetest_internal.safeTestExposed = true;
                await (0, expose_function_1.exposeFunction)(page, exports.SAFETEST_INTERFACE, async (type, ...args) => {
                    const safetest_internal = page._safetest_internal;
                    if (type === 'READY') {
                        return safetest_internal.renderIsReadyDeferred?.resolve();
                    }
                    if (type === 'GET_INFO') {
                        const info = {
                            testName: state_1.state.activeTest,
                            testPath: getFilePath(),
                            retryAttempt: attempt,
                        };
                        const hooks = safetest_internal.hooks;
                        for (const beforeRender of hooks.beforeRender ?? []) {
                            await beforeRender(page, info);
                        }
                        return info;
                    }
                    if (type === 'BRIDGE') {
                        const [response] = args;
                        if ('result' in response) {
                            safetest_internal.pendingBridge.resolve(response.result);
                        }
                        else {
                            safetest_internal.pendingBridge.reject(response.error);
                        }
                        return;
                    }
                    console.log('unhandled SAFETEST_INTERFACE call', JSON.stringify({ type, args }));
                    return;
                });
            }
        }
        page._safetest_internal = (0, deepmerge_1.default)(page._safetest_internal, {
            // coveragePath: options.coverageDir,
            videoDir,
            failureScreenshotDir: options.failureScreenshotsDir,
        });
        if (options.recordTraces) {
            await page.context().tracing.start({
                screenshots: true,
                snapshots: true,
                sources: true,
                title: state_1.state.activeTest,
            });
            const test = expect.getState().currentTestName ?? '<unknown>';
            const testPath = path
                .relative(process.cwd(), expect.getState().testPath)
                .replace(/[^a-z0-9_]/g, '_');
            const activeTest = state_1.state.activeTest;
            page._safetest_internal.hooks.afterTest.push(async () => {
                const safeName = activeTest?.replace(/[^a-z0-9_]/gi, '_');
                const path = `${options.recordTraces}/traces/${testPath}_${safeName}-attempt-${attempt}.zip`;
                state_1.state.artifacts.push({ type: 'trace', test, path, confirmed: true });
                try {
                    await page.context().tracing.stop({ path });
                }
                catch { }
            });
        }
        const isDebugging = state_1.state.debugging.has(state_1.state.activeTest ?? '');
        state_1.state.exposeGlobals['page'] = page;
        const pause = (state_1.state.pause = await (0, make_pause_1.makePause)({ page, isDebugging }));
        for (const beforeNavigate of page._safetest_internal.hooks.beforeNavigate) {
            await beforeNavigate(page);
        }
        const oldPagePause = page.pause;
        page.pause = (async () => {
            const url = inspector.url();
            let port = 0;
            if (url) {
                port = +new URL(url).port;
            }
            if (port)
                inspector.close();
            await oldPagePause.call(page);
            if (port) {
                inspector.open(port);
                inspector.waitForDebugger();
            }
        });
        const consoleMessagesGroups = {};
        page.on('console', async (msg) => {
            const text = msg.text();
            for (const ignore of [
                ...IGNORE_CONSOLE_MESSAGES,
                ...(options.ignoreConsoleMessages ?? []),
            ]) {
                if (ignore.test(text)) {
                    return;
                }
            }
            try {
                const args = (await Promise.all(msg.args().map((a) => a.jsonValue()))).map((a) => JSON.stringify(a));
                const params = [`${msg.type()}:`];
                if (args.length)
                    params.push(...args);
                else
                    params.push(text);
                const key = JSON.stringify(params);
                if (!consoleMessagesGroups[key])
                    consoleMessagesGroups[key] = 0;
                consoleMessagesGroups[key]++;
            }
            catch {
                const params = [`${msg.type()}:`, text];
                const key = JSON.stringify(params);
                if (!consoleMessagesGroups[key])
                    consoleMessagesGroups[key] = 0;
                consoleMessagesGroups[key]++;
            }
        });
        page._safetest_internal.hooks.afterTest.push(async () => {
            const consoleLines = [];
            const entries = Object.entries(consoleMessagesGroups);
            consoleLines.push('Console messages: ');
            for (const [key, count] of entries) {
                const args = JSON.parse(key).join(' ');
                consoleLines.push((count > 1 ? `(${count}X) ` : '') + `${args}`);
            }
            if (entries.length) {
                console.log(consoleLines.map((l, i) => (i ? `  ${l}` : l)).join('\n'));
            }
        });
        page._safetest_internal.hooks.afterTest.push(async () => {
            const errors = [];
            for (const [key, value] of Object.entries(state_1.state.pendingExpects)) {
                if (value)
                    errors.push(new Error(`Expected ${value} ${key}() calls to be awaited, but they were not.`));
            }
            state_1.state.pendingExpects = {};
            if (errors.length) {
                throw new Error(errors.map((e) => e.message).join('\n'));
            }
        });
        const failDir = page._safetest_internal.failureScreenshotDir;
        if (failDir) {
            const activeTest = state_1.state.activeTest;
            page._safetest_internal.hooks.afterTest.push(async () => {
                const passed = state_1.state.passedTests.has(activeTest ?? '');
                if (!passed) {
                    const pages = state_1.state.browserContextInstance?.pages();
                    for (const [index, page] of pages?.entries() ?? []) {
                        const suffix = index ? `_${index}` : '';
                        const path = `${failDir}/${activeTest}${suffix}.png`;
                        await page.screenshot({ path });
                    }
                }
            });
        }
        if (videoDir) {
            const test = expect.getState().currentTestName ?? '<unknown>';
            const testPath = path
                .relative(process.cwd(), expect.getState().testPath)
                .replace(/[^a-z0-9_]/g, '_');
            const activeTest = state_1.state.activeTest;
            page._safetest_internal.hooks.afterTest.push(async () => {
                const pages = state_1.state.browserContextInstance?.pages();
                for (const page of pages ?? []) {
                    const index = page._safetest_internal.pageIndex;
                    await (0, ensure_dir_1.ensureDir)(videoDir);
                    const suffix = (pages?.length ?? 0) > 1 ? `_tab${index}` : '';
                    const safeName = activeTest?.replace(/[^a-z0-9_]/gi, '_');
                    const newName = `${safeName}-attempt-${attempt}${suffix}.webm`;
                    const path = `${videoDir}/${testPath}_${newName}`;
                    state_1.state.artifacts.push({ type: 'video', test, path, confirmed: true });
                    page?.video()?.saveAs(path);
                }
            });
        }
        // Workaround issue where Playwright sometimes doesn't goto the url after a call to page.goto()
        const gotoAttempts = 5;
        let attemptsLeft = gotoAttempts;
        class PageReadyTimeoutError extends Error {
            constructor() {
                super(...arguments);
                this.name = 'PageReadyTimeoutError';
            }
        }
        const gotoTestUrl = async () => {
            const defer = (0, defer_1.deferred)();
            const rejectForTimeout = () => defer.reject(new PageReadyTimeoutError());
            const getUrl = () => {
                return page.evaluate(() => location.href).catch(() => page.url());
            };
            const attempt = gotoAttempts - attemptsLeft;
            const initialNavigationTimeout = options.initialNavigationTimeout ??
                options.defaultNavigationTimeout ??
                backoffMs[attempt] ??
                5000;
            setTimeout(async () => {
                if (gotoAttempts - attemptsLeft !== attempt)
                    return;
                // Sometimes the page.goto doesn't register, this will detect that.
                const halted = new URL(await getUrl()).origin !== new URL(url).origin;
                if (halted)
                    return rejectForTimeout();
                // The page has no pending network requests and didn't resolve `renderIsReadyDeferred`.
                page.waitForLoadState('networkidle').then(rejectForTimeout, () => { });
            }, initialNavigationTimeout);
            page
                .goto(url, { waitUntil: 'commit', timeout: initialNavigationTimeout })
                .catch(async (error) => {
                const halted = new URL(await getUrl()).origin !== new URL(url).origin;
                if (halted)
                    defer.reject(error);
            })
                .then(() => page._safetest_internal.renderIsReadyDeferred?.promise)
                .then(() => defer.resolve());
            return defer.promise.catch((error) => {
                const shouldRetry = attemptsLeft-- > 0;
                const plan = shouldRetry
                    ? `retrying (attempts left: ${attemptsLeft + 1})...`
                    : 'giving up';
                console.log(`page.goto error: ${error.name} on "${state_1.state.activeTest}" ${plan}`);
                if (shouldRetry)
                    return gotoTestUrl();
                throw new PageReadyTimeoutError();
            });
        };
        const testName = state_1.state.activeTest;
        page._safetest_internal.renderIsReadyDeferred = (0, defer_1.deferred)();
        await gotoTestUrl();
        const debugUrl = await page.evaluate(({ testName, testPath }) => {
            const url = new URL(window.location.href);
            url.searchParams.set('test_name', testName);
            url.searchParams.set('test_path', testPath);
            const debugUrl = url.toString().replace(/%2F/g, '/');
            console.log(`Go to ${debugUrl} to debug this test`);
            return debugUrl;
        }, { testName: state_1.state.activeTest, testPath: getFilePath() });
        if (isDebugging) {
            console.log(`Go to ${debugUrl} to debug this test`);
        }
        page._safetest_internal.hooks.afterTest.push(async () => {
            const activeTest = testName ?? '';
            timeout(100).then(() => {
                const passed = state_1.state.passedTests.has(activeTest);
                if (!passed && !isDebugging) {
                    console.log(`'${state_1.state.activeTest}' Failed. Go to ${debugUrl.replace('host.docker.internal', 'localhost')} to debug this test`);
                }
            });
        });
        const bridge = (state_1.state.bridge = async (passed) => {
            if (typeof passed === 'function')
                passed = {};
            page._safetest_internal.pendingBridge = (0, defer_1.deferred)();
            await page.evaluate(({ passed, SAFETEST_INTERFACE }) => {
                const { callback, defer } = window[SAFETEST_INTERFACE]
                    .bridgePending;
                Promise.resolve()
                    .then(() => callback(passed))
                    .then((result) => {
                    window[SAFETEST_INTERFACE]('BRIDGE', { result });
                    defer.resolve(result);
                })
                    .catch((error) => {
                    window[SAFETEST_INTERFACE]('BRIDGE', { error })(window)
                        .safeTestBridge({ error });
                    defer.reject(error);
                });
            }, { passed, SAFETEST_INTERFACE: exports.SAFETEST_INTERFACE });
            return await page._safetest_internal.pendingBridge?.promise;
        });
        const rendered = {
            page,
            pause,
            bridge,
            require: safe_require_1.safeRequire,
        };
        return rendered;
    }
    else {
        if (!state_1.state.browserState) {
            throw new Error('App was not bootstrapped to use safetest correctly');
        }
        if (options.subPath) {
            try {
                const dummyUrl = new URL(options.subPath, 'http://localhost:3000');
                const pathname = dummyUrl.pathname;
                const dummyUrl2 = new URL(options.subPath, dummyUrl);
                const different = pathname !== dummyUrl2.pathname;
                // subPath is something like `foo/` and every page reload we'll end up adding another `foo/` to the url incorrectly.
                // This is detects and breaks out of that loop.
                const skip = different && location.pathname.includes(pathname);
                if (!skip) {
                    const url = new URL(options.subPath, location.href);
                    const search = new URLSearchParams([
                        ...url.searchParams,
                        ...[...new URLSearchParams(location.search)],
                    ]).toString();
                    url.search = search;
                    url.hash = location.hash;
                    history.pushState(null, '', `${url}`);
                }
            }
            catch { }
        }
        await howToRender(element);
        const bridge = (state_1.state.bridge = (passed, callback) => {
            if (!callback)
                callback = passed;
            const defer = (0, defer_1.deferred)();
            if (!window[exports.SAFETEST_INTERFACE]) {
                console.log('Test is waiting for a bridge call, you can manually invoke it with: `bridged(...)`. Waiting by:', callback);
                window.bridged = (passed) => {
                    delete window.bridged;
                    defer.resolve(passed);
                    return callback(passed);
                };
            }
            else {
                window[exports.SAFETEST_INTERFACE].bridgePending = { callback, defer };
            }
            return defer.promise;
        });
        if (typeof window[exports.SAFETEST_INTERFACE] === 'function') {
            window[exports.SAFETEST_INTERFACE]?.('READY');
        }
        // await timeout(0);
        return {
            page: anythingProxy_1.anythingProxy,
            pause: () => Promise.resolve(),
            bridge,
            require: anythingProxy_1.anythingProxy,
        };
    }
}
exports.render = render;
//# sourceMappingURL=data:application/json;base64,