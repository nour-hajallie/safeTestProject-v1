"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.mergeArtifacts = exports.collectArtifacts = void 0;
const lodash_1 = require("lodash");
const safe_require_1 = require("./safe-require");
const state_1 = require("./state");
const path = (0, safe_require_1.safeRequire)('path');
const fs = (0, safe_require_1.safeRequire)('fs');
const exists = async (path) => {
    return new Promise((resolve) => {
        fs.access(path, (err) => resolve(!err));
    });
};
const artifacts = state_1.state.artifacts;
const collectArtifacts = async () => {
    const file = state_1.state.artifactsJson;
    const bootstrappedAt = path.dirname(require.resolve(state_1.state.bootstrappedAt));
    const testPath = path.relative(bootstrappedAt, state_1.state.testPath ?? '');
    if (file) {
        const byTest = {};
        for (const artifact of artifacts) {
            // Videos take a few ms to write to disk but we know they'll be there, hack to get around that race condition
            if (artifact.confirmed || (await exists(artifact.path))) {
                if (!byTest[artifact.test])
                    byTest[artifact.test] = [];
                const info = { type: artifact.type, path: artifact.path };
                byTest[artifact.test]?.push(info);
            }
        }
        const grouped = {};
        for (const [test, artifacts] of Object.entries(byTest)) {
            const group = (grouped[test] = {});
            const unique = (0, lodash_1.uniqBy)(artifacts, 'path');
            for (const artifact of unique) {
                if (!group[artifact.type])
                    group[artifact.type] = [];
                group[artifact.type].push(artifact.path);
            }
        }
        const json = {
            artifacts: { [testPath]: grouped },
            bootstrappedAt: state_1.state.bootstrappedAt,
            cwd: process.cwd(),
        };
        try {
            const contents = fs.readFileSync(path.resolve(file), 'utf-8');
            const existing = JSON.parse(contents);
            Object.assign(json.artifacts, existing.artifacts);
        }
        catch { }
        fs.writeFileSync(file, JSON.stringify(json, null, 2));
    }
};
exports.collectArtifacts = collectArtifacts;
const mergeArtifacts = (bootstrappedAt, cwd, artifacts, resultsJson) => {
    const results = require(path.resolve(resultsJson));
    const dir = path.dirname(bootstrappedAt);
    const relativeBootstrapDir = path.relative(cwd, dir);
    for (const file of results.testResults) {
        const absoluteFilename = path.resolve(dir, file.name);
        const filename = path.relative(dir, absoluteFilename);
        file.filename = filename;
        const relativeFilename = path.join(relativeBootstrapDir, filename);
        for (const assertionResult of file.assertionResults) {
            const { ancestorTitles } = assertionResult;
            if (ancestorTitles[0] === '')
                ancestorTitles.shift();
            const parts = [...ancestorTitles, assertionResult.title];
            const full1 = parts.join(' ');
            const full2 = relativeFilename + ' > ' + parts.join(' > ');
            const fileArtifacts = artifacts[filename];
            const testArtifacts = fileArtifacts?.[full1] ?? fileArtifacts?.[full2];
            if (testArtifacts) {
                assertionResult.artifacts = testArtifacts;
            }
        }
    }
    fs.writeFileSync(resultsJson, JSON.stringify(results, null, 2));
};
exports.mergeArtifacts = mergeArtifacts;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYXJ0aWZhY3RzLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vc3JjL2FydGlmYWN0cy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7QUFBQSxtQ0FBZ0M7QUFDaEMsaURBQTZDO0FBQzdDLG1DQUFnQztBQUloQyxNQUFNLElBQUksR0FBRyxJQUFBLDBCQUFXLEVBQUMsTUFBTSxDQUFDLENBQUM7QUFDakMsTUFBTSxFQUFFLEdBQUcsSUFBQSwwQkFBVyxFQUFDLElBQUksQ0FBQyxDQUFDO0FBRTdCLE1BQU0sTUFBTSxHQUFHLEtBQUssRUFBRSxJQUFZLEVBQUUsRUFBRTtJQUNwQyxPQUFPLElBQUksT0FBTyxDQUFDLENBQUMsT0FBTyxFQUFFLEVBQUU7UUFDN0IsRUFBRSxDQUFDLE1BQU0sQ0FBQyxJQUFJLEVBQUUsQ0FBQyxHQUFHLEVBQUUsRUFBRSxDQUFDLE9BQU8sQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUM7SUFDMUMsQ0FBQyxDQUFDLENBQUM7QUFDTCxDQUFDLENBQUM7QUFFRixNQUFNLFNBQVMsR0FBRyxhQUFLLENBQUMsU0FBUyxDQUFDO0FBa0IzQixNQUFNLGdCQUFnQixHQUFHLEtBQUssSUFBSSxFQUFFO0lBQ3pDLE1BQU0sSUFBSSxHQUFHLGFBQUssQ0FBQyxhQUFhLENBQUM7SUFDakMsTUFBTSxjQUFjLEdBQUcsSUFBSSxDQUFDLE9BQU8sQ0FBQyxPQUFPLENBQUMsT0FBTyxDQUFDLGFBQUssQ0FBQyxjQUFjLENBQUMsQ0FBQyxDQUFDO0lBQzNFLE1BQU0sUUFBUSxHQUFHLElBQUksQ0FBQyxRQUFRLENBQUMsY0FBYyxFQUFFLGFBQUssQ0FBQyxRQUFRLElBQUksRUFBRSxDQUFDLENBQUM7SUFFckUsSUFBSSxJQUFJLEVBQUU7UUFDUixNQUFNLE1BQU0sR0FHUixFQUFFLENBQUM7UUFFUCxLQUFLLE1BQU0sUUFBUSxJQUFJLFNBQVMsRUFBRTtZQUNoQyw2R0FBNkc7WUFDN0csSUFBSSxRQUFRLENBQUMsU0FBUyxJ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