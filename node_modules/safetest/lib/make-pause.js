"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.makePause = void 0;
const playwright_page_keys_1 = require("./playwright-page-keys");
const global_1 = require("./global");
const expose_function_1 = require("./expose-function");
const state_1 = require("./state");
const makePause = async ({ page, isDebugging }) => {
    return () => {
        const pauseAtEveryStep = state_1.state.pauseAtEveryStep;
        if (!isDebugging && !pauseAtEveryStep) {
            console.warn(`pause() was called without using it.debug(...). This was
probably a mistake, did you forget to wrap the test with pause() in a it.debug(...) block?`);
        }
        for (const [name, value] of Object.entries(state_1.state.exposeGlobals)) {
            global_1.global[name] = value;
        }
        if (!pauseAtEveryStep) {
            console.log(`The current test has been paused.
  The page object is available in the debugging test.
  Run node with --inspect-brk flag to debug with v8 node inspector.
  When finished debugging the test, run resume() to
  resume the tests (and not leave hanging browser instances around).`);
        }
        return new Promise(async (resolve) => {
            global_1.global.resume = resolve;
            if (!page._safetest_internal.fnPrefix) {
                const fnPrefix = `${Math.random()}`;
                page._safetest_internal.fnPrefix = fnPrefix;
                await (0, expose_function_1.exposeFunction)(page, 'resume', () => global_1.global.resume());
                await (0, expose_function_1.exposeFunction)(page, '__page_channel__', (method, args) => {
                    const parsedArgs = JSON.parse(args, (_key, value) => {
                        if (`${value}`.startsWith(fnPrefix)) {
                            // eslint-disable-next-line no-new-func
                            return new Function(`return ${value.slice(fnPrefix.length)}`)();
                        }
                        return value;
                    });
                    const parts = method.split('.');
                    const bound = parts
                        .slice(0, -1)
                        .reduce((acc, cur) => acc[cur], page);
                    const fn = bound[parts[parts.length - 1]];
                    return fn.apply(bound, parsedArgs);
                });
            }
            const exposePage = async () => {
                page.evaluate(({ pageMethods, pageProperties, fnPrefix }) => {
                    const stringifyArgs = (args) => JSON.stringify(args, (_key, val) => {
                        if (typeof val === 'function') {
                            return `${fnPrefix}${val}`;
                        }
                        return val;
                    });
                    window.page = {};
                    for (const method of pageMethods) {
                        window.page[method] = (...args) => {
                            const stringifiedArgs = stringifyArgs(args);
                            return window.__page_channel__(method, stringifiedArgs);
                        };
                    }
                    for (const property of Object.keys(pageProperties)) {
                        window.page[property] = {};
                        for (const method of pageProperties[property]) {
                            window.page[property][method] = (...args) => {
                                const stringifiedArgs = stringifyArgs(args);
                                return window.__page_channel__(`${property}.${method}`, stringifiedArgs);
                            };
                        }
                    }
                }, {
                    pageMethods: playwright_page_keys_1.pageMethods,
                    pageProperties: playwright_page_keys_1.pageProperties,
                    fnPrefix: page._safetest_internal.fnPrefix ?? '',
                });
            };
            await exposePage();
            page.on('load', exposePage);
        });
    };
};
exports.makePause = makePause;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibWFrZS1wYXVzZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9tYWtlLXBhdXNlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7OztBQUNBLGlFQUFxRTtBQUNyRSxxQ0FBa0M7QUFDbEMsdURBQW1EO0FBQ25ELG1DQUFnQztBQU96QixNQUFNLFNBQVMsR0FBRyxLQUFLLEVBQUUsRUFBRSxJQUFJLEVBQUUsV0FBVyxFQUFhLEVBQUUsRUFBRTtJQUNsRSxPQUFPLEdBQUcsRUFBRTtRQUNWLE1BQU0sZ0JBQWdCLEdBQUcsYUFBSyxDQUFDLGdCQUFnQixDQUFDO1FBQ2hELElBQUksQ0FBQyxXQUFXLElBQUksQ0FBQyxnQkFBZ0IsRUFBRTtZQUNyQyxPQUFPLENBQUMsSUFBSSxDQUFDOzJGQUN3RSxDQUFDLENBQUM7U0FDeEY7UUFDRCxLQUFLLE1BQU0sQ0FBQyxJQUFJLEVBQUUsS0FBSyxDQUFDLElBQUksTUFBTSxDQUFDLE9BQU8sQ0FBQyxhQUFLLENBQUMsYUFBYSxDQUFDLEVBQUU7WUFDOUQsZUFBYyxDQUFDLElBQUksQ0FBQyxHQUFHLEtBQUssQ0FBQztTQUMvQjtRQUNELElBQUksQ0FBQyxnQkFBZ0IsRUFBRTtZQUNyQixPQUFPLENBQUMsR0FBRyxDQUFDOzs7O3FFQUltRCxDQUFDLENBQUM7U0FDbEU7UUFFRCxPQUFPLElBQUksT0FBTyxDQUFPLEtBQUssRUFBRSxPQUFPLEVBQUUsRUFBRTtZQUN4QyxlQUFjLENBQUMsTUFBTSxHQUFHLE9BQU8sQ0FBQztZQUNqQyxJQUFJLENBQUMsSUFBSSxDQUFDLGtCQUFrQixDQUFDLFFBQVEsRUFBRTtnQkFDckMsTUFBTSxRQUFRLEdBQUcsR0FBRyxJQUFJLENBQUMsTUFBTSxFQUFFLEVBQUUsQ0FBQztnQkFDcEMsSUFBSSxDQUFDLGtCQUFrQixDQUFDLFFBQVEsR0FBRyxRQUFRLENBQUM7Z0JBQzVDLE1BQU0sSUFBQSxnQ0FBYyxFQUFDLElBQUksRUFBRSxRQUFRLEVBQUUsR0FBRyxFQUFF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