import React from 'react';
const usePrevious = (value) => {
    const ref = React.useRef(value);
    React.useEffect(() => {
        ref.current = value;
    });
    return ref.current;
};
export const Expandable = ({ expanded, children, ms }) => {
    const actualMs = ms ?? 200;
    const ref = React.useRef(null);
    const [myExpanded, setMyExpanded] = React.useState(expanded);
    const timeoutRef = React.useRef();
    const previousExpanded = usePrevious(expanded);
    const changed = React.useRef(false);
    const initialHide = React.useRef(!expanded);
    const transition = (ms) => `all ${ms}ms ease-in-out`;
    const myExpand = React.useCallback((nextExpanded) => {
        const node = ref.current;
        if (node) {
            if (!changed.current) {
                node.style.transition = transition(actualMs);
            }
            if (nextExpanded === myExpanded)
                return;
            clearTimeout(timeoutRef.current);
            timeoutRef.current = undefined;
            setMyExpanded(nextExpanded);
            const getHeight = () => node.getBoundingClientRect().height;
            const start = getHeight();
            node.style.maxHeight = '';
            const full = getHeight();
            const end = nextExpanded ? full : 0;
            node.style.maxHeight = `${start}px`;
            node.getBoundingClientRect();
            const percentageOfFullAnimation = Math.abs(end - start) / full;
            const timeout = (actualMs ?? 2000) * percentageOfFullAnimation;
            node.style.transition = transition(timeout);
            node.style.maxHeight = `${end}px`;
            timeoutRef.current = setTimeout(() => {
                changed.current = true;
                timeoutRef.current = undefined;
                if (nextExpanded)
                    node.style.maxHeight = '';
            }, timeout);
        }
    }, [actualMs, myExpanded]);
    React.useEffect(() => {
        if (previousExpanded !== expanded)
            myExpand(expanded);
    }, [previousExpanded, expanded, myExpand]);
    const style = { overflow: 'hidden' };
    if (initialHide.current)
        style.maxHeight = '0';
    return React.createElement("div", { style: style, ref: ref, children: children });
};
