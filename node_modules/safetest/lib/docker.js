"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.startDocker = exports.buildDocker = exports.stopDocker = void 0;
const fs_1 = require("fs");
const os_1 = require("os");
const path_1 = require("path");
const child_process_1 = __importDefault(require("child_process"));
const state_1 = require("./state");
const lodash_1 = require("lodash");
const DOCKER_DEBUG_PORT = 9222;
const DOCKER_SERVER_PORT = 2222;
const spawn = (command, args, resolveOnOutput) => {
    return new Promise((resolve) => {
        const spawned = child_process_1.default.spawn(command, args, {
            stdio: ['ignore', 'pipe', 'inherit'],
        });
        let stdout = '';
        spawned.stdout.on('data', (data) => {
            stdout += data;
            process.stdout.write(data);
            if (resolveOnOutput)
                resolve({ stdout, exitCode: null });
        });
        spawned.on('close', (exitCode) => {
            resolve({ stdout, exitCode });
        });
    });
};
const playwrightVersion = require('playwright/package.json').version;
let GUID = Math.random().toString(36).substring(2, 15);
let imageName = `safetest-image-${playwrightVersion}-${GUID}`;
let containerName = `safetest-server-${playwrightVersion}-${GUID}`;
const stopDocker = async () => {
    spawn('docker', ['stop', containerName]);
    // In case another test wants to start up docker.
    GUID = Math.random().toString(36).substring(2, 15);
    imageName = `safetest-image-${playwrightVersion}-${GUID}`;
    containerName = `safetest-server-${playwrightVersion}-${GUID}`;
};
exports.stopDocker = stopDocker;
const buildDocker = async () => {
    const { exitCode } = await spawn('docker', [
        'ps',
        '--format',
        '{{.ID}} {{.Names}} ',
    ]);
    if (exitCode) {
        const notFound = exitCode === 127;
        const message = notFound ? 'Docker not found' : `Docker error: ${exitCode}`;
        throw new Error(message);
    }
    const dir = (0, fs_1.mkdtempSync)((0, path_1.join)((0, os_1.tmpdir)(), 'safetest-docker-'));
    const DOCKERFILE = `
    FROM mcr.microsoft.com/playwright:v${playwrightVersion}-focal

    WORKDIR /ms-playwright

    RUN npm init -y
    RUN npm install playwright@${playwrightVersion}
    COPY index.mjs .
    EXPOSE ${DOCKER_SERVER_PORT}
    EXPOSE ${DOCKER_DEBUG_PORT}

    CMD ["node", "index.mjs"]
    `;
    (0, fs_1.writeFileSync)((0, path_1.join)(dir, 'Dockerfile'), DOCKERFILE);
    (0, fs_1.writeFileSync)((0, path_1.join)(dir, 'index.mjs'), `
    import { chromium } from 'playwright';

    const options = JSON.parse(process.argv[2]);
    const launchArgs = {
      args: ['--remote-debugging-port=${DOCKER_DEBUG_PORT}', '--remote-debugging-address=0.0.0.0', '--remote-allow-origins=*'],
    }

    if (options.args) launchArgs.args.push(...options.args);
    if (options.ignoreDefaultArgs) launchArgs.ignoreDefaultArgs = options.ignoreDefaultArgs;

    const server = await chromium.launchServer({
      port: ${DOCKER_SERVER_PORT},
      ...launchArgs,
    });

    // Exit the docker container if no pages are open for 1 hour (perhaps zombie server).
    let ticksWithoutPages = 0;
    setInterval(async () => {
      try {
        const response = await fetch('http://127.0.0.1:${DOCKER_DEBUG_PORT}/json/list');
        const json = await response.json();
        if (json.length === 0) ticksWithoutPages++;
        else ticksWithoutPages = 0;
        if (ticksWithoutPages > 3600) process.exit();
      } catch {}
    }, 1000);

    console.log(server.wsEndpoint());
  `);
    await spawn('docker', ['build', '--progress=plain', '-t', imageName, dir]);
};
exports.buildDocker = buildDocker;
const startDocker = async (options) => {
    await (0, exports.buildDocker)();
    await spawn('docker', [
        'run',
        '--rm',
        '--name',
        containerName,
        '--publish-all=true',
        imageName,
        'node',
        'index.mjs',
        JSON.stringify((0, lodash_1.pick)(options, ['args', 'ignoreDefaultArgs'])),
    ], true);
    const ports = await getPorts();
    return { ports };
};
exports.startDocker = startDocker;
const getPorts = async () => {
    const { stdout } = await spawn('docker', ['port', containerName]);
    const mappings = Object.fromEntries(stdout
        .split('\n')
        .filter(Boolean)
        .map((l) => [/^\d+/.exec(l), /\d+$/.exec(l)?.[0]]));
    const serverPort = Number(mappings[DOCKER_SERVER_PORT]);
    const debugPort = Number(mappings[DOCKER_DEBUG_PORT]);
    state_1.state.debugPort = debugPort;
    return { SERVER_PORT: serverPort, DEBUG_PORT: debugPort };
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZG9ja2VyLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vc3JjL2RvY2tlci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7QUFBQSwyQkFBZ0Q7QUFDaEQsMkJBQTRCO0FBQzVCLCtCQUE0QjtBQUM1QixrRUFBK0I7QUFDL0IsbUNBQWdDO0FBRWhDLG1DQUE4QjtBQUU5QixNQUFNLGlCQUFpQixHQUFHLElBQUksQ0FBQztBQUMvQixNQUFNLGtCQUFrQixHQUFHLElBQUksQ0FBQztBQUVoQyxNQUFNLEtBQUssR0FBRyxDQUFDLE9BQWUsRUFBRSxJQUFjLEVBQUUsZUFBeUIsRUFBRSxFQUFFO0lBQzNFLE9BQU8sSUFBSSxPQUFPLENBQThDLENBQUMsT0FBTyxFQUFFLEVBQUU7UUFDMUUsTUFBTSxPQUFPLEdBQUcsdUJBQUUsQ0FBQyxLQUFLLENBQUMsT0FBTyxFQUFFLElBQUksRUFBRTtZQUN0QyxLQUFLLEVBQUUsQ0FBQyxRQUFRLEVBQUUsTUFBTSxFQUFFLFNBQVMsQ0FBQztTQUNyQyxDQUFDLENBQUM7UUFDSCxJQUFJLE1BQU0sR0FBRyxFQUFFLENBQUM7UUFDaEIsT0FBTyxDQUFDLE1BQU0sQ0FBQyxFQUFFLENBQUMsTUFBTSxFQUFFLENBQUMsSUFBSSxFQUFFLEVBQUU7WUFDakMsTUFBTSxJQUFJLElBQUksQ0FBQztZQUNmLE9BQU8sQ0FBQyxNQUFNLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxDQUFDO1lBQzNCLElBQUksZUFBZTtnQkFBRSxPQUFPLENBQUMsRUFBRSxNQUFNLEVBQUUsUUFBUSxFQUFFLElBQUksRUFBRSxDQUFDLENBQUM7UUFDM0QsQ0FBQyxDQUFDLENBQUM7UUFFSCxPQUFPLENBQUMsRUFBRSxDQUFDLE9BQU8sRUFBRSxDQUFDLFFBQVEsRUFBRSxFQUFFO1lBQy9CLE9BQU8sQ0FBQyxFQUFFLE1BQU0sRUFBRSxRQUFRLEVBQUUsQ0FBQyxDQUFDO1FBQ2hDLENBQUMsQ0FBQyxDQUFDO0lBQ0wsQ0FBQyxDQUFD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