"use strict";
// Copied  and modified to work here from https://github.com/microsoft/playwright/blob/main/packages/playwright-test/src/matchers/matchers.ts
Object.defineProperty(exports, "__esModule", { value: true });
exports.toBeOK = exports.toHaveURL = exports.toHaveTitle = exports.toHaveValues = exports.toHaveValue = exports.toHaveText = exports.toHaveJSProperty = exports.toHaveId = exports.toHaveCSS = exports.toHaveCount = exports.toHaveClass = exports.toHaveAttribute = exports.toContainText = exports.toBeInViewport = exports.toBeVisible = exports.toBeHidden = exports.toBeFocused = exports.toBeEnabled = exports.toBeEmpty = exports.toBeEditable = exports.toBeDisabled = exports.toBeChecked = exports.toBeAttached = void 0;
async function toBeTruthy(matcherName, receiver, receiverType, query, options = {}) {
    const { matches, log, timedOut } = await query(!!this.isNot, options.timeout);
    const message = () => '';
    return { message, pass: matches };
}
async function toEqual(matcherName, receiver, receiverType, query, expected, options = {}) {
    const timeout = undefined;
    const { matches: pass, received, log, timedOut, } = await query(!!this.isNot, timeout);
    const message = () => '';
    return { actual: received, expected, message, name: matcherName, pass };
}
const isString = (value) => typeof value === 'string';
const isRegExp = (value) => value instanceof RegExp;
async function toMatchText(matcherName, receiver, receiverType, query, expected, options = {}) {
    const matcherOptions = {
        isNot: this.isNot,
        promise: this.promise,
    };
    if (!(typeof expected === 'string') &&
        !(expected && typeof expected.test === 'function')) {
        throw new Error('value must be a string or regular expression');
    }
    const timeout = undefined;
    const { matches: pass, received, log, timedOut, } = await query(!!this.isNot, timeout);
    const stringSubstring = options.matchSubstring ? 'substring' : 'string';
    const receivedString = received || '';
    const message = () => {
        const labelExpected = `Expected ${typeof expected === 'string' ? stringSubstring : 'pattern'}`;
        const labelReceived = 'Received string';
        const maxPad = Math.max(labelExpected.length, labelReceived.length);
        return (`\n` +
            `${labelExpected.padEnd(maxPad)} : ${expected}\n` +
            `${labelReceived.padEnd(maxPad)} : ${receivedString}\n`);
    };
    return { message, pass };
}
function toExpectedTextValues(items, options = {}) {
    return items.map((i) => ({
        string: isString(i) ? i : undefined,
        regexSource: isRegExp(i) ? i.source : undefined,
        regexFlags: isRegExp(i) ? i.flags : undefined,
        matchSubstring: options.matchSubstring,
        ignoreCase: options.ignoreCase,
        normalizeWhiteSpace: options.normalizeWhiteSpace,
    }));
}
function toBeAttached(locator, options) {
    return toBeTruthy.call(this, 'toBeAttached', locator, 'Locator', async (isNot, timeout) => {
        const attached = !options || options.attached === undefined || options.attached === true;
        return await locator._expect(attached ? 'to.be.attached' : 'to.be.detached', { isNot, timeout });
    }, options);
}
exports.toBeAttached = toBeAttached;
function toBeChecked(locator, options) {
    return toBeTruthy.call(this, 'toBeChecked', locator, 'Locator', async (isNot, timeout) => {
        const checked = !options || options.checked === undefined || options.checked === true;
        return await locator._expect(checked ? 'to.be.checked' : 'to.be.unchecked', { isNot, timeout });
    }, options);
}
exports.toBeChecked = toBeChecked;
function toBeDisabled(locator, options) {
    return toBeTruthy.call(this, 'toBeDisabled', locator, 'Locator', async (isNot, timeout) => {
        return await locator._expect('to.be.disabled', { isNot, timeout });
    }, options);
}
exports.toBeDisabled = toBeDisabled;
function toBeEditable(locator, options) {
    return toBeTruthy.call(this, 'toBeEditable', locator, 'Locator', async (isNot, timeout) => {
        const editable = !options || options.editable === undefined || options.editable === true;
        return await locator._expect(editable ? 'to.be.editable' : 'to.be.readonly', { isNot, timeout });
    }, options);
}
exports.toBeEditable = toBeEditable;
function toBeEmpty(locator, options) {
    return toBeTruthy.call(this, 'toBeEmpty', locator, 'Locator', async (isNot, timeout) => {
        return await locator._expect('to.be.empty', { isNot, timeout });
    }, options);
}
exports.toBeEmpty = toBeEmpty;
function toBeEnabled(locator, options) {
    return toBeTruthy.call(this, 'toBeEnabled', locator, 'Locator', async (isNot, timeout) => {
        const enabled = !options || options.enabled === undefined || options.enabled === true;
        return await locator._expect(enabled ? 'to.be.enabled' : 'to.be.disabled', { isNot, timeout });
    }, options);
}
exports.toBeEnabled = toBeEnabled;
function toBeFocused(locator, options) {
    return toBeTruthy.call(this, 'toBeFocused', locator, 'Locator', async (isNot, timeout) => {
        return await locator._expect('to.be.focused', { isNot, timeout });
    }, options);
}
exports.toBeFocused = toBeFocused;
function toBeHidden(locator, options) {
    return toBeTruthy.call(this, 'toBeHidden', locator, 'Locator', async (isNot, timeout) => {
        return await locator._expect('to.be.hidden', { isNot, timeout });
    }, options);
}
exports.toBeHidden = toBeHidden;
function toBeVisible(locator, options) {
    return toBeTruthy.call(this, 'toBeVisible', locator, 'Locator', async (isNot, timeout) => {
        const visible = !options || options.visible === undefined || options.visible === true;
        return await locator._expect(visible ? 'to.be.visible' : 'to.be.hidden', {
            isNot,
            timeout,
        });
    }, options);
}
exports.toBeVisible = toBeVisible;
function toBeInViewport(locator, options) {
    return toBeTruthy.call(this, 'toBeInViewport', locator, 'Locator', async (isNot, timeout) => {
        return await locator._expect('to.be.in.viewport', {
            isNot,
            expectedNumber: options?.ratio,
            timeout,
        });
    }, options);
}
exports.toBeInViewport = toBeInViewport;
function toContainText(locator, expected, options = {}) {
    if (Array.isArray(expected)) {
        return toEqual.call(this, 'toContainText', locator, 'Locator', async (isNot, timeout) => {
            const expectedText = toExpectedTextValues(expected, {
                matchSubstring: true,
                normalizeWhiteSpace: true,
                ignoreCase: !!options.ignoreCase,
            });
            return await locator._expect('to.contain.text.array', {
                expectedText,
                isNot,
                useInnerText: options.useInnerText,
                timeout,
            });
        }, expected, { ...options, contains: true });
    }
    else {
        return toMatchText.call(this, 'toContainText', locator, 'Locator', async (isNot, timeout) => {
            const expectedText = toExpectedTextValues([expected], {
                matchSubstring: true,
                normalizeWhiteSpace: true,
                ignoreCase: !!options.ignoreCase,
            });
            return await locator._expect('to.have.text', {
                expectedText,
                isNot,
                useInnerText: options.useInnerText,
                timeout,
            });
        }, expected, options);
    }
}
exports.toContainText = toContainText;
function toHaveAttribute(locator, name, expected, options) {
    return toMatchText.call(this, 'toHaveAttribute', locator, 'Locator', async (isNot, timeout) => {
        const expectedText = toExpectedTextValues([expected]);
        return await locator._expect('to.have.attribute', {
            expressionArg: name,
            expectedText,
            isNot,
            timeout,
        });
    }, expected, options);
}
exports.toHaveAttribute = toHaveAttribute;
function toHaveClass(locator, expected, options) {
    if (Array.isArray(expected)) {
        return toEqual.call(this, 'toHaveClass', locator, 'Locator', async (isNot, timeout) => {
            const expectedText = toExpectedTextValues(expected);
            return await locator._expect('to.have.class.array', {
                expectedText,
                isNot,
                timeout,
            });
        }, expected, options);
    }
    else {
        return toMatchText.call(this, 'toHaveClass', locator, 'Locator', async (isNot, timeout) => {
            const expectedText = toExpectedTextValues([expected]);
            return await locator._expect('to.have.class', {
                expectedText,
                isNot,
                timeout,
            });
        }, expected, options);
    }
}
exports.toHaveClass = toHaveClass;
function toHaveCount(locator, expected, options) {
    return toEqual.call(this, 'toHaveCount', locator, 'Locator', async (isNot, timeout) => {
        return await locator._expect('to.have.count', {
            expectedNumber: expected,
            isNot,
            timeout,
        });
    }, expected, options);
}
exports.toHaveCount = toHaveCount;
function toHaveCSS(locator, name, expected, options) {
    return toMatchText.call(this, 'toHaveCSS', locator, 'Locator', async (isNot, timeout) => {
        const expectedText = toExpectedTextValues([expected]);
        return await locator._expect('to.have.css', {
            expressionArg: name,
            expectedText,
            isNot,
            timeout,
        });
    }, expected, options);
}
exports.toHaveCSS = toHaveCSS;
function toHaveId(locator, expected, options) {
    return toMatchText.call(this, 'toHaveId', locator, 'Locator', async (isNot, timeout) => {
        const expectedText = toExpectedTextValues([expected]);
        return await locator._expect('to.have.id', {
            expectedText,
            isNot,
            timeout,
        });
    }, expected, options);
}
exports.toHaveId = toHaveId;
function toHaveJSProperty(locator, name, expected, options) {
    return toEqual.call(this, 'toHaveJSProperty', locator, 'Locator', async (isNot, timeout) => {
        return await locator._expect('to.have.property', {
            expressionArg: name,
            expectedValue: expected,
            isNot,
            timeout,
        });
    }, expected, options);
}
exports.toHaveJSProperty = toHaveJSProperty;
function toHaveText(locator, expected, options = {}) {
    if (Array.isArray(expected)) {
        return toEqual.call(this, 'toHaveText', locator, 'Locator', async (isNot, timeout) => {
            const expectedText = toExpectedTextValues(expected, {
                normalizeWhiteSpace: true,
                ignoreCase: !!options.ignoreCase,
            });
            return await locator._expect('to.have.text.array', {
                expectedText,
                isNot,
                useInnerText: options?.useInnerText,
                timeout,
            });
        }, expected, options);
    }
    else {
        return toMatchText.call(this, 'toHaveText', locator, 'Locator', async (isNot, timeout) => {
            const expectedText = toExpectedTextValues([expected], {
                normalizeWhiteSpace: true,
                ignoreCase: !!options.ignoreCase,
            });
            return await locator._expect('to.have.text', {
                expectedText,
                isNot,
                useInnerText: options?.useInnerText,
                timeout,
            });
        }, expected, options);
    }
}
exports.toHaveText = toHaveText;
function toHaveValue(locator, expected, options) {
    return toMatchText.call(this, 'toHaveValue', locator, 'Locator', async (isNot, timeout) => {
        const expectedText = toExpectedTextValues([expected]);
        return await locator._expect('to.have.value', {
            expectedText,
            isNot,
            timeout,
        });
    }, expected, options);
}
exports.toHaveValue = toHaveValue;
function toHaveValues(locator, expected, options) {
    return toEqual.call(this, 'toHaveValues', locator, 'Locator', async (isNot, timeout) => {
        const expectedText = toExpectedTextValues(expected);
        return await locator._expect('to.have.values', {
            expectedText,
            isNot,
            timeout,
        });
    }, expected, options);
}
exports.toHaveValues = toHaveValues;
function toHaveTitle(page, expected, options = {}) {
    const locator = page.locator(':root');
    return toMatchText.call(this, 'toHaveTitle', locator, 'Locator', async (isNot, timeout) => {
        const expectedText = toExpectedTextValues([expected], {
            normalizeWhiteSpace: true,
        });
        return await locator._expect('to.have.title', {
            expectedText,
            isNot,
            timeout,
        });
    }, expected, options);
}
exports.toHaveTitle = toHaveTitle;
function toHaveURL(page, expected, options) {
    const baseURL = page.context()._options.baseURL;
    expected =
        typeof expected === 'string' ? `${new URL(baseURL, expected)}` : expected;
    const locator = page.locator(':root');
    return toMatchText.call(this, 'toHaveURL', locator, 'Locator', async (isNot, timeout) => {
        const expectedText = toExpectedTextValues([expected]);
        return await locator._expect('to.have.url', {
            expectedText,
            isNot,
            timeout,
        });
    }, expected, options);
}
exports.toHaveURL = toHaveURL;
function isTextualMimeType(mimeType) {
    return !!mimeType.match(/^(text\/.*?|application\/(json|(x-)?javascript|xml.*?|ecmascript|graphql|x-www-form-urlencoded)|image\/svg(\+xml)?|application\/.*?(\+json|\+xml))(;\s*charset=.*)?$/);
}
async function toBeOK(response) {
    const contentType = response.headers()['content-type'];
    const isTextEncoding = contentType && isTextualMimeType(contentType);
    const [log, text] = this.isNot === response.ok()
        ? await Promise.all([
            response._fetchLog(),
            isTextEncoding ? response.text() : null,
        ])
        : [];
    const message = () => '';
    const pass = response.ok();
    return { message, pass };
}
exports.toBeOK = toBeOK;
//# sourceMappingURL=data:application/json;base64,