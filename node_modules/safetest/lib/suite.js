import React from 'react';
import { ComponentsContext, StateContext } from './report';
export const SuiteStatuses = ({ suite, }) => {
    const { Chip } = React.useContext(ComponentsContext);
    const statuses = getStatusesCount(suite);
    return (React.createElement("div", { style: { display: 'inline-flex', alignItems: 'center' } }, getStatusesText(statuses).map((label) => (React.createElement(Chip, { key: label, label: label })))));
};
const getStatusesText = (statuses) => Object.entries(statuses).map(([status, count]) => {
    return `${count > 1 ? `${count}x ` : ''}${statusMap[status]}`;
});
const getTestStatuses = (tests, statuses = {}) => {
    for (const test of tests) {
        const status = test.status;
        statuses[status] = (statuses[status] || 0) + 1;
    }
    return getStatusesText(statuses);
};
const getStatusesCount = (suite, statuses = {}) => {
    const suites = Object.values(suite.suites);
    const tests = Object.values(suite.tests);
    for (const test of tests) {
        const status = test.status;
        statuses[status] = (statuses[status] || 0) + 1;
    }
    for (const suite of suites) {
        getStatusesCount(suite, statuses);
    }
    return statuses;
};
export const statusMap = {
    passed: '✅',
    failed: '❌',
    pending: '⏱',
    skipped: '⏭',
    todo: '📝',
    disabled: '🚫',
    empty: '📭',
};
const showSuite = (suite, showing) => {
    const counts = getStatusesCount(suite);
    if (showing !== 'all' && !counts[showing]) {
        return false;
    }
    return true;
};
export const Suite = ({ suite }) => {
    const { Accordion, Label, Test } = React.useContext(ComponentsContext);
    const suites = Object.values(suite.suites);
    const tests = Object.values(suite.tests);
    const showing = React.useContext(StateContext).viewing;
    if (!showSuite(suite, showing))
        return null;
    return (React.createElement(React.Fragment, null,
        suites
            .filter((subSuite) => showSuite(subSuite, showing))
            .map((subSuite) => (React.createElement(Accordion, { defaultOpen: true, key: subSuite.name, summary: React.createElement(React.Fragment, null,
                React.createElement(Label, null, "Suite"),
                " ",
                React.createElement(SuiteStatuses, { suite: subSuite }),
                subSuite.name) },
            React.createElement(Suite, { key: subSuite.id, suite: subSuite })))),
        tests.length > 0 && (React.createElement(Accordion, { defaultOpen: true, summary: React.createElement(Label, null,
                getTestStatuses(tests),
                " Tests") }, tests
            .filter((t) => (showing === 'all' ? true : t.status === showing))
            .map((test) => (React.createElement(Test, { key: test.id, test: test })))))));
};
