#! /usr/bin/env node
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const commander_1 = require("commander");
const docker_1 = require("./docker");
const glob_1 = require("glob");
const path_1 = require("path");
const artifacts_1 = require("./artifacts");
const pkg = require('../package.json');
const program = new commander_1.Command();
program
    .name('safetest')
    .description('CLI helpers for safetest')
    .version(pkg.version);
program
    .command('cache-build-docker')
    .description('Builds the safetest docker image so that it will be cached when running tests')
    .action(docker_1.buildDocker);
program
    .command('generate-import-map')
    .description('Generates the import map for safetest spec files for build systems without globbing support')
    .argument('<bootstrappedAt>', 'source file that safetest is bootstrapped at')
    .argument('<folder>', 'folder to search for spec files')
    .argument('[glob]', 'glob to use for searching for spec files', '**/*.safetest.{j,t}s{,x}')
    .action(async (bootstrappedAt, folder, glob) => {
    const relativeBootstrappedAt = (0, path_1.resolve)(process.cwd(), bootstrappedAt);
    const bootstrappedDir = (0, path_1.dirname)(relativeBootstrappedAt);
    const files = (0, glob_1.sync)(glob, { cwd: folder, absolute: true });
    let imports = 'export const imports = {\n';
    for (const file of files) {
        const relativeFile = (0, path_1.relative)(bootstrappedDir, file);
        let name = `${relativeFile.replace(/\.m?[tj]sx?/, '')}`;
        if (!name.startsWith('.'))
            name = `./${name}`;
        imports += `  '${name}': () => import('${name}'),\n`;
    }
    imports += '};\n';
    console.log(imports);
});
program
    .command('add-artifact-info')
    .description('Adds artifact info to a json results file')
    .argument('<artifactsJson>', 'json source you want to add to destination')
    .argument('<resultsJson>', 'existing json results file to add to')
    .action(async (artifactsJson, resultsJson) => {
    const artifacts = require((0, path_1.resolve)(artifactsJson));
    (0, artifacts_1.mergeArtifacts)(artifacts.bootstrappedAt, artifacts.cwd, artifacts.artifacts, resultsJson);
    // Object.assign(existing, artifacts);
    // await writeFile(results, JSON.stringify(results, null, 2));
});
program.parse();
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY2xpLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vc3JjL2NsaS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7QUFFQSx5Q0FBb0M7QUFDcEMscUNBQXVDO0FBQ3ZDLCtCQUE0QjtBQUM1QiwrQkFBa0Q7QUFDbEQsMkNBQTZDO0FBRTdDLE1BQU0sR0FBRyxHQUFHLE9BQU8sQ0FBQyxpQkFBaUIsQ0FBQyxDQUFDO0FBRXZDLE1BQU0sT0FBTyxHQUFHLElBQUksbUJBQU8sRUFBRSxDQUFDO0FBRTlCLE9BQU87S0FDSixJQUFJLENBQUMsVUFBVSxDQUFDO0tBQ2hCLFdBQVcsQ0FBQywwQkFBMEIsQ0FBQztLQUN2QyxPQUFPLENBQUMsR0FBRyxDQUFDLE9BQU8sQ0FBQyxDQUFDO0FBRXhCLE9BQU87S0FDSixPQUFPLENBQUMsb0JBQW9CLENBQUM7S0FDN0IsV0FBVyxDQUNWLCtFQUErRSxDQUNoRjtLQUNBLE1BQU0sQ0FBQyxvQkFBVyxDQUFDLENBQUM7QUFFdkIsT0FBTztLQUNKLE9BQU8sQ0FBQyxxQkFBcUIsQ0FBQztLQUM5QixXQUFXLENBQ1YsNkZBQTZGLENBQzlGO0tBQ0EsUUFBUSxDQUFDLGtCQUFrQixFQUFFLDhDQUE4QyxDQUFDO0tBQzVFLFFBQVEsQ0FBQyxVQUFVLEVBQUUsaUNBQWlDLENBQUM7S0FDdkQsUUFBUSxDQUNQLFFBQVEsRUFDUiwwQ0FBMEMsRUFDMUMsMEJBQTBCLENBQzNCO0tBQ0EsTUFBTSxDQUFDLEtBQUssRUFBRSxjQUFjLEVBQUUsTUFBTSxFQUFFLElBQUksRUFBRSxFQUFFO0lBQzdDLE1BQU0sc0JBQXNCLEdBQUcsSUFBQSxjQUFPLEVBQUMsT0FBTyxDQUFDLEdBQUcsRUFBRSxFQUFFLGNBQWMsQ0FBQyxDQUFDO0lBQ3RFLE1BQU0sZUFBZSxHQUFHLElBQUEsY0FBTyxFQUFDLHNCQUFzQixDQUFDLENBQUM7SUFDeEQsTUFBTSxLQUFLLEdBQUcsSUFBQSxXQUFJLEVBQUMsSUFBSSxFQUFFLEVBQUUsR0FBRyxFQUFFLE1BQU0sRUFBRSxRQUFRLEVBQUUsSUFBSSxFQUFFLENBQUMsQ0FBQztJQUUxRCxJQUFJLE9BQU8sR0FBRyw0QkFBNEIsQ0FBQztJQUMzQyxLQUFLLE1BQU0sSUFBSSxJQUFJLEtBQUssRUFBRTtRQUN4QixNQUFNLFlBQVksR0FBRyxJQUFBLGVBQVEsRUFBQyxlQUFlLEVBQUUsSUFBSSxDQUFDLENBQUM7UUFDckQsSUFBSSxJQUFJLEdBQUcsR0FBRyxZQUFZLENBQUMsT0FBTyxDQUFDLGFBQWEsRUFBRSxFQUFFLENBQUMsRUFBRSxDQUFDO1FBQ3hELElBQUksQ0FBQyxJQUFJLENBQUMsVUFBVSxDQUFDLEdBQUcsQ0FBQztZQUFFLElBQUksR0FBRyxLQUFLLElBQUksRUFBRSxDQUFDO1FBQzlDLE9BQU8sSUFBSSxNQUFNLElBQUksb0JBQW9CLElBQUksT0FBTyxDQUFDO0tBQ3REO0lBQ0QsT0FBTyxJQUFJLE1BQU0sQ0FBQztJQUNsQixPQUFPLENBQUMsR0FBRyxDQUFDLE9BQU8sQ0FBQyxDQUFDO0FBQ3ZCLENBQUMsQ0FBQyxDQUFDO0FBRUwsT0FBTztLQUNKLE9BQU8sQ0FBQyxtQkFBbUIsQ0FBQztLQUM1QixXQUFXLENBQUMsMkNBQTJDLENBQUM7S0FDeEQsUUFBUSxDQUFDLGlCQUFpQixFQUFFLDRDQUE0QyxDQUFDO0tBQ3pFLFFBQVEsQ0FBQyxlQUFlLEVBQUUsc0NBQXNDLENBQUM7S0FDakUsTUFBTSxDQUFDLEtBQUssRUFBRSxhQUFhLEVBQUUsV0FBVyxFQUFFLEVBQUU7SUFDM0MsTUFBTSxTQUFTLEdBQUcsT0FBTyxDQUFDLElBQUEsY0FBTyxFQUFDLGFBQWEsQ0FBQyxDQUFDLENBQUM7SUFDbEQsSUFBQSwwQkFBYyxFQUNaLFNBQVMsQ0FBQyxjQUFjLEVBQ3hCLFNBQVMsQ0FBQyxHQUFHLEVBQ2IsU0FBUyxDQUFDLFNBQVMsRUFDbkIsV0FBVyxDQUNaLENBQUM7SUFDRixzQ0FBc0M7SUFFdEMsOERBQThEO0FBQ2hFLENBQUMsQ0FBQyxDQUFDO0FBRUwsT0FBTyxDQUFDLEtBQUssRUFBRSxDQUFDIn0=