"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Bootstrap = exports.bootstrap = exports.render = void 0;
const render_1 = require("./render");
const bootstrap_1 = require("./bootstrap");
const state_1 = require("./state");
const is_in_node_1 = require("./is-in-node");
let renderFn;
const assertAndRender = (element) => {
    if (!renderFn) {
        throw new Error('App is not bootstrapped, did you forget to call `bootstrap({ /* ... */ })`?');
    }
    return renderFn(element);
};
async function render(elementToRender = state_1.state.browserState
    ?.renderElement.value, options = {}) {
    let functionToRender = () => null;
    if (!is_in_node_1.isInNode) {
        functionToRender = () => elementToRender(state_1.state.browserState?.renderElement.value);
    }
    return (0, render_1.render)({ __isRenderable: true, thing: functionToRender }, options, async (e) => {
        const rendered = assertAndRender(e.thing);
        await new Promise((r) => setTimeout(r, 0));
        return rendered;
    });
}
exports.render = render;
const bootstrap = async (args) => {
    renderFn = args.render;
    state_1.state.browserState = {
        retryAttempt: 0,
        renderElement: { __type: 'renderElement', value: args.element },
    };
    return (0, bootstrap_1.bootstrap)({
        ...args,
        defaultRender: () => {
            return assertAndRender(args.element);
        },
    });
};
exports.bootstrap = bootstrap;
const Bootstrap = (props) => {
    const Solid = props.Solid;
    const initial = () => props.loading ?? props.children;
    const [child, setChild] = Solid.createSignal(initial);
    Solid.createRenderEffect(() => {
        (0, exports.bootstrap)({
            ...props,
            element: () => props.children,
            render: (element) => setChild(() => element),
        });
    });
    return Solid.createMemo(() => child() ?? props.children);
};
exports.Bootstrap = Bootstrap;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic29saWQuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi9zcmMvc29saWQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7O0FBQUEscUNBQWlFO0FBQ2pFLDJDQUFxRTtBQUNyRSxtQ0FBZ0M7QUFDaEMsNkNBQXdDO0FBSXhDLElBQUksUUFBNkMsQ0FBQztBQUNsRCxNQUFNLGVBQWUsR0FBRyxDQUFDLE9BQXlCLEVBQUUsRUFBRTtJQUNwRCxJQUFJLENBQUMsUUFBUSxFQUFFO1FBQ2IsTUFBTSxJQUFJLEtBQUssQ0FDYiw2RUFBNkUsQ0FDOUUsQ0FBQztLQUNIO0lBQ0QsT0FBTyxRQUFRLENBQUMsT0FBTyxDQUFDLENBQUM7QUFDM0IsQ0FBQyxDQUFDO0FBRUssS0FBSyxVQUFVLE1BQU0sQ0FDMUIsa0JBQW1ELGFBQUssQ0FBQyxZQUFZO0lBQ25FLEVBQUUsYUFBYSxDQUFDLEtBQUssRUFDdkIsVUFBeUIsRUFBRTtJQUUzQixJQUFJLGdCQUFnQixHQUFxQixHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUM7SUFDcEQsSUFBSSxDQUFDLHFCQUFRLEVBQUU7UUFDYixnQkFBZ0IsR0FBRyxHQUFHLEVBQUUsQ0FDdEIsZUFBZSxDQUFDLGFBQUssQ0FBQyxZQUFZLEVBQUUsYUFBYSxDQUFDLEtBQUssQ0FBQyxDQUFDO0tBQzVEO0lBRUQsT0FBTyxJQUFBLGVBQVksRUFDakIsRUFBRSxjQUFjLEVBQUUsSUFBSSxFQUFFLEtBQUssRUFBRSxnQkFBZ0IsRUFBRSxFQUNqRCxPQUFPLEVBQ1AsS0FBSyxFQUFFLENBQUMsRUFBRSxFQUFFO1FBQ1YsTUFBTSxRQUFRLEdBQUcsZUFBZSxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUMsQ0FBQztRQUMxQyxNQUFNLElBQUksT0FBTyxDQUFDLENBQUMsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxVQUFVLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFDM0MsT0FBTyxRQUFRLENBQUM7SUFDbEIsQ0FBQyxDQUNGLENBQUM7QUFDSixDQUFDO0FBcEJELHdCQW9CQztBQU9NLE1BQU0sU0FBUyxHQUFHLEtBQUssRUFBRSxJQUFtQixFQUFpQixFQUFFO0lBQ3BFLFFBQVEsR0FBRyxJQUFJLENBQUMsTUFBTSxDQUFDO0lBQ3ZCLGFBQUssQ0FBQyxZQUFZLEdBQUc7UUFDbkIsWUFBWSxFQUFFLENBQUM7UUFDZixhQUFhLEVBQUUsRUFBRSxNQUFNLEVBQUUsZUFBZSxFQUFFLEtBQUssRUFBRSxJQUFJLENBQUMsT0FBTyxFQUFFO0tBQ2hFLENBQUM7SUFFRixPQUFPLElBQUEscUJBQWUsRUFBQztRQUNyQixHQUFHLElBQUk7UUFDUCxhQUFhLEVBQUUsR0FBRyxFQUFFO1lBQ2xCLE9BQU8sZUFBZSxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsQ0FBQztRQUN2QyxDQUFDO0tBQ0YsQ0FBQyxDQUFDO0FBQ0wsQ0FBQyxDQUFDO0FBYlcsUUFBQSxTQUFTLGFBYXBCO0FBRUssTUFBTSxTQUFTLEdBeUNsQixDQUFDLEtBQUssRUFBRSxFQUFFO0lBQ1osTUFBTSxLQUFLLEdBQUcsS0FBSyxDQUFDLEtBQUssQ0FBQztJQUMxQixNQUFNLE9BQU8sR0FBRyxHQUFHLEVBQUUsQ0FBQyxLQUFLLENBQUMsT0FBTyxJQUFJLEtBQUssQ0FBQyxRQUFRLENBQUM7SUFDdEQsTUFBTSxDQUFDLEtBQUssRUFBRSxRQUFRLENBQUMsR0FBRyxLQUFLLENBQUMsWUFBWSxDQUFZLE9BQU8sQ0FBQyxDQUFDO0lBQ2pFLEtBQUssQ0FBQyxrQkFBa0IsQ0FBQyxHQUFHLEVBQUU7UUFDNUIsSUFBQSxpQkFBUyxFQUFDO1lBQ1IsR0FBRyxLQUFLO1lBQ1IsT0FBTyxFQUFFLEdBQUcsRUFBRSxDQUFDLEtBQUssQ0FBQyxRQUFRO1lBQzdCLE1BQU0sRUFBRSxDQUFDLE9BQU8sRUFBRSxFQUFFLENBQUMsUUFBUSxDQUFDLEdBQUcsRUFBRSxDQUFDLE9BQU8sQ0FBQztTQUM3QyxDQUFDLENBQUM7SUFDTCxDQUFDLENBQUMsQ0FBQztJQUVILE9BQU8sS0FBSyxDQUFDLFVBQVUsQ0FDckIsR0FBRyxFQUFFLENBQUMsS0FBSyxFQUFFLElBQUksS0FBSyxDQUFDLFFBQVEsQ0FDUCxDQUFDO0FBQzdCLENBQUMsQ0FBQztBQXhEVyxRQUFBLFNBQVMsYUF3RHBCIn0=