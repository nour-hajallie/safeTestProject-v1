"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.createBlockFn = void 0;
/* eslint-disable @typescript-eslint/no-explicit-any */
const state_1 = require("./state");
const is_in_node_1 = require("./is-in-node");
const seen = state_1.state.seen;
const createId = (name, parent) => {
    const separator = parent ? ' ' : '';
    const concat = `${parent}${separator}${name}`;
    let candidate = concat;
    let index = 2;
    while (seen.has(candidate)) {
        candidate = `${concat} ${index++}`;
    }
    seen.add(candidate);
    return candidate;
};
const createBlockFn = (name, fn, 
/** Extra args to pass to the actual fn, like `it(_, _, timeout)` */
extraArgs, 
// eslint-disable-next-line @typescript-eslint/ban-types
actualThing, 
/** Is function `describe` which we always run or `it` which we don't run */
isDescribe) => {
    let key = '';
    const previousSuite = state_1.state.currentSuite;
    key = createId(name, state_1.state.currentSuite);
    if (!isDescribe)
        state_1.state.tests[key] = fn;
    if (is_in_node_1.isInNode) {
        if (!fn) {
            // `it.todo` does this
            actualThing(name);
        }
        else {
            actualThing(name, function (...args) {
                if (isDescribe) {
                    state_1.state.currentSuite = key;
                }
                else
                    state_1.state.activeTest = key;
                const exitTest = () => {
                    if (isDescribe) {
                        state_1.state.currentSuite = previousSuite;
                    }
                    else
                        delete state_1.state.activeTest;
                };
                const passed = (resolved) => {
                    state_1.state.passedTests.add(key);
                    exitTest();
                    return resolved;
                };
                const failed = (err) => {
                    exitTest();
                    throw err;
                };
                if (key in state_1.state.retryMap) {
                    state_1.state.retryMap[key]++;
                }
                else {
                    state_1.state.retryMap[key] = 0;
                }
                try {
                    const result = fn.call(this, ...args);
                    if (result && 'then' in result) {
                        return result.then(passed, failed);
                    }
                    return passed(result);
                }
                catch (error) {
                    return failed(error);
                }
            }, ...extraArgs);
        }
    }
    else {
        // In the browser
        if (isDescribe) {
            state_1.state.currentSuite = key;
            fn();
            state_1.state.currentSuite = previousSuite;
        }
    }
    return key;
};
exports.createBlockFn = createBlockFn;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYmxvY2tzLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vc3JjL2Jsb2Nrcy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7QUFBQSx1REFBdUQ7QUFDdkQsbUNBQWdDO0FBQ2hDLDZDQUF3QztBQUV4QyxNQUFNLElBQUksR0FBRyxhQUFLLENBQUMsSUFBSSxDQUFDO0FBQ3hCLE1BQU0sUUFBUSxHQUFHLENBQUMsSUFBWSxFQUFFLE1BQWMsRUFBRSxFQUFFO0lBQ2hELE1BQU0sU0FBUyxHQUFHLE1BQU0sQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUM7SUFDcEMsTUFBTSxNQUFNLEdBQUcsR0FBRyxNQUFNLEdBQUcsU0FBUyxHQUFHLElBQUksRUFBRSxDQUFDO0lBQzlDLElBQUksU0FBUyxHQUFHLE1BQU0sQ0FBQztJQUN2QixJQUFJLEtBQUssR0FBRyxDQUFDLENBQUM7SUFDZCxPQUFPLElBQUksQ0FBQyxHQUFHLENBQUMsU0FBUyxDQUFDLEVBQUU7UUFDMUIsU0FBUyxHQUFHLEdBQUcsTUFBTSxJQUFJLEtBQUssRUFBRSxFQUFFLENBQUM7S0FDcEM7SUFDRCxJQUFJLENBQUMsR0FBRyxDQUFDLFNBQVMsQ0FBQyxDQUFDO0lBQ3BCLE9BQU8sU0FBUyxDQUFDO0FBQ25CLENBQUMsQ0FBQztBQUVLLE1BQU0sYUFBYSxHQUFHLENBQzNCLElBQVksRUFDWixFQUFjO0FBQ2Qsb0VBQW9FO0FBQ3BFLFNBQWdCO0FBQ2hCLHdEQUF3RDtBQUN4RCxXQUFxQjtBQUNyQiw0RUFBNEU7QUFDNUUsVUFBbUIsRUFDWCxFQUFFO0lBQ1YsSUFBSSxHQUFHLEdBQUcsRUFBRSxDQUFDO0lBQ2IsTUFBTSxhQUFhLEdBQUcsYUFBSyxDQUFDLFlBQVksQ0FBQztJQUN6QyxHQUFHLEdBQUcsUUFBUSxDQUFDLElBQUksRUFBRSxhQUFLLENBQUMsWUFBWSxDQUFDLENBQUM7SUFFekMsSUFBSSxDQUFDLFVBQVU7UUFBRSxhQUFLLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxHQUFHLEVBQUUsQ0FBQztJQUN2QyxJQUFJLHFCQUFRLEVBQUU7UUFDWixJQUFJLENBQUMsRUFBRSxFQUFFO1lBQ1Asc0JBQXNCO1lBQ3RCLFdBQVcsQ0FBQyxJQUFJLENBQUMsQ0FBQztTQUNuQjthQUFNO1lBQ0wsV0FBVyxDQUNULElBQUksRUFDSixVQUFxQixHQUFHLElBQVc7Z0JBQ2pDLElBQUksVUFBVSxFQUFFO29CQUNkLGFBQUssQ0FBQyxZQUFZLEdBQUcsR0FBRyxDQUFDO2lCQUMxQjs7b0JBQU0sYUFBSyxDQUFDLFVBQVUsR0FBRyxHQUFHLENBQUM7Z0JBQzlCLE1BQU0sUUFBUSxHQUFHLEdBQUcsRUFBRTtvQkFDcEIsSUFBSSxVQUFVLEVBQUU7d0JBQ2QsYUFBSyxDQUFDLFlBQVksR0FBRyxhQUFhLENBQUM7cUJBQ3BDOzt3QkFBTSxPQUFPLGFBQUssQ0FBQyxVQUFVLENBQUM7Z0JBQ2pDLENBQUMsQ0FBQztnQkFDRixNQUFNLE1BQU0sR0FBRyxDQUFDLFFBQWEsRUFBRSxFQUFFO29CQUMvQixhQUFLLENBQUMsV0FBVyxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsQ0FBQztvQkFDM0IsUUFBUSxFQUFFLENBQUM7b0JBQ1gsT0FBTyxRQUFRLENBQUM7Z0JBQ2xCLENBQUMsQ0FBQztnQkFDRixNQUFNLE1BQU0sR0FBRyxDQUFDLEdBQVEsRUFBRSxFQUFFO29CQUMxQixRQUFRLEVBQUUsQ0FBQztvQkFDWCxNQUFNLEdBQUcsQ0FBQztnQkFDWixDQUFDLENBQUM7Z0JBRUYsSUFBSSxHQUFHLElBQUksYUFBSyxDQUFDLFFBQVEsRUFBRTtvQkFDekIsYUFBSyxDQUFDLFFBQVEsQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDO2lCQUN2QjtxQkFBTTtvQkFDTCxhQUFLLENBQUMsUUFBUSxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsQ0FBQztpQkFDekI7Z0JBQ0QsSUFBSTtvQkFDRixNQUFNLE1BQU0sR0FBSSxFQUFVLENBQUMsSUFBSSxDQUFDLElBQUksRUFBRSxHQUFHLElBQUksQ0FBQyxDQUFDO29CQUMvQyxJQUFJLE1BQU0sSUFBSSxNQUFNLElBQUksTUFBTSxFQUFFO3dCQUM5QixPQUFPLE1BQU0sQ0FBQyxJQUFJLENBQUMsTUFBTSxFQUFFLE1BQU0sQ0FBQyxDQUFDO3FCQUNwQztvQkFDRCxPQUFPLE1BQU0sQ0FBQyxNQUFNLENBQUMsQ0FBQztpQkFDdkI7Z0JBQUMsT0FBTyxLQUFLLEVBQUU7b0JBQ2QsT0FBTyxNQUFNLENBQUMsS0FBSyxDQUFDLENBQUM7aUJBQ3RCO1lBQ0gsQ0FBQyxFQUNELEdBQUcsU0FBUyxDQUNiLENBQUM7U0FDSDtLQUNGO1NBQU07UUFDTCxpQkFBaUI7UUFDakIsSUFBSSxVQUFVLEVBQUU7WUFDZCxhQUFLLENBQUMsWUFBWSxHQUFHLEdBQUcsQ0FBQztZQUN6QixFQUFFLEVBQUUsQ0FBQztZQUNMLGFBQUssQ0FBQyxZQUFZLEdBQUcsYUFBYSxDQUFDO1NBQ3BDO0tBQ0Y7SUFDRCxPQUFPLEdBQUcsQ0FBQztBQUNiLENBQUMsQ0FBQztBQXBFVyxRQUFBLGFBQWEsaUJBb0V4QiJ9