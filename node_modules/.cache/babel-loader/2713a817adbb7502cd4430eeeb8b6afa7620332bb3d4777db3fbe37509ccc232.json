{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.makePause = void 0;\nconst playwright_page_keys_1 = require(\"./playwright-page-keys\");\nconst global_1 = require(\"./global\");\nconst expose_function_1 = require(\"./expose-function\");\nconst state_1 = require(\"./state\");\nconst makePause = async ({\n  page,\n  isDebugging\n}) => {\n  return () => {\n    const pauseAtEveryStep = state_1.state.pauseAtEveryStep;\n    if (!isDebugging && !pauseAtEveryStep) {\n      console.warn(`pause() was called without using it.debug(...). This was\nprobably a mistake, did you forget to wrap the test with pause() in a it.debug(...) block?`);\n    }\n    for (const [name, value] of Object.entries(state_1.state.exposeGlobals)) {\n      global_1.global[name] = value;\n    }\n    if (!pauseAtEveryStep) {\n      console.log(`The current test has been paused.\n  The page object is available in the debugging test.\n  Run node with --inspect-brk flag to debug with v8 node inspector.\n  When finished debugging the test, run resume() to\n  resume the tests (and not leave hanging browser instances around).`);\n    }\n    return new Promise(async resolve => {\n      global_1.global.resume = resolve;\n      if (!page._safetest_internal.fnPrefix) {\n        const fnPrefix = `${Math.random()}`;\n        page._safetest_internal.fnPrefix = fnPrefix;\n        await (0, expose_function_1.exposeFunction)(page, 'resume', () => global_1.global.resume());\n        await (0, expose_function_1.exposeFunction)(page, '__page_channel__', (method, args) => {\n          const parsedArgs = JSON.parse(args, (_key, value) => {\n            if (`${value}`.startsWith(fnPrefix)) {\n              // eslint-disable-next-line no-new-func\n              return new Function(`return ${value.slice(fnPrefix.length)}`)();\n            }\n            return value;\n          });\n          const parts = method.split('.');\n          const bound = parts.slice(0, -1).reduce((acc, cur) => acc[cur], page);\n          const fn = bound[parts[parts.length - 1]];\n          return fn.apply(bound, parsedArgs);\n        });\n      }\n      const exposePage = async () => {\n        page.evaluate(({\n          pageMethods,\n          pageProperties,\n          fnPrefix\n        }) => {\n          const stringifyArgs = args => JSON.stringify(args, (_key, val) => {\n            if (typeof val === 'function') {\n              return `${fnPrefix}${val}`;\n            }\n            return val;\n          });\n          window.page = {};\n          for (const method of pageMethods) {\n            window.page[method] = (...args) => {\n              const stringifiedArgs = stringifyArgs(args);\n              return window.__page_channel__(method, stringifiedArgs);\n            };\n          }\n          for (const property of Object.keys(pageProperties)) {\n            window.page[property] = {};\n            for (const method of pageProperties[property]) {\n              window.page[property][method] = (...args) => {\n                const stringifiedArgs = stringifyArgs(args);\n                return window.__page_channel__(`${property}.${method}`, stringifiedArgs);\n              };\n            }\n          }\n        }, {\n          pageMethods: playwright_page_keys_1.pageMethods,\n          pageProperties: playwright_page_keys_1.pageProperties,\n          fnPrefix: page._safetest_internal.fnPrefix ?? ''\n        });\n      };\n      await exposePage();\n      page.on('load', exposePage);\n    });\n  };\n};\nexports.makePause = makePause;","map":{"version":3,"names":["playwright_page_keys_1","require","global_1","expose_function_1","state_1","makePause","page","isDebugging","pauseAtEveryStep","state","console","warn","name","value","Object","entries","exposeGlobals","global","log","Promise","resolve","resume","_safetest_internal","fnPrefix","Math","random","exposeFunction","method","args","parsedArgs","JSON","parse","_key","startsWith","Function","slice","length","parts","split","bound","reduce","acc","cur","fn","apply","exposePage","evaluate","pageMethods","pageProperties","stringifyArgs","stringify","val","window","stringifiedArgs","__page_channel__","property","keys","on","exports"],"sources":["/Users/nour/Documents/GitHub/safeTestProject-v1/node_modules/safetest/src/make-pause.ts"],"sourcesContent":["import { SafePage } from './safepage';\nimport { pageMethods, pageProperties } from './playwright-page-keys';\nimport { global } from './global';\nimport { exposeFunction } from './expose-function';\nimport { state } from './state';\n\ninterface Arguments {\n  page: SafePage;\n  isDebugging: boolean;\n}\n\nexport const makePause = async ({ page, isDebugging }: Arguments) => {\n  return () => {\n    const pauseAtEveryStep = state.pauseAtEveryStep;\n    if (!isDebugging && !pauseAtEveryStep) {\n      console.warn(`pause() was called without using it.debug(...). This was\nprobably a mistake, did you forget to wrap the test with pause() in a it.debug(...) block?`);\n    }\n    for (const [name, value] of Object.entries(state.exposeGlobals)) {\n      (global as any)[name] = value;\n    }\n    if (!pauseAtEveryStep) {\n      console.log(`The current test has been paused.\n  The page object is available in the debugging test.\n  Run node with --inspect-brk flag to debug with v8 node inspector.\n  When finished debugging the test, run resume() to\n  resume the tests (and not leave hanging browser instances around).`);\n    }\n\n    return new Promise<void>(async (resolve) => {\n      (global as any).resume = resolve;\n      if (!page._safetest_internal.fnPrefix) {\n        const fnPrefix = `${Math.random()}`;\n        page._safetest_internal.fnPrefix = fnPrefix;\n        await exposeFunction(page, 'resume', () => (global as any).resume());\n        await exposeFunction(\n          page,\n          '__page_channel__',\n          (method: string, args: string) => {\n            const parsedArgs = JSON.parse(args, (_key, value) => {\n              if (`${value}`.startsWith(fnPrefix)) {\n                // eslint-disable-next-line no-new-func\n                return new Function(`return ${value.slice(fnPrefix.length)}`)();\n              }\n              return value;\n            });\n            const parts = method.split('.');\n            const bound = parts\n              .slice(0, -1)\n              .reduce((acc: any, cur) => acc[cur], page);\n            const fn = bound[parts[parts.length - 1]!];\n            return fn.apply(bound, parsedArgs);\n          }\n        );\n      }\n      const exposePage = async () => {\n        page.evaluate(\n          ({ pageMethods, pageProperties, fnPrefix }) => {\n            const stringifyArgs = (args: any[]) =>\n              JSON.stringify(args, (_key, val) => {\n                if (typeof val === 'function') {\n                  return `${fnPrefix}${val}`;\n                }\n                return val;\n              });\n\n            (window as any).page = {};\n            for (const method of pageMethods) {\n              (window as any).page[method] = (...args: any[]) => {\n                const stringifiedArgs = stringifyArgs(args);\n                return (window as any).__page_channel__(\n                  method,\n                  stringifiedArgs\n                );\n              };\n            }\n            for (const property of Object.keys(pageProperties)) {\n              (window as any).page[property] = {};\n              for (const method of (pageProperties as any)[property]) {\n                (window as any).page[property][method] = (...args: any[]) => {\n                  const stringifiedArgs = stringifyArgs(args);\n                  return (window as any).__page_channel__(\n                    `${property}.${method}`,\n                    stringifiedArgs\n                  );\n                };\n              }\n            }\n          },\n          {\n            pageMethods,\n            pageProperties,\n            fnPrefix: page._safetest_internal.fnPrefix ?? '',\n          }\n        );\n      };\n      await exposePage();\n      page.on('load', exposePage);\n    });\n  };\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}