{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.cleanupBrowser = void 0;\nconst state_1 = require(\"./state\");\nconst ignoreError = promise => promise?.catch(() => {});\nconst cleanupBrowser = async () => {\n  const context = state_1.state.browserContextInstance;\n  if (!context) return;\n  const browser = context.browser();\n  let connected = true;\n  browser?.once('disconnected', () => connected = false);\n  const pages = context.pages() ?? [];\n  for (const page of pages) {\n    const hooks = page._safetest_internal?.hooks;\n    for (const beforeClose of hooks?.beforeClose ?? []) {\n      await ignoreError(beforeClose(page));\n    }\n    await ignoreError(page.close());\n  }\n  await ignoreError(context?.close());\n  const docker = state_1.state.options.useDocker;\n  if (!docker && connected && browser?.isConnected()) {\n    await ignoreError(browser?.close());\n  }\n  delete state_1.state.browserContextInstance;\n};\nexports.cleanupBrowser = cleanupBrowser;","map":{"version":3,"names":["state_1","require","ignoreError","promise","catch","cleanupBrowser","context","state","browserContextInstance","browser","connected","once","pages","page","hooks","_safetest_internal","beforeClose","close","docker","options","useDocker","isConnected","exports"],"sources":["/Users/nour/Documents/GitHub/safeTestProject-v1/node_modules/safetest/src/cleanup-browser.ts"],"sourcesContent":["import { SafePage } from './safepage';\nimport { state } from './state';\n\nconst ignoreError = (promise?: Promise<any>) => promise?.catch(() => {});\n\nexport const cleanupBrowser = async (): Promise<void> => {\n  const context = state.browserContextInstance;\n  if (!context) return;\n  const browser = context.browser();\n  let connected = true;\n  browser?.once('disconnected', () => (connected = false));\n\n  const pages = context.pages() ?? [];\n  for (const page of pages as SafePage[]) {\n    const hooks = page._safetest_internal?.hooks;\n    for (const beforeClose of hooks?.beforeClose ?? []) {\n      await ignoreError(beforeClose(page));\n    }\n    await ignoreError(page.close());\n  }\n  await ignoreError(context?.close());\n\n  const docker = state.options.useDocker;\n  if (!docker && connected && browser?.isConnected()) {\n    await ignoreError(browser?.close());\n  }\n\n  delete state.browserContextInstance;\n};\n"],"mappings":";;;;;;AACA,MAAAA,OAAA,GAAAC,OAAA;AAEA,MAAMC,WAAW,GAAIC,OAAsB,IAAKA,OAAO,EAAEC,KAAK,CAAC,MAAK,CAAE,CAAC,CAAC;AAEjE,MAAMC,cAAc,GAAG,MAAAA,CAAA,KAA0B;EACtD,MAAMC,OAAO,GAAGN,OAAA,CAAAO,KAAK,CAACC,sBAAsB;EAC5C,IAAI,CAACF,OAAO,EAAE;EACd,MAAMG,OAAO,GAAGH,OAAO,CAACG,OAAO,EAAE;EACjC,IAAIC,SAAS,GAAG,IAAI;EACpBD,OAAO,EAAEE,IAAI,CAAC,cAAc,EAAE,MAAOD,SAAS,GAAG,KAAM,CAAC;EAExD,MAAME,KAAK,GAAGN,OAAO,CAACM,KAAK,EAAE,IAAI,EAAE;EACnC,KAAK,MAAMC,IAAI,IAAID,KAAmB,EAAE;IACtC,MAAME,KAAK,GAAGD,IAAI,CAACE,kBAAkB,EAAED,KAAK;IAC5C,KAAK,MAAME,WAAW,IAAIF,KAAK,EAAEE,WAAW,IAAI,EAAE,EAAE;MAClD,MAAMd,WAAW,CAACc,WAAW,CAACH,IAAI,CAAC,CAAC;;IAEtC,MAAMX,WAAW,CAACW,IAAI,CAACI,KAAK,EAAE,CAAC;;EAEjC,MAAMf,WAAW,CAACI,OAAO,EAAEW,KAAK,EAAE,CAAC;EAEnC,MAAMC,MAAM,GAAGlB,OAAA,CAAAO,KAAK,CAACY,OAAO,CAACC,SAAS;EACtC,IAAI,CAACF,MAAM,IAAIR,SAAS,IAAID,OAAO,EAAEY,WAAW,EAAE,EAAE;IAClD,MAAMnB,WAAW,CAACO,OAAO,EAAEQ,KAAK,EAAE,CAAC;;EAGrC,OAAOjB,OAAA,CAAAO,KAAK,CAACC,sBAAsB;AACrC,CAAC;AAvBYc,OAAA,CAAAjB,cAAc,GAAAA,cAAA"},"metadata":{},"sourceType":"script","externalDependencies":[]}