{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.bootstrap = void 0;\nconst render_1 = require(\"./render\");\nconst state_1 = require(\"./state\");\nconst bootstrap = async args => {\n  const mapper = dep => {\n    const noExt = dep.replace(/\\.m?[tj]sx?/, '');\n    return noExt.startsWith('.') ? noExt : `./${noExt}`;\n  };\n  let known = [];\n  let importer;\n  if ('webpackContext' in args) {\n    if (args.webpackContext === false) return args.defaultRender();\n    known = [...new Set(args.webpackContext.keys().map(mapper))];\n    importer = args.webpackContext;\n  } else if ('importGlob' in args) {\n    if (args.importGlob === false) return args.defaultRender();\n    const entries = Object.entries(args.importGlob);\n    const entriesMapped = entries.map(([k, v]) => [mapper(k), v]);\n    const fixedImports = Object.fromEntries(entriesMapped);\n    known = entriesMapped.map(([k]) => k);\n    importer = s => fixedImports[mapper(s)]();\n  } else if ('imports' in args) {\n    const entries = Object.entries(args.imports);\n    const entriesMapped = entries.map(([k, v]) => [mapper(k), v]);\n    const fixedImports = Object.fromEntries(entriesMapped);\n    known = entriesMapped.map(([k]) => k);\n    importer = s => fixedImports[mapper(s)]();\n  } else {\n    if (args.import === false) return args.defaultRender();\n    importer = args.import;\n  }\n  let searchParams;\n  try {\n    searchParams = new URLSearchParams(window.location.search);\n  } catch (e) {}\n  let testName = searchParams?.get('test_name');\n  let testPath = searchParams?.get('test_path');\n  if (window.location.hash.includes('safetest')) {\n    if (known.length) {\n      Promise.resolve().then(async () => {\n        for (const k of known) {\n          state_1.state.tests = {};\n          await importer(k);\n          await window.waitForSafetestReady;\n          const tests = Object.keys(state_1.state.tests);\n          console.group(`Tests for ${k} (${tests.length} total)`);\n          for (const test of tests) {\n            const url = new URL(location.href);\n            const append = url.search.includes('?') ? '&' : '?';\n            const testName = test.trim().replace(/ /g, '+');\n            url.search = `${url.search}${append}test_path=${k}&test_name=${testName}`;\n            url.hash = '';\n            console.log(url.href);\n          }\n          console.groupEnd();\n        }\n      });\n    } else {\n      console.log('No known tests');\n    }\n  } else if (testPath && !testName) {\n    try {\n      await importer(testPath);\n      await window.waitForSafetestReady;\n    } catch {\n      console.log(`Test \"${testPath}\" not found, known tests are:`, known);\n    }\n    const tests = Object.keys(state_1.state.tests).map(test => {\n      const url = new URL(location.href);\n      const append = url.search.includes('?') ? '&' : '?';\n      url.search = `${url.search}${append}test_name=${test}`;\n      url.hash = '';\n      return url.href;\n    });\n    if (tests.length) {\n      console.groupCollapsed('Known test files');\n      for (const test of tests) console.info(test);\n      console.groupEnd();\n    }\n  }\n  let retryAttempt = 0;\n  if (!testPath && !testName && window[render_1.SAFETEST_INTERFACE]) {\n    ({\n      testPath,\n      testName,\n      retryAttempt\n    } = (await window[render_1.SAFETEST_INTERFACE]?.('GET_INFO')) ?? {});\n  }\n  if (testName && testPath) {\n    try {\n      await importer(testPath);\n      await window.waitForSafetestReady;\n    } catch (error) {\n      console.log(`file \"${testPath}\" could not be imported, known files are:`, known);\n      throw error;\n    }\n    if (state_1.state.browserState) state_1.state.browserState.retryAttempt = retryAttempt;\n    await window.waitForSafetestReady;\n    if (typeof state_1.state.tests[testName] !== 'function') {\n      const availableTests = Object.keys(state_1.state.tests);\n      console.log(`Test \"${testName}\" not found, known tests are:`, availableTests);\n    } else {\n      state_1.state.tests[testName]();\n    }\n  } else {\n    return args.defaultRender();\n  }\n};\nexports.bootstrap = bootstrap;","map":{"version":3,"names":["render_1","require","state_1","bootstrap","args","mapper","dep","noExt","replace","startsWith","known","importer","webpackContext","defaultRender","Set","keys","map","importGlob","entries","Object","entriesMapped","k","v","fixedImports","fromEntries","s","imports","import","searchParams","URLSearchParams","window","location","search","e","testName","get","testPath","hash","includes","length","Promise","resolve","then","state","tests","waitForSafetestReady","console","group","test","url","URL","href","append","trim","log","groupEnd","groupCollapsed","info","retryAttempt","SAFETEST_INTERFACE","error","browserState","availableTests","exports"],"sources":["/Users/nour/Documents/GitHub/safeTestProject-v1/node_modules/safetest/src/bootstrap.ts"],"sourcesContent":["import { mapKeys } from 'lodash';\nimport { SAFETEST_INTERFACE } from './render';\nimport { state } from './state';\n\n// @ts-ignore\nimport type { ImportGlobFunction } from 'vite';\n\nexport type Importer =\n  | {\n      // @ts-ignore\n      webpackContext: false | webpack.Context;\n    }\n  | {\n      importGlob: false | ReturnType<ImportGlobFunction>;\n    }\n  | {\n      import: false | ((s: string) => Promise<unknown>);\n    }\n  | {\n      imports: false | Record<string, () => Promise<unknown>>;\n    };\n\ntype BootstrapArgs = Importer & {\n  defaultRender: () => any;\n};\n\nexport const bootstrap = async (args: BootstrapArgs): Promise<any> => {\n  const mapper = (dep: string) => {\n    const noExt = dep.replace(/\\.m?[tj]sx?/, '');\n    return noExt.startsWith('.') ? noExt : `./${noExt}`;\n  };\n  let known: string[] = [];\n  let importer: (s: string) => unknown;\n  if ('webpackContext' in args) {\n    if (args.webpackContext === false) return args.defaultRender();\n    known = [...new Set(args.webpackContext.keys().map(mapper))];\n    importer = args.webpackContext;\n  } else if ('importGlob' in args) {\n    if (args.importGlob === false) return args.defaultRender();\n    const entries = Object.entries(args.importGlob);\n    const entriesMapped = entries.map(([k, v]) => [mapper(k), v] as const);\n    const fixedImports = Object.fromEntries(entriesMapped);\n    known = entriesMapped.map(([k]) => k);\n    importer = (s) => (fixedImports[mapper(s)] as any)();\n  } else if ('imports' in args) {\n    const entries = Object.entries(args.imports);\n    const entriesMapped = entries.map(([k, v]) => [mapper(k), v] as const);\n    const fixedImports = Object.fromEntries(entriesMapped);\n    known = entriesMapped.map(([k]) => k);\n    importer = (s) => fixedImports[mapper(s)]();\n  } else {\n    if (args.import === false) return args.defaultRender();\n    importer = args.import;\n  }\n\n  let searchParams: URLSearchParams | undefined;\n\n  try {\n    searchParams = new URLSearchParams(window.location.search);\n  } catch (e) {}\n\n  let testName = searchParams?.get('test_name');\n  let testPath = searchParams?.get('test_path');\n  if (window.location.hash.includes('safetest')) {\n    if (known.length) {\n      Promise.resolve().then(async () => {\n        for (const k of known) {\n          state.tests = {};\n          await importer(k);\n          await (window as any).waitForSafetestReady;\n          const tests = Object.keys(state.tests);\n          console.group(`Tests for ${k} (${tests.length} total)`);\n          for (const test of tests) {\n            const url = new URL(location.href);\n            const append = url.search.includes('?') ? '&' : '?';\n            const testName = test.trim().replace(/ /g, '+');\n            url.search = `${url.search}${append}test_path=${k}&test_name=${testName}`;\n            url.hash = '';\n            console.log(url.href);\n          }\n          console.groupEnd();\n        }\n      });\n    } else {\n      console.log('No known tests');\n    }\n  } else if (testPath && !testName) {\n    try {\n      await importer(testPath);\n      await (window as any).waitForSafetestReady;\n    } catch {\n      console.log(`Test \"${testPath}\" not found, known tests are:`, known);\n    }\n    const tests = Object.keys(state.tests).map((test) => {\n      const url = new URL(location.href);\n      const append = url.search.includes('?') ? '&' : '?';\n      url.search = `${url.search}${append}test_name=${test}`;\n      url.hash = '';\n      return url.href;\n    });\n    if (tests.length) {\n      console.groupCollapsed('Known test files');\n      for (const test of tests) console.info(test);\n      console.groupEnd();\n    }\n  }\n  let retryAttempt = 0;\n  if (!testPath && !testName && (window as any)[SAFETEST_INTERFACE]) {\n    ({ testPath, testName, retryAttempt } =\n      (await (window as any)[SAFETEST_INTERFACE]?.('GET_INFO')) ?? {});\n  }\n  if (testName && testPath) {\n    try {\n      await importer(testPath);\n      await (window as any).waitForSafetestReady;\n    } catch (error) {\n      console.log(\n        `file \"${testPath}\" could not be imported, known files are:`,\n        known\n      );\n      throw error;\n    }\n    if (state.browserState) state.browserState.retryAttempt = retryAttempt;\n    await (window as any).waitForSafetestReady;\n    if (typeof state.tests[testName] !== 'function') {\n      const availableTests = Object.keys(state.tests);\n      console.log(\n        `Test \"${testName}\" not found, known tests are:`,\n        availableTests\n      );\n    } else {\n      state.tests[testName]!();\n    }\n  } else {\n    return args.defaultRender();\n  }\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}