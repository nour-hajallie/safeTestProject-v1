{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.state = void 0;\nexports.state = {\n  tests: {},\n  retryMap: {},\n  options: {},\n  currentSuite: '',\n  currentTest: '',\n  isGlobalSetupTeardownRegistered: false,\n  pendingExpects: {},\n  exposeGlobals: {},\n  debugging: new Set(),\n  passedTests: new Set(),\n  nextIndex: 0,\n  afterAllsDone: [],\n  artifacts: [],\n  isCi: false,\n  bootstrappedAt: '',\n  getState: () => expect?.getState?.() ?? {}\n};","map":{"version":3,"names":["exports","state","tests","retryMap","options","currentSuite","currentTest","isGlobalSetupTeardownRegistered","pendingExpects","exposeGlobals","debugging","Set","passedTests","nextIndex","afterAllsDone","artifacts","isCi","bootstrappedAt","getState","expect"],"sources":["/Users/nour/Documents/GitHub/safeTestProject-v1/node_modules/safetest/src/state.ts"],"sourcesContent":["import type { BrowserContext } from 'playwright';\nimport { RenderOptions } from './render';\n\nexport interface State {\n  tests: Record<string, () => void>;\n  currentSuite: string;\n  currentTest: string;\n  retryMap: Record<string, number>;\n  __filename?: string;\n  activeTest?: string;\n  pendingExpects: Record<string, number>;\n  options: RenderOptions;\n  isGlobalSetupTeardownRegistered: boolean;\n  debugging: Set<string>;\n  passedTests: Set<string>;\n  exposeGlobals: Record<string, any>;\n  bridge?: Function;\n  pause?: Function;\n  pauseAtEveryStep?: boolean;\n  /**\n   * Tests run way faster if we keep the window alive. Note: Only do this when not\n   * in video mode else the video memory wreaks havoc.\n   */\n  browserContextInstance?: BrowserContext & {\n    headless?: boolean;\n  };\n  nextIndex: number;\n  debugPort?: number;\n  redirectUrl?: string;\n  /** What to do when everything is really done, like shutdown docker container */\n  afterAllsDone: Array<() => Promise<void>>;\n  artifacts: Array<{\n    test: string;\n    type: 'snapshot' | 'diff' | 'received' | 'trace' | 'video';\n    path: string;\n    confirmed: boolean;\n  }>;\n  isCi: boolean;\n  artifactsJson?: string;\n  bootstrappedAt: string;\n  getState: () => ReturnType<typeof expect.getState>;\n  testPath?: string;\n  /**\n   * When a test is being run we need to track which element to render, this is only useful for\n   * the browser side of things\n   */\n  browserState?: {\n    retryAttempt: number;\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    renderElement: { __type: 'renderElement'; value: any };\n  };\n}\n\nexport const state: State = {\n  tests: {},\n  retryMap: {},\n  options: {},\n  currentSuite: '',\n  currentTest: '',\n  isGlobalSetupTeardownRegistered: false,\n  pendingExpects: {},\n  exposeGlobals: {},\n  debugging: new Set(),\n  passedTests: new Set(),\n  nextIndex: 0,\n  afterAllsDone: [],\n  artifacts: [],\n  isCi: false,\n  bootstrappedAt: '',\n  getState: () => expect?.getState?.() ?? {},\n};\n"],"mappings":";;;;;;AAqDaA,OAAA,CAAAC,KAAK,GAAU;EAC1BC,KAAK,EAAE,EAAE;EACTC,QAAQ,EAAE,EAAE;EACZC,OAAO,EAAE,EAAE;EACXC,YAAY,EAAE,EAAE;EAChBC,WAAW,EAAE,EAAE;EACfC,+BAA+B,EAAE,KAAK;EACtCC,cAAc,EAAE,EAAE;EAClBC,aAAa,EAAE,EAAE;EACjBC,SAAS,EAAE,IAAIC,GAAG,EAAE;EACpBC,WAAW,EAAE,IAAID,GAAG,EAAE;EACtBE,SAAS,EAAE,CAAC;EACZC,aAAa,EAAE,EAAE;EACjBC,SAAS,EAAE,EAAE;EACbC,IAAI,EAAE,KAAK;EACXC,cAAc,EAAE,EAAE;EAClBC,QAAQ,EAAEA,CAAA,KAAMC,MAAM,EAAED,QAAQ,GAAE,CAAE,IAAI;CACzC"},"metadata":{},"sourceType":"script","externalDependencies":[]}