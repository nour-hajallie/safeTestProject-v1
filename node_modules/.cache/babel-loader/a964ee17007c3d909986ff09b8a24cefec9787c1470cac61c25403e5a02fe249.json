{"ast":null,"code":"\"use strict\";\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.getPage = void 0;\nconst deepmerge_1 = __importDefault(require(\"deepmerge\"));\nconst node_fetch_1 = __importDefault(require(\"node-fetch\"));\nconst state_1 = require(\"./state\");\nconst is_in_node_1 = require(\"./is-in-node\");\nconst safe_require_1 = require(\"./safe-require\");\nconst cleanup_browser_1 = require(\"./cleanup-browser\");\nconst override_events_1 = require(\"./override-events\");\nconst makeWarning = msg => {\n  let warnOnce = false;\n  return console => {\n    if (warnOnce) return;\n    warnOnce = true;\n    console.warn(msg);\n  };\n};\nconst warnOpeningLocal = makeWarning('Docker and headed mode detected, opening a local browser with a remote debug connection.');\nasync function getPage(options = {}, forceNewBrowser = false) {\n  if (!is_in_node_1.isInNode) return {};\n  const playwright = (0, safe_require_1.safeRequire)('playwright');\n  if (forceNewBrowser) {\n    await (0, cleanup_browser_1.cleanupBrowser)();\n  }\n  if (!state_1.state.browserContextInstance) {\n    const server = options.browserServer;\n    const browserType = playwright[options.browser ?? 'chromium'];\n    const browser = server ? await browserType.connect(server, {\n      timeout: options.timeout ?? 30000\n    }) : await browserType.launch(options);\n    state_1.state.nextIndex = 0;\n    const started = Date.now();\n    state_1.state.browserContextInstance = await browser.newContext(options);\n    state_1.state.browserContextInstance.on('page', page => {\n      if (page._safetest_internal) return;\n      page._safetest_internal = {\n        pageIndex: state_1.state.nextIndex++,\n        started: Date.now() - started,\n        hooks: (0, deepmerge_1.default)({\n          beforeNavigate: [],\n          beforeClose: [],\n          afterTest: []\n        }, options.hooks ?? {})\n      };\n      if (options.defaultTimeout) {\n        page.setDefaultTimeout(options.defaultTimeout);\n      }\n      if (options.defaultNavigationTimeout) {\n        page.setDefaultNavigationTimeout(options.defaultNavigationTimeout);\n      }\n      if (options.enableScreenCasting) {\n        (0, override_events_1.overrideEvents)(page);\n      }\n    });\n    if (typeof options.headless !== 'undefined' && !server) {\n      state_1.state.browserContextInstance.headless = options.headless;\n    }\n    state_1.state.browserContextInstance.setDefaultTimeout(3000);\n  }\n  const server = options.browserServer;\n  const page = state_1.state.browserContextInstance.pages()[0] ?? (await state_1.state.browserContextInstance.newPage());\n  if (server) {\n    const debugPageShown = new Set();\n    const logDebugTabs = async () => {\n      const debugPort = state_1.state.debugPort;\n      const console = (0, safe_require_1.safeRequire)('console');\n      const redirectServer = (0, safe_require_1.safeRequire)('./redirect-server');\n      let list = [];\n      try {\n        const listUrl = `http://127.0.0.1:${debugPort}/json/list`;\n        const response = await (0, node_fetch_1.default)(listUrl);\n        list = await response.json();\n      } catch {}\n      const items = list.map(l => l.devtoolsFrontendUrl);\n      const itemsSet = new Set(items);\n      const newItems = items.filter(url => !debugPageShown.has(url));\n      const removedItems = Array.from(debugPageShown).filter(url => !itemsSet.has(url));\n      const MY_IP = process.env['MY_IP'] || '127.0.0.1';\n      for (const url of newItems) {\n        const remoteUrl = url.replace('127.0.0.1', MY_IP);\n        const debugUrl = `http://${MY_IP}:${debugPort}${remoteUrl}`;\n        redirectServer.notify(0, debugUrl);\n        if (options.headless === false) {\n          warnOpeningLocal(console);\n        }\n        console.log(`Debug tab at: http://${MY_IP}:${debugPort}${remoteUrl}`);\n      }\n      for (const url of removedItems) {\n        const remoteUrl = url.replace('127.0.0.1', MY_IP);\n        const debugUrl = `http://${MY_IP}:${debugPort}${remoteUrl}`;\n        debugPageShown.delete(url);\n        console.log(`Closed tab    ${debugUrl}`);\n      }\n    };\n    page._safetest_internal.pageSetupPromise = logDebugTabs();\n    page.on('close', logDebugTabs);\n  }\n  await page._safetest_internal.pageSetupPromise;\n  return {\n    page\n  };\n}\nexports.getPage = getPage;","map":{"version":3,"names":["deepmerge_1","__importDefault","require","node_fetch_1","state_1","is_in_node_1","safe_require_1","cleanup_browser_1","override_events_1","makeWarning","msg","warnOnce","console","warn","warnOpeningLocal","getPage","options","forceNewBrowser","isInNode","playwright","safeRequire","cleanupBrowser","state","browserContextInstance","server","browserServer","browserType","browser","connect","timeout","launch","nextIndex","started","Date","now","newContext","on","page","_safetest_internal","pageIndex","hooks","default","beforeNavigate","beforeClose","afterTest","defaultTimeout","setDefaultTimeout","defaultNavigationTimeout","setDefaultNavigationTimeout","enableScreenCasting","overrideEvents","headless","pages","newPage","debugPageShown","Set","logDebugTabs","debugPort","redirectServer","list","listUrl","response","json","items","map","l","devtoolsFrontendUrl","itemsSet","newItems","filter","url","has","removedItems","Array","from","MY_IP","process","env","remoteUrl","replace","debugUrl","notify","log","delete","pageSetupPromise","exports"],"sources":["/Users/nour/Documents/GitHub/safeTestProject-v1/node_modules/safetest/src/get-page.ts"],"sourcesContent":["import merge from 'deepmerge';\n\nimport fetch from 'node-fetch';\n\nimport { state } from './state';\nimport { isInNode } from './is-in-node';\nimport { safeRequire } from './safe-require';\nimport { SafePage } from './safepage';\nimport { cleanupBrowser } from './cleanup-browser';\nimport { RenderOptions } from './render';\nimport { overrideEvents } from './override-events';\n\ninterface RenderReturn {\n  /** The Playwright page object of the rendered component. */\n  page: SafePage;\n}\n\nconst makeWarning = (msg: string) => {\n  let warnOnce = false;\n  return (console: Console) => {\n    if (warnOnce) return;\n    warnOnce = true;\n    console.warn(msg);\n  };\n};\n\nconst warnOpeningLocal = makeWarning(\n  'Docker and headed mode detected, opening a local browser with a remote debug connection.'\n);\n\nexport async function getPage(\n  options: RenderOptions = {},\n  forceNewBrowser = false\n): Promise<RenderReturn> {\n  if (!isInNode) return {} as any;\n\n  const playwright = safeRequire('playwright');\n\n  if (forceNewBrowser) {\n    await cleanupBrowser();\n  }\n\n  if (!state.browserContextInstance) {\n    const server = options.browserServer;\n    const browserType = playwright[options.browser ?? 'chromium'];\n    const browser = server\n      ? await browserType.connect(server, { timeout: options.timeout ?? 30000 })\n      : await browserType.launch(options);\n    state.nextIndex = 0;\n    const started = Date.now();\n    state.browserContextInstance = await browser.newContext(options);\n\n    state.browserContextInstance.on('page', (page) => {\n      if ((page as SafePage)._safetest_internal) return;\n      (page as SafePage)._safetest_internal = {\n        pageIndex: state.nextIndex++,\n        started: Date.now() - started!,\n        hooks: merge(\n          {\n            beforeNavigate: [],\n            beforeClose: [],\n            afterTest: [],\n          },\n          options.hooks ?? {}\n        ),\n      } as any;\n\n      if (options.defaultTimeout) {\n        page.setDefaultTimeout(options.defaultTimeout);\n      }\n      if (options.defaultNavigationTimeout) {\n        page.setDefaultNavigationTimeout(options.defaultNavigationTimeout);\n      }\n\n      if (options.enableScreenCasting) {\n        overrideEvents(page);\n      }\n    });\n    if (typeof options.headless !== 'undefined' && !server) {\n      state.browserContextInstance.headless = options.headless;\n    }\n    state.browserContextInstance.setDefaultTimeout(3000);\n  }\n\n  const server = options.browserServer;\n  const page: SafePage = (state.browserContextInstance.pages()[0] ??\n    (await state.browserContextInstance.newPage())) as any;\n\n  if (server) {\n    const debugPageShown = new Set<string>();\n\n    const logDebugTabs = async () => {\n      const debugPort = state.debugPort;\n      const console = safeRequire('console');\n      const redirectServer = safeRequire('./redirect-server');\n\n      let list = [];\n      try {\n        const listUrl = `http://127.0.0.1:${debugPort}/json/list`;\n        const response = await fetch(listUrl);\n        list = await response.json();\n      } catch {}\n      const items: string[] = list.map((l: any) => l.devtoolsFrontendUrl);\n      const itemsSet = new Set(items);\n      const newItems = items.filter((url) => !debugPageShown.has(url));\n      const removedItems = Array.from(debugPageShown).filter(\n        (url) => !itemsSet.has(url)\n      );\n      const MY_IP = process.env['MY_IP'] || '127.0.0.1';\n      for (const url of newItems) {\n        const remoteUrl = url.replace('127.0.0.1', MY_IP);\n        const debugUrl = `http://${MY_IP}:${debugPort}${remoteUrl}`;\n        redirectServer.notify(0, debugUrl);\n        if (options.headless === false) {\n          warnOpeningLocal(console);\n        }\n        console.log(`Debug tab at: http://${MY_IP}:${debugPort}${remoteUrl}`);\n      }\n      for (const url of removedItems) {\n        const remoteUrl = url.replace('127.0.0.1', MY_IP);\n        const debugUrl = `http://${MY_IP}:${debugPort}${remoteUrl}`;\n        debugPageShown.delete(url);\n        console.log(`Closed tab    ${debugUrl}`);\n      }\n    };\n    page._safetest_internal.pageSetupPromise = logDebugTabs();\n    page.on('close', logDebugTabs);\n  }\n\n  await page._safetest_internal.pageSetupPromise;\n\n  return { page };\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}