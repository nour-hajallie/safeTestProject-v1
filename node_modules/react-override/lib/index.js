"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (g && (g = 0, op[0] && (_ = 0)), _) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.createOverride = exports.configureCreateOverride = void 0;
var react_1 = __importDefault(require("react"));
var configureCreateOverride = function (warnOnUnmountedCurrent) {
    if (warnOnUnmountedCurrent === void 0) { warnOnUnmountedCurrent = true; }
    return function (defaultValue) {
        var bounds = [];
        var Context = react_1.default.createContext({
            value: defaultValue,
            version: 0,
        });
        var useValue = function () {
            var context = __assign({}, react_1.default.useContext(Context));
            if (context.version === 0) {
                for (var _i = 0, bounds_1 = bounds; _i < bounds_1.length; _i++) {
                    var bound = bounds_1[_i];
                    context.value = bound(context.value);
                    context.version++;
                }
            }
            return context;
        };
        var Override = {
            useValue: function () { return useValue().value; },
            Override: function (props) {
                var old = useValue();
                var value = old.value;
                var newValue = {
                    value: props.with(value),
                    version: old.version + 1,
                };
                return (react_1.default.createElement(Context.Provider, { value: newValue }, props.children));
            },
            bind: function (callback) { return bounds.push(callback); },
            createRef: function (withValue) {
                var unmounted = true;
                var ref = undefined;
                var incrementVersion;
                var resolver;
                var initialRenderDeferred = {};
                initialRenderDeferred.promise = new Promise(function (resolve, reject) {
                    initialRenderDeferred.resolve = resolve;
                    initialRenderDeferred.reject = reject;
                });
                var Provider = (function (props) {
                    react_1.default.useEffect(function () {
                        resolver === null || resolver === void 0 ? void 0 : resolver();
                        resolver = undefined;
                        initialRenderDeferred === null || initialRenderDeferred === void 0 ? void 0 : initialRenderDeferred.resolve();
                        initialRenderDeferred = undefined;
                    });
                    react_1.default.useEffect(function () {
                        incrementVersion = function () { return setVersion(function (t) { return t + 1; }); };
                        unmounted = false;
                        return function () { return void (unmounted = true); };
                    }, []);
                    var oldValue = react_1.default.useContext(Context);
                    if (!ref) {
                        ref = {
                            current: withValue ? withValue(oldValue.value) : oldValue.value,
                        };
                    }
                    var _a = react_1.default.useState(oldValue.version + 1), version = _a[0], setVersion = _a[1];
                    var newValue = {
                        value: ref.current,
                        version: version + 1,
                    };
                    return (react_1.default.createElement(Context.Provider, { value: newValue }, props.children));
                });
                Provider.waitForRender = function (timeout) { return __awaiter(void 0, void 0, void 0, function () {
                    return __generator(this, function (_a) {
                        if (!(initialRenderDeferred === null || initialRenderDeferred === void 0 ? void 0 : initialRenderDeferred.promise))
                            return [2 /*return*/];
                        if (!timeout)
                            return [2 /*return*/, initialRenderDeferred.promise];
                        return [2 /*return*/, Promise.race([
                                initialRenderDeferred.promise,
                                new Promise(function (_, reject) {
                                    return setTimeout(function () { return reject(new Error('waitForRender timed out')); }, timeout);
                                }),
                            ])];
                    });
                }); };
                Object.defineProperty(Provider, 'current', {
                    get: function () {
                        if (unmounted && warnOnUnmountedCurrent) {
                            console.error('Attempted to get current value when Element is not rendered. Do you forget to `waitForRender()`?');
                        }
                        return ref === null || ref === void 0 ? void 0 : ref.current;
                    },
                });
                Provider.forceUpdate = function () {
                    if (unmounted) {
                        throw new Error('Attempted to force update when Element is not rendered');
                    }
                    return new Promise(function (resolve) {
                        resolver = resolve;
                        incrementVersion();
                    });
                };
                return Provider;
            },
        };
        return Override;
    };
};
exports.configureCreateOverride = configureCreateOverride;
exports.createOverride = (0, exports.configureCreateOverride)();
//# sourceMappingURL=index.js.map