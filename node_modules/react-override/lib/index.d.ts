import React from 'react';
type PropsWithChildren<P = unknown> = P & {
    children?: React.ReactNode;
};
export interface Override<T> {
    /** Hook to get the current value of the overridable value. */
    useValue: () => T;
    /**
     * Component used to override the value.
     *  This is like Context.Provider with the exception that the
     * `with` prop gets passed the existing value so you can delegate to
     * the existing value as needed.
     */
    Override: React.FC<PropsWithChildren<{
        with: (old: T) => T;
    }>>;
    /** Bind override value late. Use this when you need to declare your overrides in a separate file due to import limitations. */
    bind: (callback: (value: T) => T) => void;
    /**
     * Create an extractor component.
     * This allows you to "pull out" the override value to manipulate during a test.
     * For example:
     *
     *     const ApiRef = ApiOverride.createRef();
     *     const { rendered } = render(<ApiRef><Thing /></ApiRef>);
     *
     *     rendered.getByText('load more').click();
     *     expect(rendered).toHaveMoreElements();
     *     const loadMore = ApiRef.current.loadMore;
     *     ApiRef.current.loadMore = () => { throw new Error('no network'); };
     *     rendered.getByText('load more').click();
     *     expect(theError).toHaveHappened(); // Not real code, but you get the idea.
     *     ApiRef.current.loadMore = loadMore;
     *     rendered.getByText('load more').click();
     *     expect(rendered).toHaveMoreElements();
     */
    createRef: (withValue?: (t: T) => T) => React.FC<PropsWithChildren> & {
        /** Gets the currently mounted value of the override. */
        current: T;
        /** Waits for the element to render, will timeout with a rejection after `timeoutMs` if provided. */
        waitForRender: (timeoutMs?: number) => Promise<void>;
        /** Forces the component to update. Useful when you changed the return value of a function or spy */
        forceUpdate: () => Promise<void>;
    };
}
export declare const configureCreateOverride: (warnOnUnmountedCurrent?: boolean) => <T>(defaultValue: T) => Override<T>;
export declare const createOverride: <T>(defaultValue: T) => Override<T>;
export {};
//# sourceMappingURL=index.d.ts.map